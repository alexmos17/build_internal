# -*- python -*-
# ex: set syntax=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

from buildbot.scheduler import Triggerable

# These modules come from scripts, which must be in the PYTHONPATH.
from common import chromium_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import chromeos_factory
from master.factory import chromium_factory
from master.factory import swarm_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_job_svn import TryJobSubversion
from master_site_config import TryServerLinux

import config

ActiveMaster = TryServerLinux


MAIL_NOTIFIER = True
UPDATE_CODEREVIEW = ActiveMaster.is_production_host
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False


####### BUILDERS

## FACTORIES

m_chromium_linux = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='linux2')

def NextJob(builder, requests):
  """Always prioritize commit queue jobs over try jobs."""
  commit_bot = 'commit-bot@chromium.org'
  for req in requests:
    if (any(c.who == commit_bot for c in req.source.changes)
        or req.properties.getProperty('requester') == commit_bot):
      return req
  return requests[0]


# Tests that are single-machine shard-safe.
sharded_tests = [
  'aura_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  # http://crbug.com/178006
  #'content_unittests',
  'crypto_unittests',
  'device_unittests',
  # http://crbug.com/178005
  #'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sync_integration_tests',
  'sync_unit_tests',
  'ui_unittests',
  # http://crbug.com/177927
  #'unit_tests',
  'views_unittests',
  'webkit_compositor_bindings_unittests',
]

def CreateBuilder(platform, builder_name, target,
                  options, tests,
                  slavebuilddir=None,
                  factory_properties=None,
                  annotation_script=None,
                  ninja=True,
                  goma=False,
                  clang=False):
  """Generates and register a builder along with its slave(s)."""
  if platform not in ('linux', 'android'):
    raise Exception(platform + ' is not a known os type')
  assert tests is not None or annotation_script, (
      'Must either specify tests or use an annotation script')

  factory_properties = (factory_properties or {}).copy()

  factory_properties.setdefault('non_default', [
      'check_licenses',
      'chromedriver2_tests',
      'courgette_unittests',
      'googleurl_unittests',
      'sync_integration_tests',
    ])
  factory_properties.setdefault('gclient_env', {})
  factory_properties['gclient_env'].setdefault('GYP_DEFINES', '')
  factory_properties['gclient_env']['GYP_DEFINES'] += ' dcheck_always_on=1'
  if not 'fastbuild=0' in factory_properties['gclient_env']['GYP_DEFINES']:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' fastbuild=1'
  factory_properties.setdefault('sharded_tests', sharded_tests)

  build_tool = []
  if platform == 'linux':
    factory = m_chromium_linux
  elif platform == 'android':
    factory = m_chromium_android

  if ninja:
    factory_properties['gclient_env']['GYP_GENERATORS'] = 'ninja'
    # Android's annotated step uses 'buildtool' instead of
    # 'GYP_GENERATORS'. Set it right here.
    # Ref: src/build/android/buildbot/buildbot_functions.sh
    factory_properties['buildtool'] = 'ninja'
    build_tool.append('--build-tool=ninja')
  if goma:
    if clang:
      build_tool.append('--compiler=goma-clang')
    else:
      build_tool.append('--compiler=goma')
  if clang:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' clang=1'

  # Android's annotated step uses factory_properties['extra_gyp_defines']
  # instead of properly using factory_properties['gclient_env']['GYP_DEFINES'].
  # Ref: src/build/android/buildbot/buildbot_functions.sh
  # TODO(ilevy): The script should be changed to use the canonical value.
  factory_properties['extra_gyp_defines'] = (
      factory_properties['gclient_env']['GYP_DEFINES'])

  options = build_tool + ['--clobber-post-fail'] + (options or [])

  enable_swarm_tests = builder_name in ('linux', 'linux_rel')

  compile_timeout = 2400
  if annotation_script:
    # Note new slave type AnnotatedTrybot; we don't want a compile step added
    # in gclient_factory.py.
    # TODO(maruel): Support enable_swarm_tests
    builder_factory = factory.ChromiumAnnotationFactory(
        slave_type='AnnotatedTrybot', target=target, tests=tests,
        options=options,
        compile_timeout=compile_timeout,
        factory_properties=factory_properties,
        annotation_script=annotation_script)
  else:
    builder_factory = factory.ChromiumFactory(
        slave_type='Trybot', target=target, tests=tests, options=options,
        compile_timeout=compile_timeout,
        factory_properties=factory_properties,
        enable_swarm_tests=enable_swarm_tests)
  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info

# Try queues.
pools = BuildersPools('chrome')

# The default targets to build.
common_targets = [
  'chromium_builder_tests',
  'test_shell_tests',
]

# Linux builder
linux_tests = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'check_deps',
  'check_deps2git',
  'check_licenses',
  'crypto',
  'dbus',
  'device_unittests',
  'googleurl',
  'gpu',
  'interactive_ui_tests',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'sandbox_linux_unittests',
  'sync_integration',
  'test_shell',
  'unit',
  'webkit_compositor_bindings_unittests',
  #'webkit_lint',
  #'webkit_unit',
]

# Tests that are single-machine shard-safe on Linux
b_linux_futura = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=common_targets + ['dbus_unittests'],
    tests=linux_tests,
    builder_name='linux_futura',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'use_aura=1',
      },
      'window_manager': 'False'
    },
    slavebuilddir='linux_aura')

linux_aura_tests = [
  'aura',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'compositor',
  'content_browsertests',
  'content_unittests',
  'crypto',
  'device_unittests',
  'googleurl',
  'gpu',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle',
  'media',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'ui_unittests',
  'unit_sql',
  'unit_sync',
  'unit_unit',
  'views',
]

linux_aura_options = [
  'aura_builder',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'compositor_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'googleurl_unittests',
  'gpu_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sql_unittests',
  'ui_unittests',
]

b_linux_aura = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_aura_options,
    tests=linux_aura_tests,
    builder_name='linux_aura',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'use_aura=1',
      },
      'window_manager': 'False'
    },
    slavebuilddir='linux_aura')

# Experimental precise slaves.
b_linux_precise_exp = CreateBuilder(
    platform='linux',
    target='Debug',
    goma=True,
    options=common_targets + ['dbus_unittests'],
    tests=linux_tests,
    builder_name='linux_precise_exp',
    slavebuilddir='linux_precise_exp',
    factory_properties={
      'use_xvfb_on_linux': True,
    })

def without_tests(pairs, without):
  return [(a, b) for (a, b) in pairs if a not in without]

def extract_tests(pairs):
  return list(set(a for (a, _) in pairs if a is not None))

def extract_options(pairs):
  return list(set(b for (_, b) in pairs if b is not None))

def prepend_type(prefix, test_list):
  return ['%s_%s' % (prefix, value) for value in test_list]

def valgrind_tests(test_list):
  return prepend_type('valgrind', test_list)

def heapcheck_tests(test_list):
  return prepend_type('heapcheck', test_list)

def tsan_tests(test_list):
  return prepend_type('tsan', test_list)


c['builders'] = [
  b_linux_aura, b_linux_futura,
  b_linux_precise_exp
]


# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'TryServerLinux')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder['auto_reboot'] = ActiveMaster.is_production_host
  # Prioritize commit-queue jobs over try jobs.
  builder['nextBuild'] = NextJob


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

last_good_urls = {'chrome': ActiveMaster.last_good_url}
code_review_sites = {'chrome': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

if ActiveMaster.is_production_host:
  c['schedulers'].append(TryJobRietveld(
        name='try_job_rietveld',
        last_good_urls=last_good_urls,
        code_review_sites=code_review_sites,
        pools=pools,
        project='chrome'))

if LISTEN_TO_SVN:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.tryserver.chromium/public_html',
    templates=['../master.tryserver.chromium/templates'])

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      subject="try %(result)s for %(reason)s on %(builder)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails(),
      # disable success emails from triggered builders
      no_email_on_success=['android_dbg','android_fyi_dbg', 'android_rel']))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# The followings are what is kept on disk.
# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs. 3000 is not even a full day but the server is full. Keep
# more build objects than log since they are much smaller.
c['buildHorizon'] = 6000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
c['logCompressionLimit'] = False

# The followings are in-memory cache control.
# Must be at least 2x the number of on-going builds.
c['buildCacheSize'] = 1000


# Hack buildbot so the Stop build button doesn't work anymore. Otherwise it's
# just a pain, user misuse this button all the time.
def hack_stop(function):
  def hook(*args, **kwargs):
    result = function(*args, **kwargs)
    result = result.replace('<input type="submit" value="Stop',
        '<input type="button" onclick="alert(\''
        'For more information, visit '
        'http://dev.chromium.org/developers/try-server-usage'
        '\');"'
        ' value="Stop')
    return result
  return hook

# Only do the hack_stop if we are the production master.  This allows
# us to keep the STOP button live for local/test instances.
#if ActiveMaster.is_production_host:
#  from buildbot.status.web.builder import StatusResourceBuilder
#  StatusResourceBuilder.build_line = hack_stop(StatusResourceBuilder.build_line)
#  from buildbot.status.web import base
#  base.make_stop_form = hack_stop(base.make_stop_form)


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.chromium.linux/'

# vi: set ts=4 sts=2 sw=2 et:
