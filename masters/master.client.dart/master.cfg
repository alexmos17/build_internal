# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Periodic
from buildbot.schedulers import triggerable

from common import chromium_utils
from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import gclient_factory
from master.factory.dart import dart_factory
from master.factory.dart.dart_factory import linux_env, windows_env
from master.factory.dart.dart_factory import linux_clang_env
from master.factory.dart.channels import CHANNELS

import config
import master_site_config
ActiveMaster = master_site_config.Dart
utils = dart_factory.DartUtils(ActiveMaster)

# Hack to increase timeout for steps, dart2js debug checked mode takes more
# than 8 hours.
utils.monkey_patch_remoteshell()

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

slaves = slaves_list.SlavesList('slaves.cfg', 'Dart')

def setup_channel(channel):
  postfix = channel.builder_postfix

  ####### Variant definitions
  # build-base-name, category, platform, builder, tester
  # env are relative to the dart root directory.

  def category(name):
    return '%d%s%s|all' % (channel.position, name, channel.category_postfix)

  variants = [
    {
      'name': 'vm-mac-debug' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'debug',
      'arch': 'ia32,x64',
    },
    {
      'name': 'vm-mac-release' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'ia32,x64',
    },
    {
      'name': 'vm-linux-debug' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'debug',
      'arch': 'ia32,x64',
      'env': linux_clang_env,
    },
    {
      'name': 'vm-linux-release' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'ia32,x64',
      'env': linux_clang_env,
    },
    {
      'name': 'vm-linux-release-optcounter-threshold' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'vm_options': '--optimization-counter-threshold=5',
      'arch': 'ia32,x64',
      'env': linux_clang_env,
    },
    {
      'name': 'vm-mips-sim-debug' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'debug',
      'arch': 'simmips',
      'env': linux_env,
    },
    {
      'name': 'vm-arm-sim-debug' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'debug',
      'arch': 'simarm',
      'env': linux_env,
    },
    {
      'name': 'vm-mips-sim-release' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'simmips',
      'env': linux_env,
    },
    {
      'name': 'vm-arm-sim-release' + postfix,
      'category': category('1vm'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'simarm',
      'env': linux_env,
    },
    {
      'name': 'vm-win32-debug' + postfix,
      'category': category('1vm'),
      'platform': 'windows' + postfix,
      'mode': 'debug',
      'arch': 'ia32',
      'env': windows_env,
    },
    {
      'name': 'vm-win32-release' + postfix,
      'category': category('1vm'),
      'platform': 'windows' + postfix,
      'mode': 'release',
      'arch': 'ia32',
      'env': windows_env,
    },
    {
      'name': 'vm-win32-debug-russian' + postfix,
      'category': category('1vm'),
      'platform': 'windows' + postfix,
      'mode': 'debug',
      'arch': 'ia32',
      'env': windows_env,
    },
    {
      'name': 'cross-arm-vm-linux-release' + postfix,
      'category': category('1vm'),
      'platform': 'posix-standalone' + postfix,
      'mode': 'release',
      'arch': 'arm',
      'triggers' : [{
        'schedulerNames': ['scheduler-arm' + postfix],
        'waitForFinish': False,
        'updateSourceStamp': False,
      }],
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-minified-1-5' + postfix,
      'category': category('20dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-minified-2-5' + postfix,
      'category': category('20dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-minified-3-5' + postfix,
      'category': category('20dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-minified-4-5' + postfix,
      'category': category('20dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-minified-5-5' + postfix,
      'category': category('20dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-1-5' + postfix,
      'category': category('21dart2js-checked'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-2-5' + postfix,
      'category': category('21dart2js-checked'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-3-5' + postfix,
      'category': category('21dart2js-checked'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-4-5' + postfix,
      'category': category('21dart2js-checked'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-5-5' + postfix,
      'category': category('21dart2js-checked'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-jsshell-release-1-4' + postfix,
      'category': category('22dart2js-jsshell'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-jsshell-release-2-4' + postfix,
      'category': category('22dart2js-jsshell'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-jsshell-release-3-4' + postfix,
      'category': category('22dart2js-jsshell'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-jsshell-release-4-4' + postfix,
      'category': category('22dart2js-jsshell'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2dart-release-1-2' + postfix,
      'category': category('31dart2dart'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'ia32',
      'shards': '2',
      'shard': '1',
      'env': linux_env,
    },
    {
      'name': 'dart2dart-release-2-2' + postfix,
      'category': category('31dart2dart'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'ia32',
      'shards': '2',
      'shard': '2',
      'env': linux_env,
    },
    {
      'name': 'new_analyzer-linux-release' + postfix,
      'category': category('30analyzer'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'ia32',
      'env': linux_env,
    },
    {
      'name': 'dart-editor' + postfix,
      'category': category('4dart-editor'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-drt-linux-1-2' + postfix,
      'category': category('8chrome'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-drt-linux-2-2' + postfix,
      'category': category('8chrome'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-drt-linux-csp' + postfix,
      'category': category('8chrome'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-ff-linux-1-4' + postfix,
      'category': category('7firefox'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-ff-linux-2-4' + postfix,
      'category': category('7firefox'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-ff-linux-3-4' + postfix,
      'category': category('7firefox'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-ff-linux-4-4' + postfix,
      'category': category('7firefox'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-ff-win7-1-2' + postfix,
      'category': category('7firefox'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ff-win7-2-2' + postfix,
      'category': category('7firefox'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie9-win7-all-1-6' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie9-win7-all-2-6' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie9-win7-all-3-6' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie9-win7-all-4-6' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie9-win7-all-5-6' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie9-win7-all-6-6' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-ie10-win8-html' + postfix,
      'category': category('91ie'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-safari-mac10.7-1-3' + postfix,
      'category': category('90safari'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart2js-safari-mac10.7-2-3' + postfix,
      'category': category('90safari'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart2js-safari-mac10.7-3-3' + postfix,
      'category': category('90safari'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart2js-safari-mac10.8' + postfix,
      'category': category('90safari'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart2js-chrome-mac10.7' + postfix,
      'category': category('8chrome'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart2js-chrome-win7' + postfix,
      'category': category('8chrome'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'pub-mac' + postfix,
      'category': category('94pub'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'pub-linux' + postfix,
      'category': category('94pub'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'pub-win' + postfix,
      'category': category('94pub'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'pub-win-russian' + postfix,
      'category': category('94pub'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
  ]

  variants_editor_linux = [
    {
      'name': 'dart-editor-linux' + postfix,
      'category': category('4dart-editor'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
  ]
  variants_editor_mac = [
    {
      'name': 'dart-editor-mac' + postfix,
      'category': category('4dart-editor'),
      'platform': 'posix' + postfix,
    },
  ]
  variants_editor_win = [
    {
      'name': 'dart-editor-win' + postfix,
      'category': category('4dart-editor'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
  ]

  variants_arm = [
    {
      'name': 'target-arm-vm-linux-release' + postfix,
      'category': category('1vm-arm'),
      'platform': 'posix-standalone-noRunhooks' + postfix,
      'mode': 'release',
      'arch': 'arm',
      'env': linux_env,
    },
  ]

  variants_dartium = [
    {
      'name' : 'dartium-mac-inc' + postfix,
      'category' : category('6dartium'),
    },
    {
      'name' : 'dartium-mac-debug' + postfix,
      'category' : category('6dartium'),
    },
    {
      'name' : 'dartium-lucid64-inc' + postfix,
      'category' : category('6dartium'),
    },
    {
      'name' : 'dartium-lucid64-debug' + postfix,
      'category' : category('6dartium'),
    },
    {
      'name' : 'dartium-win-inc' + postfix,
      'category' : category('6dartium'),
    },
    {
      'name' : 'dartium-win-debug' + postfix,
      'category' : category('6dartium'),
    },
  ]

  variants_dartium_full_mac = [
    {
      'name' : 'dartium-mac-full' + postfix,
      'category' : category('6dartium'),
    },
  ]

  variants_dartium_full_linux = [
    {
      'name' : 'dartium-lucid64-full' + postfix,
      'category' : category('6dartium'),
    },
    {
      'name' : 'dartium-lucid32-full' + postfix,
      'category' : category('6dartium'),
    },
  ]

  variants_dartium_full_win = [
    {
      'name' : 'dartium-win-full' + postfix,
      'category' : category('6dartium'),
    },
  ]

  # trunk
  trunk_dependent_variants = [
    {
      'name': 'dart-editor-trunk',
      'category': category('trunk'),
      'platform': 'posix-trunk',
      'env': linux_env,
    },
    {
      'name': 'dart-editor-win-trunk',
      'category': category('trunk'),
      'platform': 'windows-trunk',
      'env': windows_env,
    },
    {
      'name': 'dart-editor-mac-trunk',
      'category': category('trunk'),
      'platform': 'posix-trunk',
    },
    {
      'name': 'dart-editor-linux-trunk',
      'category': category('trunk'),
      'platform': 'posix-trunk',
      'env': linux_env,
    },
  ]

  variants_dartium_trunk = [
    {
      'name' : 'dartium-lucid64-full-trunk',
      'category' : category('trunk'),
    },
    {
      'name' : 'dartium-win-full-trunk',
      'category' : category('trunk'),
    },
    {
      'name' : 'dartium-mac-full-trunk',
      'category' : category('trunk'),
    },
    {
      'name' : 'dartium-lucid32-full-trunk',
      'category' : category('trunk'),
    },
  ]

  ####### Factory setup

  utils.setup_factories(variants)
  utils.setup_factories(variants_editor_linux)
  utils.setup_factories(variants_editor_mac)
  utils.setup_factories(variants_editor_win)
  utils.setup_factories(variants_arm)
  utils.setup_dartium_factories(variants_dartium)
  utils.setup_dartium_factories(variants_dartium_full_mac)
  utils.setup_dartium_factories(variants_dartium_full_linux)
  utils.setup_dartium_factories(variants_dartium_full_win)

  # trunk
  utils.setup_factories(trunk_dependent_variants)
  utils.setup_dartium_factories(variants_dartium_trunk)

  ####### Schedulers

  # builder names
  builder_names = utils.get_builder_names(variants)
  builder_names_linux_editor = utils.get_builder_names(variants_editor_linux)
  builder_names_mac_editor = utils.get_builder_names(variants_editor_mac)
  builder_names_win_editor = utils.get_builder_names(variants_editor_win)
  builder_names_arm = utils.get_builder_names(variants_arm)
  dartium_builder_names = utils.get_builder_names(variants_dartium)
  dartium_full_linux_builder_names = (
      utils.get_builder_names(variants_dartium_full_linux))
  dartium_full_mac_builder_names = (
      utils.get_builder_names(variants_dartium_full_mac))
  dartium_full_win_builder_names = (
      utils.get_builder_names(variants_dartium_full_win))

  # trunk builder names
  trunk_dependent_builder_names = utils.get_builder_names(
      trunk_dependent_variants)
  trunk_dartium_builder_names = utils.get_builder_names(variants_dartium_trunk)

  c['schedulers'].append(triggerable.Triggerable(
      name='scheduler-arm' + postfix,
      builderNames=builder_names_arm,
  ))

  if channel.name == 'be':
    # normal builders + editor builders + dartium builders
    c['schedulers'].append(Scheduler(
        name='main' + postfix,
        branch=channel.branch,
        treeStableTimer=0,
        builderNames=builder_names + 
                     builder_names_linux_editor + 
                     builder_names_mac_editor +
                     builder_names_win_editor +
                     dartium_builder_names +
                     dartium_full_linux_builder_names +
                     dartium_full_mac_builder_names +
                     dartium_full_win_builder_names
    ))
    s_trunk = Scheduler(
        name='trunk',
        branch="trunk",
        treeStableTimer=0,
        builderNames=trunk_dartium_builder_names
    )
    c['schedulers'].append(s_trunk)
    c['schedulers'].append(Dependent(
        name='trunk_dependent',
        builderNames = trunk_dependent_builder_names,
        upstream = s_trunk
    ))
  else:
    c['schedulers'].append(Scheduler(
        name='main' + postfix,
        branch=channel.branch,
        treeStableTimer=0,
        builderNames=builder_names + dartium_builder_names))

    s_dartium_linux = Scheduler(
        name='dartium-linux' + postfix,
        branch=channel.branch,
        treeStableTimer=0,
        builderNames=dartium_full_linux_builder_names)
    s_dartium_mac = Scheduler(
        name='dartium-mac' + postfix,
        branch=channel.branch,
        treeStableTimer=0,
        builderNames=dartium_full_mac_builder_names)
    s_dartium_win = Scheduler(
        name='dartium-win' + postfix,
        branch=channel.branch,
        treeStableTimer=0,
        builderNames=dartium_full_win_builder_names)
    c['schedulers'].append(s_dartium_linux)
    c['schedulers'].append(s_dartium_mac)
    c['schedulers'].append(s_dartium_win)

    c['schedulers'].append(Dependent(
        name='dartium-dependend-linux' + postfix,
        builderNames = builder_names_linux_editor,
        upstream = s_dartium_linux
    ))
    c['schedulers'].append(Dependent(
        name='dartium-dependend-mac' + postfix,
        builderNames = builder_names_mac_editor,
        upstream = s_dartium_mac
    ))
    c['schedulers'].append(Dependent(
        name='dartium-dependend-win' + postfix,
        builderNames = builder_names_win_editor,
        upstream = s_dartium_win
    ))

  ####### Builders

  # Add non-dartium builders
  for collection in [variants, variants_editor_linux, variants_editor_mac,
                     variants_editor_win, variants_arm]:
    for b in utils.get_builders_from_variants(collection, slaves, []):
      c['builders'].append(b)

  # Add dartium builders
  for collection in [variants_dartium, variants_dartium_full_linux,
                     variants_dartium_full_mac, variants_dartium_full_win]:
    # Reboot VMs after every build
    for b in utils.get_builders_from_variants(collection, slaves, [],
                                              ActiveMaster.is_production_host):
      c['builders'].append(b)

  # trunk
  if channel.name == 'be':
    # Add non-dartium builders
    for collection in [trunk_dependent_variants]:
      for b in utils.get_builders_from_variants(collection, slaves, []):
        c['builders'].append(b)

    # Add dartium builders
    for collection in [variants_dartium_trunk]:
      # Reboot VMs after every build
      for b in utils.get_builders_from_variants(
          collection, slaves, [], ActiveMaster.is_production_host):
        c['builders'].append(b)

c['builders'] = []
c['schedulers'] = []
for channel in CHANNELS:
  setup_channel(channel)

####### CHANGESOURCES

c['change_source'] = [utils.get_svn_poller()]

####### BUILDSLAVES

c['slaves'] = utils.get_slaves(c['builders'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

# Prioritize the builders depending on channel.
c['prioritizeBuilders'] = utils.prioritize_builders

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  for status in utils.get_web_statuses():
    c['status'].append(status)

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  mail_notifiers = [
    {
      'extraRecipients': ['ricow@google.com'],
      'builders': None,  # None means all builders
      'sendToInterestedUsers': True,
    },
    {
      'extraRecipients': ['danrubel@google.com'],
      'builders': ['dart-editor',
                   'dart-editor-win',
                   'dart-editor-linux',
                   'dart-editor-mac'],
    },
  ]

  for notifier in utils.get_mail_notifier_statuses(mail_notifiers):
    c['status'].append(notifier)

if GOOD_REVISIONS:
  from master import goodrevisions
  # This is the list of builders with their respective list of critical steps
  # that all need to succeed to mark a revision as successful. A single failure
  # in any of the steps of any of the builders will mark the revision as failed.
  factory_map = []
  for b in c['builders']:
    # TODO(ricow): remove this once we have a separate waterfall for trunk.
    # Don't include full dartium builders.
    if '-trunk' not in b['name'] and '-full' not in b['name']:
      factory_map.append((b['name'], b['factory']))
  any_steps = build_utils.ExtractFactoriesSteps(factory_map)
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=any_steps,
      store_revisions_url=ActiveMaster.store_revisions_url))


# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200

# Template generation is using 40 entries, so give it a little extra.
c['buildCacheSize'] = 42

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.dart/'
