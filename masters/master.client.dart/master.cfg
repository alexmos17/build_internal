# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot import locks
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Periodic

from common import chromium_utils
from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import gclient_factory
from master.factory.dart import dart_factory
from master.factory.dart.dart_factory import linux_env, windows_env
from master.factory.dart.dart_factory import linux_clang_env

import config
import master_site_config
ActiveMaster = master_site_config.Dart
utils = dart_factory.DartUtils(ActiveMaster)

# Hack to increase timeout for steps, dart2js debug checked mode takes more
# than 8 hours.
utils.monkey_patch_remoteshell()

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)

# Slave allocation
# build-base-name, category, platform, builder, tester
# env are relative to the dart root directory.
variants = [
  {
    'name': 'vm-mac-debug',
    'category': '1vm|all',
    'platform': 'posix',
    'mode': 'debug',
    'arch': 'ia32,x64',
  },
  {
    'name': 'vm-mac-release',
    'category': '1vm|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'ia32,x64',
  },
  {
    'name': 'vm-linux-debug',
    'category': '1vm|all',
    'platform': 'linux-clang',
    'mode': 'debug',
    'arch': 'ia32,x64',
    'env': linux_clang_env,
  },
  {
    'name': 'vm-linux-release',
    'category': '1vm|all',
    'platform': 'linux-clang',
    'mode': 'release',
    'arch': 'ia32,x64',
    'env': linux_clang_env,
  },
  {
    'name': 'vm-mips-arm-sim-debug',
    'category': '1vm|all',
    'platform': 'posix',
    'mode': 'debug',
    'arch': 'simarm,simmips',
    'env': linux_env,
  },
  {
    'name': 'vm-mips-arm-sim-release',
    'category': '1vm|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'simarm,simmips',
    'env': linux_env,
  },
  {
    'name': 'vm-win32-debug',
    'category': '1vm|all',
    'platform': 'windows',
    'mode': 'debug',
    'arch': 'ia32',
    'env': windows_env,
  },
  {
    'name': 'vm-win32-release',
    'category': '1vm|all',
    'platform': 'windows',
    'mode': 'release',
    'arch': 'ia32',
    'env': windows_env,
  },
  {
    'name': 'vm-win32-debug-russian',
    'category': '1vm|all',
    'platform': 'windows',
    'mode': 'debug',
    'arch': 'ia32',
    'env': windows_env,
  },
  {
    'name': 'dart2js-linux-release-minified-1-5',
    'category': '20dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-minified-2-5',
    'category': '20dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-minified-3-5',
    'category': '20dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-minified-4-5',
    'category': '20dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-minified-5-5',
    'category': '20dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-checked-1-5',
    'category': '21dart2js-checked|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-checked-2-5',
    'category': '21dart2js-checked|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-checked-3-5',
    'category': '21dart2js-checked|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-checked-4-5',
    'category': '21dart2js-checked|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-checked-5-5',
    'category': '21dart2js-checked|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-jsshell-release-1-4',
    'category': '22dart2js-jsshell|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-jsshell-release-2-4',
    'category': '22dart2js-jsshell|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-jsshell-release-3-4',
    'category': '22dart2js-jsshell|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-jsshell-release-4-4',
    'category': '22dart2js-jsshell|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2dart-release-1-2',
    'category': '31dart2dart|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'ia32',
    'shards': '2',
    'shard': '1',
    'env': linux_env,
  },
  {
    'name': 'dart2dart-release-2-2',
    'category': '31dart2dart|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'ia32',
    'shards': '2',
    'shard': '2',
    'env': linux_env,
  },
  {
    'name': 'new_analyzer-linux-release',
    'category': '30analyzer|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'ia32',
    'env': linux_env,
  },
  {
    'name': 'dart-editor',
    'category': '4dart-editor|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart-editor-win',
    'category': '4dart-editor|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart-editor-mac',
    'category': '4dart-editor|all',
    'platform': 'posix',
  },
  {
    'name': 'dart-editor-linux',
    'category': '4dart-editor|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-drt-linux-1-2',
    'category': '8chrome|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-drt-linux-2-2',
    'category': '8chrome|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-drt-linux-csp',
    'category': '8chrome|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-ff-linux-1-4',
    'category': '7firefox|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-ff-linux-2-4',
    'category': '7firefox|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-ff-linux-3-4',
    'category': '7firefox|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-ff-linux-4-4',
    'category': '7firefox|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-ff-win7-1-2',
    'category': '7firefox|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ff-win7-2-2',
    'category': '7firefox|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ie9-win7-all-1-6',
    'category': '91ie|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ie9-win7-all-2-6',
    'category': '91ie|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ie9-win7-all-3-6',
    'category': '91ie|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ie9-win7-all-4-6',
    'category': '91ie|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ie9-win7-all-5-6',
    'category': '91ie|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-ie9-win7-all-6-6',
    'category': '91ie|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-safari-mac10.7-1-3',
    'category': '90safari|all',
    'platform': 'posix',
  },
  {
    'name': 'dart2js-safari-mac10.7-2-3',
    'category': '90safari|all',
    'platform': 'posix',
  },
  {
    'name': 'dart2js-safari-mac10.7-3-3',
    'category': '90safari|all',
    'platform': 'posix',
  },
  {
    'name': 'dart2js-chrome-mac10.7',
    'category': '8chrome|all',
    'platform': 'posix',
  },
  {
    'name': 'dart2js-chrome-win7',
    'category': '8chrome|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'pub-mac',
    'category': '94pub|all',
    'platform': 'posix',
  },
  {
    'name': 'pub-linux',
    'category': '94pub|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'pub-win',
    'category': '94pub|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'pub-win-russian',
    'category': '94pub|all',
    'platform': 'windows',
    'env': windows_env,
  },
]

trunk_variants = [
  {
    'name': 'vm-linux-trunk',
    'category': 'trunk|all',
    'platform': 'posix-trunk',
    'mode': 'release,debug',
    'arch': 'ia32,x64',
    'env': linux_env,
  },
  {
    'name': 'vm-mac-trunk',
    'category': 'trunk|all',
    'platform': 'posix-trunk',
    'mode': 'release,debug',
    'arch': 'ia32,x64',
  },
  {
    'name': 'vm-win32-trunk',
    'category': 'trunk|all',
    'platform': 'windows-trunk',
    'mode': 'release,debug',
    'arch': 'ia32',
    'env': windows_env,
  },
]

trunk_dependent_variants = [
  {
    'name': 'dart-editor-trunk',
    'category': 'trunk|all',
    'platform': 'posix-trunk',
    'env': linux_env,
  },
  {
    'name': 'dart-editor-win-trunk',
    'category': 'trunk|all',
    'platform': 'windows-trunk',
    'env': windows_env,
  },
  {
    'name': 'dart-editor-mac-trunk',
    'category': 'trunk|all',
    'platform': 'posix-trunk',
  },
  {
    'name': 'dart-editor-linux-trunk',
    'category': 'trunk|all',
    'platform': 'posix-trunk',
    'env': linux_env,
  },
]

milestone_variants = [
  {
    'name': 'vm-linux-milestone',
    'category': 'milestone|all',
    'platform': 'posix-milestone',
    'mode': 'release,debug',
    'arch': 'all',
    'env': linux_env,
  },
  {
    'name': 'vm-mac-milestone',
    'category': 'milestone|all',
    'platform': 'posix-milestone',
    'mode': 'release,debug',
    'arch': 'all',
  },
  {
    'name': 'vm-win32-milestone',
    'category': 'milestone|all',
    'platform': 'windows-milestone',
    'mode': 'release,debug',
    'arch': 'ia32',
    'env': windows_env,
  },
]

milestone_dependent_variants = [
  {
    'name': 'dart-editor-milestone',
    'category': 'milestone|all',
    'platform': 'posix-milestone',
    'env': linux_env,
  },
  {
    'name': 'dart-editor-win-milestone',
    'category': 'milestone|all',
    'platform': 'windows-milestone',
    'env': windows_env,
  },
  {
    'name': 'dart-editor-mac-milestone',
    'category': 'milestone|all',
    'platform': 'posix-milestone',
  },
  {
    'name': 'dart-editor-linux-milestone',
    'category': 'milestone|all',
    'platform': 'posix-milestone',
    'env': linux_env,
  },
]



slaves = slaves_list.SlavesList('slaves.cfg', 'Dart')


####### CHANGESOURCES

c['change_source'] = [utils.get_svn_poller()]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

# ----------------------------------------------------------------------------
# FACTORIES

utils.setup_factories(variants)
utils.setup_factories(trunk_variants)
utils.setup_factories(trunk_dependent_variants)
utils.setup_factories(milestone_variants)
utils.setup_factories(milestone_dependent_variants)

variants_dartium = [
  {
    'name' : 'dartium-mac-full',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-mac-inc',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-mac-debug',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-lucid64-full',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-lucid64-inc',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-lucid64-debug',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-win-full',
    'category' :'6dartium|closer',
  },
  {
    'name' : 'dartium-win-inc',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-win-debug',
    'category' : '6dartium|closer',
  },
  {
    'name' : 'dartium-lucid32-full',
    'category' : '6dartium|closer',
  },
]

variants_dartium_trunk = [
  {
    'name' : 'dartium-lucid64-full-trunk',
    'category' : 'trunk',
  },
  {
    'name' : 'dartium-win-full-trunk',
    'category' : 'trunk',
  },
  {
    'name' : 'dartium-mac-full-trunk',
    'category' : 'trunk',
  },
  {
    'name' : 'dartium-lucid32-full-trunk',
    'category' : 'trunk',
  },
]

variants_dartium_milestone = [
  {
    'name' : 'dartium-lucid64-full-milestone',
    'category' : 'milestone',
  },
  {
    'name' : 'dartium-win-full-milestone',
    'category' : 'milestone',
  },
  {
    'name' : 'dartium-mac-full-milestone',
    'category' : 'milestone',
  },
  {
    'name' : 'dartium-lucid32-full-milestone',
    'category' : 'milestone',
  },
]


utils.setup_dartium_factories(variants_dartium)
utils.setup_dartium_factories(variants_dartium_trunk)
utils.setup_dartium_factories(variants_dartium_milestone)

####### SCHEDULERS

## configure the Schedulers

builder_names = utils.get_builder_names(variants)
trunk_builder_names = utils.get_builder_names(trunk_variants)
trunk_dependent_builder_names = utils.get_builder_names(
    trunk_dependent_variants)

milestone_builder_names = utils.get_builder_names(milestone_variants)
milestone_dependent_builder_names = utils.get_builder_names(
    milestone_dependent_variants)

dartium_builder_names = utils.get_builder_names(variants_dartium)
trunk_dartium_builder_names = utils.get_builder_names(variants_dartium_trunk)
milestone_dartium_builder_names = utils.get_builder_names(
    variants_dartium_milestone)


s = Scheduler(
  name='main',
  branch="branches/bleeding_edge",
  treeStableTimer=0,
  builderNames=builder_names + dartium_builder_names
)

s_trunk = Scheduler(
  name='trunk',
  branch="trunk",
  treeStableTimer=0,
  builderNames=trunk_builder_names + trunk_dartium_builder_names
)

s_trunk_dependent = Dependent(
    name='trunk_dependent',
    builderNames = trunk_dependent_builder_names,
    upstream = s_trunk
)

s_milestone = Scheduler(
  name='milestone',
  branch="branches/" + dart_factory.current_milestone,
  treeStableTimer=0,
  builderNames=milestone_builder_names + milestone_dartium_builder_names
)

s_milestone_dependent = Dependent(
    name='milestone_dependent',
    builderNames = milestone_dependent_builder_names,
    upstream = s_milestone
)

c['schedulers'] = [s, s_trunk, s_trunk_dependent,
                   s_milestone, s_milestone_dependent]


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
for b in utils.get_builders_from_variants(variants, slaves, [slave_lock]):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(trunk_variants, slaves, [slave_lock]):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(trunk_dependent_variants,
                                          slaves,
                                          [slave_lock]):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(milestone_variants,
                                          slaves,
                                          [slave_lock]):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(milestone_dependent_variants,
                                          slaves,
                                          [slave_lock]):
  c['builders'].append(b)


for b in utils.get_builders_from_variants(variants_dartium,
                                          slaves,
                                          [],
                                          ActiveMaster.is_production_host):
  c['builders'].append(b)

# Append dartium trunk builder
for b in utils.get_builders_from_variants(variants_dartium_trunk,
                                          slaves,
                                          [],
                                          ActiveMaster.is_production_host):
  c['builders'].append(b)

# Append dartium milestone builder
for b in utils.get_builders_from_variants(variants_dartium_milestone,
                                          slaves,
                                          [],
                                          ActiveMaster.is_production_host):
  c['builders'].append(b)

####### BUILDSLAVES

c['slaves'] = utils.get_slaves(c['builders'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  for status in utils.get_web_statuses():
    c['status'].append(status)

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  mail_notifiers = [
    {
      'extraRecipients': ['ricow@google.com'],
      'builders': None,  # None means all builders
      'sendToInterestedUsers': True,
    },
    {
      'extraRecipients': ['danrubel@google.com'],
      'builders': ['dart-editor',
                   'dart-editor-win',
                   'dart-editor-linux',
                   'dart-editor-mac'],
    },
  ]

  for notifier in utils.get_mail_notifier_statuses(mail_notifiers):
    c['status'].append(notifier)


if GOOD_REVISIONS:
  from master import goodrevisions
  # This is the list of builders with their respective list of critical steps
  # that all need to succeed to mark a revision as successful. A single failure
  # in any of the steps of any of the builders will mark the revision as failed.
  factory_map = []
  for b in c['builders']:
    # TODO(ricow): remove this once we have a separate waterfall for trunk.
    # Don't include full dartium builders.
    if '-trunk' not in b['name'] and '-full' not in b['name']:
      factory_map.append((b['name'], b['factory']))
  any_steps = build_utils.ExtractFactoriesSteps(factory_map)
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=any_steps,
      store_revisions_url=ActiveMaster.store_revisions_url))


# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.dart/'
