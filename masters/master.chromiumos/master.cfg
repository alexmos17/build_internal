# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromeos' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes.filter import ChangeFilter
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.pb import PBChangeSource
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.scheduler import Periodic

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
from master.cros_filter import FilterNewSpec
from master.factory import chromeos_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config
import master_site_config

ActiveMaster = master_site_config.ChromiumOS

TREE_GATE_KEEPER = ActiveMaster.is_production_host

# Never enable auto_reboot for folks testing locally.
DISABLE_AUTO_REBOOT = not ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# This is a dictionary that maps waterfall dashboard names to cbuildbot_configs.
# In order to add a new dict, you must edit this first.
_NAME_CONFIG_DICT = {
  'x86-generic incremental': 'x86-generic-incremental',
  'amd64-generic incremental': 'amd64-generic-incremental',
  'daisy incremental': 'daisy-incremental',
  'x86-generic paladin': 'x86-generic-paladin',
  'amd64-generic paladin': 'amd64-generic-paladin',
  'x86-generic full': 'x86-generic-full',
  'amd64-generic full': 'amd64-generic-full',
  'daisy full': 'daisy-full',
  'arm-generic full': 'arm-generic-full',
  'chromiumos sdk': 'chromiumos-sdk',
  'refresh packages': 'refresh-packages',
  'x86-generic ASAN': 'x86-generic-asan',
  'amd64-generic ASAN': 'amd64-generic-asan',
  'toolchain major': 'toolchain-major',
  'toolchain minor': 'toolchain-minor',
}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)


####### CHANGESOURCES

MANIFEST_VERSIONS_REPO = (
    'https://chromium.googlesource.com/chromiumos/manifest-versions')
c['change_source'] = [PBChangeSource()]
c['change_source'].append(GitPoller(
    repourl=MANIFEST_VERSIONS_REPO,
    branch='master',
    workdir='/tmp/chromiumos-manifest-versions',
    pollinterval=10))


####### SCHEDULERS

## configure the Schedulers
# XXX: Changes to builderNames must also be made in:# - slaves.cfg
# - templates/announce.html
# - And down below in the builder definitions as well
# - and you probably need to restart any changed slaves as well as the master

s_paladin = SingleBranchScheduler(
  name='paladin',
  change_filter=FilterNewSpec(MANIFEST_VERSIONS_REPO, 'x86-mario-paladin'),
  builderNames=[
    'x86-generic paladin',
    'amd64-generic paladin',
  ])

s_refresh_packages = Periodic(
  name='refresh_pkgs_scheduler',
  periodicBuildTimer=24 * 60 * 60, # 1 day
  builderNames=[
    'refresh packages',
  ])

# Default scheduler triggers when we see changes.
repository_fn = lambda x: x != MANIFEST_VERSIONS_REPO
s_chromeos_default = AnyBranchScheduler(
  name='chromeos',
  change_filter=ChangeFilter(repository_fn=repository_fn, branch='master'),
  builderNames=[
     'x86-generic incremental',
     'amd64-generic incremental',
     'daisy incremental',
     'x86-generic full',
     'amd64-generic full',
     'daisy full',
     'arm-generic full',
     'chromiumos sdk',
     'x86-generic ASAN',
     'amd64-generic ASAN',
  ])

c['schedulers'] = [
    s_paladin, s_chromeos_default, s_refresh_packages,
]

BUILDERS = []

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

# Cros helper functions to build builders and factories.

def GetCBuildbotFactory(config, sleep_sync):
  """Returns cros buildbot factories."""
  return chromeos_factory.CbuildbotFactory(
      params=config, dry_run=not ActiveMaster.is_production_host,
      sleep_sync=sleep_sync,
      show_gclient_output=False).get_factory()

def AddBuilderDefinition(display_name, closer=True, auto_reboot=False,
                         sleep_sync=None):
  """Adds a builder definition given by the args.

  Args:
    display_name: Name displayed on buildbot waterfall.
    closer:  Do we close the tree based on this build's failure.
    auto_reboot: Whether to reboot the bot after each run.
  """
  def GetConfig():
    return _NAME_CONFIG_DICT.get(display_name, display_name)

  category = '1release full|info'
  if closer: category = '1release full|closer'
  build_dir = display_name.replace(' ', '-')
  factory = GetCBuildbotFactory(GetConfig(), sleep_sync)

  if DISABLE_AUTO_REBOOT:
    auto_reboot = False

  BUILDERS.append({
    'name': display_name,
    'builddir': build_dir,
    'factory': factory,
    'category': category,
    'auto_reboot': auto_reboot,
  })

# Paladin Builders -- exception to closer rule below as they are very important
# to watch.
AddBuilderDefinition('x86-generic paladin', closer=False)
AddBuilderDefinition('amd64-generic paladin', closer=False)


AddBuilderDefinition('x86-generic incremental')
AddBuilderDefinition('amd64-generic incremental')
AddBuilderDefinition('daisy incremental')

# Full Builders
AddBuilderDefinition('x86-generic full')
AddBuilderDefinition('amd64-generic full')
AddBuilderDefinition('daisy full')
AddBuilderDefinition('arm-generic full')

AddBuilderDefinition('chromiumos sdk')

####### Non Closer build defs.

# Miscellaneous builders.
AddBuilderDefinition('refresh packages', closer=False, sleep_sync=60)
AddBuilderDefinition('x86-generic ASAN', closer=False)
AddBuilderDefinition('amd64-generic ASAN', closer=False)
AddBuilderDefinition('toolchain major', closer=False)
AddBuilderDefinition('toolchain minor', closer=False)


c['builders'] = BUILDERS


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.

# First, load the list from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumOS')

# Associate the slaves to the builders.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    templates=['./templates', '../master.chromium/templates'],
    order_console_by_time=True)

# Add more.

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  # Note: don't include 'update scripts' since we can't do much about it when
  # it's failing and the tree is still technically fine.
  categories_steps = {
      'closer': [
          'Clear and Clone chromite',
          'Clear and Clone crostools',
          'cbuildbot',
          'cbuildbot_chrome_latest_release',
          'cbuildbot_master',
          'master',
          'gitrevisiondropper',
      ],
      'info': [
      ],
      '': [
      ],
  }
  exclusions = {}
  # TODO: convert GateKeeper to 'use_getname=True'
  # 1) set names for all steps in categories_steps
  # 2) update categories_steps to use names insteads of description
  # 3) change forgiving_steps to:
  #     forgiving_steps = ['update_scripts', 'update', 'archive_build']
  # 4) add 'use_getname=True' to the GateKeeper call
  forgiving_steps = ['update scripts', 'update', 'archived build']
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      lookup=master_utils.FilterDomain(),
      forgiving_steps=forgiving_steps,
      tree_status_url=ActiveMaster.tree_status_url,
      check_revisions=False))


####### TROOPER NAGGING
if ActiveMaster.is_production_host:
  from master import chromium_notifier
  categories_steps = {
      'closer': [
          'CleanUp', 'LKGMCandidateSync', 'Sync', 'Uprev', 'UploadPrebuilts',
          'Archive', 'PublishUprevChanges'
      ]
  }

  c['status'].append(chromium_notifier.ChromiumNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      relayhost=config.Master.smtp,
      status_header='%(steps)s failed on "%(builder)s"',
      subject='buildbot trooper alert on %(builder)s (%(projectName)s)',
      extraRecipients=['chrome-troopers@google.com'],
      sheriffs=['sheriff'],
      lookup=master_utils.FilterDomain(),
      use_getname=True))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/chromiumos/'

if not ActiveMaster.is_production_host:
  master_utils.DumpSetup(c) 
