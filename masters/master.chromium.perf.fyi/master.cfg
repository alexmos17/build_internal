# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# These modules come from scripts/master, which must be in the PYTHONPATH.
from buildbot import locks
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.triggerable import Triggerable

from master import master_utils
from master import slaves_list
from master.factory import annotator_factory

import config
import master_site_config

ActiveMaster = master_site_config.ChromiumPerfFyi
WEB_STATUS = True
MASTER_PORT = ActiveMaster.master_port

c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []
c['slavePortnum'] = ActiveMaster.slave_port

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

import master_source_cfg

master_source_cfg.Update(config, ActiveMaster, c)

c['logCompressionLimit'] = False
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url


def builder_factory(recipe, timeout=1200, triggers=None):
  return annotator_factory.AnnotatorFactory().BaseFactory(
      recipe=recipe,
      timeout=timeout,
      triggers=triggers)

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
factories = []

# A map defining the order in which the various sections show up.
sections_order = {
  'builders': '1builders',
  'perf': '2perf',
}

factories.append({
    'name': 'android_oilpan_builder',
    'category': sections_order['builders'],
    'factory': builder_factory(recipe='android/android_builder',
                               triggers=['android_oilpan_build_trigger'])})

factories.append({
    'name': 'android_nexus5_oilpan_perf',
    'category': sections_order['perf'],
    'factory': builder_factory('android/perf'),
    'triggered': True})

## configure the Schedulers
# Main scheduler for all changes in trunk.
s_global = AnyBranchScheduler(
   name='global_scheduler',
   treeStableTimer=60,
   builderNames=[f['name']
                  for f in factories
                  if not f.get('triggered')])

# Triggered when a build completes
s_android_oilpan_build_trigger = Triggerable(
    name='android_oilpan_build_trigger',
    builderNames=['android_nexus5_oilpan_perf'])

# Full list of all schedulers.
c['schedulers'] = [s_global, s_android_oilpan_build_trigger]

# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('one_per_slave_lock', maxCount=1)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumPerfFyi')
for f in factories:
  c['builders'].append({
      'name': f['name'],
      'slavenames': slaves.GetSlavesName(builder=f['name']),
      'builddir': f['name'],
      'factory': f['factory'],
      'category': '%s|full' % f['category'],
      'locks': [slave_lock],
      'auto_reboot': False,
  })

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(
    c['builders'], config.Master.GetBotPassword())

master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)


#master_utils.VerifySetup(c, slaves)
# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 1x the number of builds listed in console.
c['buildCacheSize'] = 60

c['properties'] = {'mastername': master_utils.GetMastername()}

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = 'debugpassword'

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole('tcp:9999:interface=127.0.0.1',
#                                       'admin', 'password')


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = ActiveMaster.buildbot_url
