# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'Polymer' bot.


import config
import master_site_config
from polymer_repos import REPOS, REPO_DEPS

from buildbot.changes.gitpoller import GitPoller
from buildbot.scheduler import Scheduler
from buildbot.schedulers.filter import ChangeFilter
from buildbot.status import mail
from master import master_utils
from master import slaves_list
from master.factory import annotator_factory


ActiveMaster = master_site_config.Polymer

WEB_STATUS = True
MAIL_NOTIFIER = True
TREE_GATE_KEEPER = False

MASTER_PORT = ActiveMaster.master_port

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### CHANGESOURCES

c['change_source'] = []

for repo in REPOS:
  c['change_source'].append(
      GitPoller(repourl='https://github.com/Polymer/' + repo,
                branch='master',
                workdir='gitpoller/' + repo,
                category=repo,
                pollinterval=5*60)
  )


####### SCHEDULERS

c['schedulers'] = []

for repo in REPOS:
  repo_filter = ChangeFilter(category=repo)
  c['schedulers'].append(
    Scheduler(name=repo,
              treeStableTimer=60,
              change_filter=repo_filter,
              builderNames=[repo + ' Win',
                            repo + ' Mac',
                            repo + ' Linux']))

for repo, deps in REPO_DEPS.iteritems():
  for dep in deps:
    repo_filter = ChangeFilter(category=dep)
    c['schedulers'].append(
      Scheduler(name='%s-%s' % (repo, dep),
                treeStableTimer=60,
                change_filter=repo_filter,
                builderNames=[repo + ' Win',
                              repo + ' Mac',
                              repo + ' Linux']))

####### FACTORIES

factory = annotator_factory.AnnotatorFactory().BaseFactory(recipe='polymer')


####### BUILDER DEFINITIONS

c['builders'] = []

for repo in REPOS:
  b_win = {
    'name': repo + ' Win',
    'slavebuilddir': 'win-tester',
    'factory': factory,
    'auto_reboot': False,
  }

  b_mac = {
    'name': repo + ' Mac',
    'slavebuilddir': 'mac-tester',
    'factory': factory,
    'auto_reboot': False,
  }

  b_linux = {
    'name': repo + ' Linux',
    'slavebuilddir': 'linux-tester',
    'factory': factory,
    'auto_reboot': False,
  }

  c['builders'] += [b_win, b_mac, b_linux]


# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'Polymer')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools (web status, mail notifier) to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, mail_notifier=MAIL_NOTIFIER,
                             order_console_by_time=True)

c['status'].append(mail.MailNotifier(
    fromaddr=ActiveMaster.from_address,
    mode='problem',
    sendToInterestedUsers=False,
    extraRecipients=['ui-toolkit-team@google.com']))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = ActiveMaster.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.polymer/'
