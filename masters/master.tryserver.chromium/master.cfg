# -*- python -*-
# ex: set syntax=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

import socket

from buildbot.scheduler import Triggerable

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_config
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import annotator_factory
from master.factory import chromeos_factory
from master.factory import chromium_factory
from master.factory import swarm_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_job_svn import TryJobSubversion

import config

ActiveMaster = config.Master.TryServer


MAIL_NOTIFIER = ActiveMaster.is_production_host
UPDATE_CODEREVIEW = ActiveMaster.is_production_host
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False


####### BUILDERS

## FACTORIES

m_chromium_win = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='win32')

m_chromium_win_ninja = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='win32')

m_chromium_linux = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='linux2')

m_chromium_mac = chromium_factory.ChromiumFactory(
    'src/xcodebuild',
    target_platform='darwin')

m_chromium_mac_ninja = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='darwin')

# Chromium for ChromiumOS
m_chromium_chromiumos = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='linux2')

m_chromium_android = chromium_factory.ChromiumFactory(
    '',
    target_platform='linux2',
    nohooks_on_update=True,
    target_os='android')

m_chromium_ios = chromium_factory.ChromiumFactory(
    'src/xcodebuild',
    target_platform='darwin',
)

m_annotator = annotator_factory.AnnotatorFactory()

# GS archive vars
android_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_try_dbg')
android_rel_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_try_rel')
android_fyi_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_try_fyi_dbg')

def NextJob(builder, requests):
  """Always prioritize commit queue jobs over try jobs."""
  commit_bot = 'commit-bot@chromium.org'
  for req in requests:
    if (any(c.who == commit_bot for c in req.source.changes)
        or req.properties.getProperty('requester') == commit_bot):
      return req
  return requests[0]


# Tests that are single-machine shard-safe.
sharded_tests = [
  'aura_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'device_unittests',
  'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sync_integration_tests',
  'sync_unit_tests',
  'ui_unittests',
  'unit_tests',
  'views_unittests',
  'webkit_compositor_bindings_unittests',
]

# http://crbug.com/157234
win_sharded_tests = sharded_tests[:]
win_sharded_tests.remove('sync_integration_tests')

def CreateBuilder(platform, builder_name, target,
                  options, tests,
                  slavebuilddir=None,
                  factory_properties=None,
                  annotation_script=None,
                  ninja=True,
                  goma=False,
                  clang=False,
                  run_default_swarm_tests=False):
  """Generates and register a builder along with its slave(s)."""
  if platform not in ('win32', 'win64', 'linux', 'mac', 'android', 'ios'):
    raise Exception(platform + ' is not a known os type')
  assert tests is not None or annotation_script, (
      'Must either specify tests or use an annotation script')

  factory_properties = (factory_properties or {}).copy()


  # Make app_list_unittests an opt-in target for initial verification on non-
  # ChromeOS platforms. TODO(tapted): Remove this when verified.
  if platform in ('win32', 'win64', 'mac'):
    platform_optional_tests = ['app_list_unittests']
  else:
    platform_optional_tests = []

  factory_properties.setdefault('non_default', [
      'check_licenses',
      'chromedriver2_tests',
      'courgette_unittests',
      'sync_integration_tests',
      'url_unittests',
    ] + platform_optional_tests)

  factory_properties.setdefault('gclient_env', {})
  factory_properties['gclient_env'].setdefault('GYP_DEFINES', '')
  factory_properties['gclient_env']['GYP_DEFINES'] += ' dcheck_always_on=1'
  if not 'fastbuild=0' in factory_properties['gclient_env']['GYP_DEFINES']:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' fastbuild=1'
  if platform in ('win32', 'win64'):
    # http://crbug.com/157234
    factory_properties.setdefault('sharded_tests', win_sharded_tests)
  else:
    factory_properties.setdefault('sharded_tests', sharded_tests)

  build_tool = []
  if platform in ('win32', 'win64'):
    factory_properties['process_dumps'] = True
    factory_properties['start_crash_handler'] = True

    if ninja:
      factory = m_chromium_win_ninja
      factory_properties['gclient_env']['GYP_DEFINES'] += ' chromium_win_pch=0'
    else:
      factory = m_chromium_win

  elif platform == 'linux':
    factory = m_chromium_linux
  elif platform == 'android':
    factory = m_chromium_android
  elif platform == 'ios':
    factory = m_chromium_ios
  elif platform == 'mac':
    if ninja:
      factory = m_chromium_mac_ninja
    else:
      factory = m_chromium_mac

  if ninja:
    factory_properties['gclient_env']['GYP_GENERATORS'] = 'ninja'
    # Android's annotated step uses 'buildtool' instead of
    # 'GYP_GENERATORS'. Set it right here.
    # Ref: src/build/android/buildbot/buildbot_functions.sh
    factory_properties['buildtool'] = 'ninja'
    build_tool.append('--build-tool=ninja')
  if goma:
    if clang:
      build_tool.append('--compiler=goma-clang')
    else:
      build_tool.append('--compiler=goma')
  if clang:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' clang=1'

  # Android's annotated step uses factory_properties['extra_gyp_defines']
  # instead of properly using factory_properties['gclient_env']['GYP_DEFINES'].
  # Ref: src/build/android/buildbot/buildbot_functions.sh
  # TODO(ilevy): The script should be changed to use the canonical value.
  factory_properties['extra_gyp_defines'] = (
      factory_properties['gclient_env']['GYP_DEFINES'])

  options = build_tool + ['--clobber-post-fail'] + (options or [])

  if run_default_swarm_tests:
    # This serves a dual purpose.
    #
    # First, this specifies that some tests should be run on Swarm. Grep for
    # run_default_swarm_tests inside scripts/master/factory.
    #
    # Second, this is currently needed because many tests are run isolated but
    # not on Swarm. The Try Server doesn't know about running these .isolated
    # file so the foo_test_run targets need to be built manually, so that
    # scripts/slave/runisolatetest.py can find the .isolated file.
    #
    # Eventually, everything will be run isolated so this confusion will not be
    # needed anymore.
    #
    # This is not needed when running the TS locally because the _run targets
    # are already specified.
    if not ActiveMaster.is_production_host:
      options.append('chromium_swarm_tests')

  compile_timeout = 2400
  if annotation_script:
    # Note new slave type AnnotatedTrybot; we don't want a compile step added
    # in gclient_factory.py.
    # TODO(maruel): Support enable_swarm_tests
    builder_factory = factory.ChromiumAnnotationFactory(
        slave_type='AnnotatedTrybot', target=target, tests=tests,
        options=options,
        compile_timeout=compile_timeout,
        factory_properties=factory_properties,
        annotation_script=annotation_script)
  else:
    builder_factory = factory.ChromiumFactory(
        slave_type='Trybot', target=target, tests=tests, options=options,
        compile_timeout=compile_timeout,
        factory_properties=factory_properties,
        run_default_swarm_tests=run_default_swarm_tests)
  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info


def CreateCrosBuilder(builder_name, target, slavebuilddir=None,
                      short_name=None):
  """Generates and register a ChromeOS builder along with its slave(s)."""

  if short_name:
    buildroot = '/b/cbuild.%s' % short_name
  else:
    buildroot = '/b/cbuild'

  # Sets up a factory with the steps to pull out a chromium source tree and
  # apply a patch from a try job
  trial_chrome_factory = m_chromium_chromiumos.ChromiumOSFactory(
      target=None,
      slave_type='CrosTrybot',
      tests=[],
      )

  # Extends that factory with a Cbuildbot build steps to build and test
  # CrOS using the chrome from the above chromium source tree
  builder_factory = chromeos_factory.CbuildbotFactory(
      params=target,
      buildroot=buildroot,
      dry_run=True,
      chrome_root='.',  # this is where ChromiumOSFactory has put "Chrome"
      factory=trial_chrome_factory,
      slave_manager=False,
      ).get_factory()

  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info

# Try queues.
pools = BuildersPools('chrome')

# The default targets to build.
common_targets = [
  'chromium_builder_tests',
]

# Linux builder
linux_targets = common_targets[:]
linux_tests = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'check_deps',
  'check_deps2git',
  'check_licenses',
  'crypto_unittests',
  'dbus',
  'device_unittests',
  'googleurl',
  'gpu',
  'interactive_ui_tests',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'sandbox_linux_unittests',
  'sync_integration',
  'unit',
  'webkit_compositor_bindings_unittests',
]

# TODO(maruel): Having a different name to specify the tests to run is a tad
# insane. Should be fixed separately.
linux_tests_full_name = [
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'check_deps',
  'check_licenses',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'dbus_unittests',
  'device_unittests',
  'gpu_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'nacl_integration',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sandbox_linux_unittests',
  'sql_unittests',
  'sync_integration_tests',
  'sync_unit_tests',
  'ui_unittests',
  'unit_tests',
  'url_unittests',
  'webkit_compositor_bindings_unittests',
  'webkit_lint',
  'webkit_unit_tests',
]

if not ActiveMaster.is_production_host:
  # When testing locally, build fewer targets so we can iterate faster.
  # Comment out this line if you need to test more targets.
  linux_targets = ['base_unittests_run']
  linux_tests = ['base_unittests']

b_linux = CreateBuilder(
    platform='linux',
    target='Debug',
    goma=True,
    options=linux_targets,
    tests=linux_tests,
    builder_name='linux')

b_linux_futura = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_targets,
    tests=linux_tests,
    builder_name='linux_futura',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'use_aura=1',
      },
      'window_manager': 'False'
    },
    slavebuilddir='linux_aura')

linux_aura_tests = [
  'aura',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'compositor',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'device_unittests',
  'googleurl',
  'gpu',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle',
  'media',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'ui_unittests',
  'unit_sql',
  'unit_sync',
  'unit_unit',
  'views',
]

linux_aura_options = [
  'aura_builder',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'compositor_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'gpu_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sql_unittests',
  'ui_unittests',
  'url_unittests',
]

b_linux_aura = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_aura_options,
    tests=linux_aura_tests,
    builder_name='linux_aura',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'use_aura=1',
      },
      'window_manager': 'False'
    },
    slavebuilddir='linux_aura')


pools['chrome'].append('linux')

b_linux_rel = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_targets,
    tests=linux_tests + ['sizes'],
    builder_name='linux_rel',
    slavebuilddir='linux',
    factory_properties={
      'use_xvfb_on_linux': True,
    },
    run_default_swarm_tests=True)

b_linux_rel_naclmore = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=['all'],
    tests=['nacl_integration'],
    builder_name='linux_rel_naclmore',
    slavebuilddir='linux',
    factory_properties={'use_xvfb_on_linux': True})

b_linux_rel_alt = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_targets,
    tests=linux_tests + ['sizes'],
    builder_name='linux_rel_alt',
    slavebuilddir='linux',
    factory_properties={
      'use_xvfb_on_linux': True,
    })

b_linux_rel_precise32 = CreateBuilder(
    platform='linux',
    target='Release',
    goma=True,
    options=linux_targets,
    tests=linux_tests + ['sizes'],
    builder_name='linux_rel_precise32',
    slavebuilddir='linux_precise32',
    factory_properties={
      'use_xvfb_on_linux': True,
    })


# Mac builder
mac_targets = common_targets[:]
mac_tests = [
  'app_list_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'check_deps',
  'check_deps2git',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'crypto_unittests',
  'device_unittests',
  'googleurl',
  'gpu',
  'interactive_ui_tests',
  'jingle',
  'media',
  'message_center_unittests',
  'nacl_integration',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'sync_integration',
  'unit',
  'webkit_compositor_bindings_unittests',
  #'webkit_lint',
  #'webkit_unit',
]

if not ActiveMaster.is_production_host:
  # When testing locally, build fewer targets so we can iterate faster.
  # Comment out this line if you need to test more targets.
  mac_targets = ['base_unittests_run']
  mac_tests = ['base_unittests']

b_mac = CreateBuilder(
    platform='mac',
    target='Debug',
    options=mac_targets,
    tests=mac_tests,
    builder_name='mac',
    goma=True,
    clang=True)

pools['chrome'].append('mac')

b_mac_rel = CreateBuilder(
    platform='mac',
    target='Release',
    options=mac_targets,
    tests=mac_tests + ['sizes'],
    builder_name='mac_rel',
    slavebuilddir='mac',
    goma=True,
    clang=True)

b_mac_rel_naclmore = CreateBuilder(
    platform='mac',
    target='Release',
    options=['all'],
    tests=['nacl_integration'],
    builder_name='mac_rel_naclmore',
    slavebuilddir='mac',
    goma=True,
    clang=True)

b_mac_xcodebuild = CreateBuilder(
    platform='mac',
    target='Release',
    options=mac_targets,
    tests=[],
    builder_name='mac_xcodebuild',
    slavebuilddir='mac',
    goma=True,
    clang=True,
    ninja=False)


# Windows builder
win_targets = common_targets[:]
win_tests = [
  'app_list_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'check_deps',
  'check_deps2git',
  'chrome_frame_net_tests',
  'chrome_frame_tests',
  'chrome_frame_unittests',
  'chromedriver2_tests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'courgette_unittests',
  'crypto_unittests',
  'device_unittests',
  'googleurl',
  'gpu',
  'installer',
  'interactive_ui_tests',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'sync_integration',
  'unit',
  'webkit_compositor_bindings_unittests',
  #'webkit_lint',
  #'webkit_unit',
]

if not ActiveMaster.is_production_host:
  # When testing locally, build fewer targets so we can iterate faster.
  # Comment out this line if you need to test more targets.
  win_targets = ['base_unittests_run']
  win_tests = ['base_unittests']

b_win = CreateBuilder(
    target='Debug',
    platform='win32',
    options=win_targets,
    tests=win_tests,
    builder_name='win',
    factory_properties={
      'gclient_env': {
        'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
      },
    },
    goma=True)

pools['chrome'].append('win')

b_win_rel = CreateBuilder(
    target='Release',
    platform='win32',
    options=win_targets,
    tests=win_tests + ['sizes'],
    builder_name='win_rel',
    slavebuilddir='win',
    factory_properties={
      'gclient_env': {
        'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
      },
    },
    goma=True,
    run_default_swarm_tests=True)

b_win_rel_naclmore = CreateBuilder(
    target='Release',
    platform='win32',
    options=['all'],
    tests=win_tests,
    builder_name='win_rel_naclmore',
    slavebuilddir='win',
    goma=True,
    factory_properties={
      'gclient_env': {
        'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1',
      },
    })


# Windows x64 builder
win_x64_tests = [
  'base_unittests',
  'cacheinvalidation_unittests',
  'crypto_unittests',
  'device_unittests',
  'gpu_unittests',
  'installer_util_unittests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'sql_unittests',
  'sync_unit_tests',
  'ui_unittests',
  'url_unittests',
  'views_unittests',
]

win_x64_options = [
  '--', 'chromium_builder_tests'
]

b_win_x64_rel = CreateBuilder(
    target='Release_x64',
    platform='win32',
    options=win_x64_options,
    tests=win_x64_tests,
    builder_name='win_x64_rel',
    slavebuilddir='win',
    goma=False,
    ninja=True,
    factory_properties={
      'gclient_env': {
         'GYP_DEFINES': 'component=shared_library target_arch=x64'
    }})

# Tests that are single-machine shard-safe on Linux ChromeOS
linux_chromeos_sharded = [
  'base_unittests',
  'browser_tests',
  'components_unittests',
  'content_browsertests',
  'content_unittests',
  'media_unittests',
]

linux_chromeos_tests= [
  ('app_list_unittests', 'app_list_unittests'),
  ('ash_unittests', 'aura_builder'),
  ('aura', 'aura_builder'),
  ('base_unittests', 'base_unittests'),
  ('browser_tests', 'browser_tests'),
  ('cacheinvalidation_unittests', 'cacheinvalidation_unittests'),
  ('check_deps', None),
  ('check_deps2git', None),
  ('chromeos_unittests', 'chromeos_unittests'),
  ('components_unittests', 'components_unittests'),
  ('compositor', 'compositor_unittests'),
  ('content_browsertests', 'content_browsertests'),
  ('content_unittests', 'content_unittests'),
  ('crypto_unittests', 'crypto_unittests'),
  ('dbus', 'dbus_unittests'),
  ('device_unittests', 'device_unittests'),
  ('gpu', 'gpu_unittests'),
  #('googleurl', 'url_unittests'), # issue 49580
  (None, 'url_unittests'),
  ('interactive_ui_tests', 'interactive_ui_tests'),
  ('ipc_tests', 'ipc_tests'),
  ('jingle', 'jingle_unittests'),
  ('media', 'media_unittests'),
  ('message_center_unittests', 'message_center_unittests'),
  ('net', 'net_unittests'),
  ('ppapi_unittests', 'ppapi_unittests'),
  ('printing', 'printing_unittests'),
  (None, 'remoting_unittests'),
  ('sandbox_linux_unittests', 'sandbox_linux_unittests'),
  ('ui_unittests', 'ui_unittests'),
  ('unit_sql', 'sql_unittests'),
  ('unit_sync', 'sync_unit_tests'),
  ('unit_unit', 'unit_tests'),
  ('views', 'views_unittests'),
]

def without_tests(pairs, without):
  return [(a, b) for (a, b) in pairs if a not in without]

def extract_tests(pairs):
  return list(set(a for (a, _) in pairs if a is not None))

def extract_options(pairs):
  return list(set(b for (_, b) in pairs if b is not None))

def prepend_type(prefix, test_list):
  return ['%s_%s' % (prefix, value) for value in test_list]

def valgrind_tests(test_list):
  return prepend_type('valgrind', test_list)

def heapcheck_tests(test_list):
  return prepend_type('heapcheck', test_list)

def tsan_tests(test_list):
  return prepend_type('tsan', test_list)


# Chromium for ChromiumOS
b_linux_chromeos = {
  'name': 'linux_chromeos',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      slave_type='Trybot',
      target='Release',
      tests=extract_tests(linux_chromeos_tests),
      options=['--compiler=goma'] + extract_options(linux_chromeos_tests),
      factory_properties={
        'sharded_tests': sharded_tests,
        'gclient_env': {
          'GYP_DEFINES': ('chromeos=1 fastbuild=1'
                          ' dcheck_always_on=1'
                          ' ffmpeg_branding=ChromeOS'
                          ' component=shared_library'
                          ' proprietary_codecs=1')}})
}

# Compile and zip build, triggers testers
b_android_rel = CreateBuilder(
    platform='android',
    target='Release',
    builder_name='android_rel',
    slavebuilddir='android',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
        'android_bot_id': 'try-builder-rel',
        'build_url': android_rel_archive,
        'trigger': 'android_rel',
    })

# Download and extract build, run tests.
b_android_rel_triggered_tests = CreateBuilder(
    platform='android',
    target='Release',
    builder_name='android_rel_triggered_tests',
    slavebuilddir='android',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
        'android_bot_id': 'try-tests-rel',
        'build_url': android_rel_archive,
        'halt_on_missing_build': True,
    })


# Compile and zip build, triggers testers
b_android_dbg = CreateBuilder(
    platform='android',
    target='Debug',
    builder_name='android_dbg',
    slavebuilddir='android',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
        'android_bot_id': 'try-builder-dbg',
        'build_url': android_dbg_archive,
        'trigger': 'android_dbg',
    })

# Download and extract build, run tests.
b_android_dbg_triggered_tests = CreateBuilder(
    platform='android',
    target='Debug',
    builder_name='android_dbg_triggered_tests',
    slavebuilddir='android',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
        'android_bot_id': 'try-tests-dbg',
        'halt_on_missing_build': True,
        'build_url': android_dbg_archive})

# Compile and zip build, triggers testers
b_android_fyi_dbg = CreateBuilder(
    platform='android',
    target='Debug',
    builder_name='android_fyi_dbg',
    slavebuilddir='android',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
        'android_bot_id': 'try-fyi-builder-dbg',
        'build_url': android_fyi_dbg_archive,
        'trigger': 'android_fyi_dbg',
    })

# Download and extract build, run tests.
b_android_fyi_dbg_triggered_tests = CreateBuilder(
    platform='android',
    target='Debug',
    builder_name='android_fyi_dbg_triggered_tests',
    slavebuilddir='android',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
        'android_bot_id': 'try-fyi-tests-dbg',
        'build_url': android_fyi_dbg_archive,
        'halt_on_missing_build': True,
    })

# Android clang ninja builder
b_android_clang_dbg = CreateBuilder(
    platform='android',
    target='Debug',
    builder_name='android_clang_dbg',
    options=[],
    tests=[],
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    clang=True,
    factory_properties={
        'android_bot_id': 'try-clang-builder-dbg',
    })

b_ios_rel_device = CreateBuilder(
  platform='ios',
  builder_name='ios_rel_device',
  target='Release',
  options=[
    '--',
    '-project', '../build/all.xcodeproj',
    '-sdk', 'iphoneos6.0',
    '-target', 'All',
  ],
  ninja=False,
  tests=[],
  factory_properties={
    'app_name': 'Chromium.app',
    'gclient_deps': 'ios',
    'gclient_env': {
      'GYP_DEFINES':
          'component=static_library OS=ios chromium_ios_signing=0 fastbuild=0',
      'GYP_GENERATOR_FLAGS': 'xcode_project_version=3.2',
    },
  },
)

b_ios_dbg_simulator = CreateBuilder(
  platform='ios',
  builder_name='ios_dbg_simulator',
  target='Debug',
  tests=[
    'base_unittests',
    'content_unittests',
    'crypto_unittests',
    'googleurl',
    'media',
    'net',
    'ui_unittests',
    'unit_sql',
    'unit_sync',
    'unit_tests',
  ],
  options=[
    '--',
    '-project', '../build/all.xcodeproj',
    '-sdk', 'iphonesimulator6.0',
    '-target', 'All',
  ],
  ninja=False,
  factory_properties={
    'app_name': 'Chromium.app',
    'test_platform': 'ios-simulator',
    'gclient_deps': 'ios',
    'gclient_env': {
      'GYP_DEFINES':
          'component=static_library OS=ios chromium_ios_signing=0 fastbuild=0',
      'GYP_GENERATOR_FLAGS': 'xcode_project_version=3.2',
    },
    'sharded_tests': [],
  },
)

# 32 bits tools can't link libwebcore.a anymore due to lack of virtual address
# space, including OSX 10.5.
valgrind_gyp_defines = (
    chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES + ' enable_svg=0')
drmemory_gyp_defines = 'build_for_tool=drmemory'

b_valgrind_linux = {
  'name': 'linux_valgrind',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      target='Release',
      options=[
        '--compiler=goma',
        'DumpRenderTree',
        'base_unittests',
        'components_unittests',
        'content_shell',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'ipc_tests',
        'media_unittests',
        'net_unittests',
        'ppapi_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sandbox_linux_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
        'url_unittests',
      ],
      tests=valgrind_tests([
        'base_unittests',
        'components',
        'content',
        'crypto_unittests',
        'googleurl',
        'ipc_tests',
        'media',
        'net',
        'printing',
        'remoting',
        'sandbox',
        'sql',
        'sync',
        'unit',
      ]),
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_gyp_defines}}),
}

b_valgrind_mac = {
  'name': 'mac_valgrind',
  'factory': m_chromium_mac.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      # This trybot will build every build target. We can speed up the build
      # for Valgrind by building only what we really need if/when we want to.
      # See http://crbug.com/42298
      tests=valgrind_tests([
        'base_unittests',
        # Re-enable when http://crbug.com/130744 is fixed (BSODs on the trybot)
        # 'content',
        'crypto_unittests',
        'device_unittests',
        'googleurl',
        'media',
        'net',
        'printing',
        'remoting',
        'sql',
        'unit',
      ]),
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_gyp_defines}}),
}

b_valgrind_mac_alt = {
  'name': 'mac_valgrind_alt',
  'factory': m_chromium_mac.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      # This trybot will build every build target. We can speed up the build
      # for Valgrind by building only what we really need if/when we want to.
      # See http://crbug.com/42298
      tests=[
        'valgrind_base_unittests',
        # Re-enable when http://crbug.com/130744 is fixed (BSODs on the trybot)
        # 'valgrind_content',
        'valgrind_crypto',
        'valgrind_device_unittests',
        'valgrind_googleurl',
        'valgrind_media',
        'valgrind_net',
        'valgrind_printing',
        'valgrind_remoting',
        'valgrind_sql',
        'valgrind_unit',
      ],
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_gyp_defines}}),
}

# browser_tests takes too long
b_linux_chromeos_valgrind = {
  'name': 'linux_chromeos_valgrind',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      slave_type='Trybot',
      target='Release',
      options=['--compiler=goma'] + extract_options(linux_chromeos_tests),
      tests=valgrind_tests(
        extract_tests(without_tests(linux_chromeos_tests, ['browser_tests']))),
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {
          'GYP_DEFINES': (valgrind_gyp_defines +
                          ' chromeos=1'
                          ' ffmpeg_branding=ChromeOS'
                          ' proprietary_codecs=1')}})
}

b_tsan_linux = {
  'name': 'linux_tsan',
  # Reuse the directory.
  'slavebuilddir': 'linux_valgrind',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      target='Release',
      options=[
        '--compiler=goma',
        'base_unittests',
        'components_unittests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'ipc_tests',
        'media_unittests',
        'net_unittests',
        'ppapi_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
        'url_unittests',
      ],
      tests=tsan_tests([
        'base_unittests',
        'content',
        'components',
        'crypto_unittests',
        'device_unittests',
        'googleurl',
        'ipc_tests',
        'media',
        'net',
        'printing',
        'remoting',
        'sql',
        'sync',
        'unit',
      ]),
      factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_gyp_defines}}),
}

b_tsan_win = {
  'name': 'win_tsan',
  'slavebuilddir': 'win_tsan',
  'factory': m_chromium_win.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      project='all.sln;chromium_builder_dbg_drmemory_win',
      tests=tsan_tests([
        'googleurl',
        'printing',
        'sql',
        'ipc_tests',
        'crypto_unittests',
        'components',
        'base_unittests',
        'remoting',
        'media',
        'net',
      ]),
      factory_properties={
        'needs_tsan_win': True,
        'gclient_env': {
          'GYP_DEFINES' : 'build_for_tool=tsan'
        },
      },
  ),
}

b_drmemory_win = {
  'name': 'win_drmemory',
  'factory': m_chromium_win.ChromiumFactory(
    slave_type='Trybot',
    target='Debug',
    project='all.sln;chromium_builder_dbg_drmemory_win',
    tests=[
      'drmemory_light_base_unittests',
      'drmemory_light_crypto',
      'drmemory_light_device_unittests',
      'drmemory_light_googleurl',
      'drmemory_light_ipc_tests',
      'drmemory_light_media',
      'drmemory_light_net',
      'drmemory_light_printing',
      'drmemory_light_remoting',
      'drmemory_light_sql',
      'drmemory_light_unit',
    ],
    factory_properties={
      'gclient_env': {'GYP_DEFINES': drmemory_gyp_defines},
      'needs_drmemory' : True,
    }
  ),
}

# Linux coverage builder
GYP_DEFINES_FOR_COVERAGE = ('coverage=1 '
                            'fastbuild=1 '
                            'enable_svg=0')

b_coverage_linux = {
  'name': 'linux_coverage',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      clobber=False,
      options=['--compiler=goma', 'coverage_build'],
      tests=['run_coverage_bundles', 'process_coverage'],
      factory_properties={
        'gclient_env': {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE},
        'perf_id': 'chromium-dbg-linux-try',
        'use_build_number': True}),
}

# WebKit Layout builders
b_linux_layout = {
  'name': 'linux_layout',
  'slavebuilddir': 'linux_layout',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=['--build-tool=ninja', '--compiler=goma',
               'all_webkit', 'content_shell'],
      factory_properties={
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
        },
        'blink_config': 'blink',
      }),
}

b_linux_layout_rel = {
  'name': 'linux_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'linux_layout',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      target='Release',
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=['--build-tool=ninja', '--compiler=goma',
               'all_webkit', 'content_shell'],
      factory_properties={
        'gclient_env': {
          'GYP_DEFINES': 'dcheck_always_on=1',
          'GYP_GENERATORS': 'ninja',
        },
        'blink_config': 'blink',
      }),
}

b_mac_layout = {
  'name': 'mac_layout',
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac_ninja.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=['--build-tool=ninja', '--compiler=goma-clang',
               'all_webkit', 'content_shell'],
      factory_properties={
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
        },
        'blink_config': 'blink',
      }),
}

b_mac_layout_alt = {
  'name': 'mac_layout_alt',
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=[
        '--compiler=goma-clang',
        '--',
        '-project', '../webkit/webkit.xcodeproj',
      ],
      factory_properties={
        'blink_config': 'blink',
      }),
}

b_mac_layout_rel = {
  'name': 'mac_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac_ninja.ChromiumFactory(
      slave_type='Trybot',
      target='Release',
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=[
        '--build-tool=ninja', '--compiler=goma-clang',
        '--', 'all_webkit', 'content_shell'],
      factory_properties={
        'gclient_env': {
          'GYP_DEFINES': 'dcheck_always_on=1',
          'GYP_GENERATORS': 'ninja',
        },
        'blink_config': 'blink',
      }),
}

b_mac_layout_rel_alt = {
  'name': 'mac_layout_rel_alt',
  # Reuse the directory.
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac.ChromiumFactory(
      slave_type='Trybot',
      target='Release',
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      options=[
        '--compiler=goma-clang',
        '--', '-project', '../webkit/webkit.xcodeproj',
      ],
      factory_properties={
        'blink_config': 'blink',
      }),
}

b_win_layout = {
  'name': 'win_layout',
  'slavebuilddir': 'win_layout',
  'factory': m_chromium_win_ninja.ChromiumFactory(
      slave_type='Trybot',
      target='Debug',
      options=['--build-tool=ninja', '--compiler=goma',
               '--', 'all_webkit', 'content_shell'],
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      factory_properties={
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': 'chromium_win_pch=0',
        },
        'blink_config': 'blink',
      }),
}

b_win_layout_rel = {
  'name': 'win_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'win_layout',
  'factory': m_chromium_win_ninja.ChromiumFactory(
      slave_type='Trybot',
      target='Release',
      options=['--build-tool=ninja', '--compiler=goma',
               '--', 'all_webkit', 'content_shell'],
      tests=[
        'webkit',
        'webkit_lint',
        'webkit_unit',
      ],
      factory_properties={
        'gclient_env': {
          'GYP_DEFINES': 'chromium_win_pch=0 dcheck_always_on=1 fastbuild=1',
          'GYP_GENERATORS': 'ninja',
        },
        'blink_config': 'blink',
      }),
}


# Chrome Frame builder
b_win_chrome_frame = CreateBuilder(
    platform='win32',
    target='Debug',
    builder_name='win_cf',
    options=['chromium_builder_win_cf'],
    tests=[
      'chrome_frame_net_tests',
      'chrome_frame_tests',
    ],
    slavebuilddir='win',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'fastbuild=0',
      },
    })

# Swarm Builder
b_swarm = {
    'auto_reboot': False,
    'factory': swarm_factory.SwarmTestBuilder(
        config.Master.swarm_server_internal_url,
        config.Master.swarm_hashtable_server_internal,
        tests=[
          'base_unittests',
          'browser_tests',
          'interactive_ui_tests',
          'net_unittests',
          'sync_integration_tests',
          'unit_tests',
        ]),
    'name': 'swarm_triggered',
}

# Clang builders
b_linux_clang = CreateBuilder(
    platform='linux',
    target='Debug',
    options=linux_targets,
    tests=linux_tests,
    builder_name='linux_clang',
    goma=True,
    clang=True,
    # Keep all tests off by default.
    factory_properties={
      'non_default': linux_tests_full_name,
      'gclient_env': {
        'GYP_DEFINES': 'clang_use_chrome_plugins=1',
      },
    })

b_linux_chromeos_clang = {
  'name': 'linux_chromeos_clang',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      slave_type='Trybot',
      target='Debug',
      options=['--build-tool=ninja', '--compiler=goma-clang'] +
        extract_options(linux_chromeos_tests),
      tests=[],
      factory_properties={
        # CreateBuilder() adds "fastbuild=1" for the other 2 clang bots.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': ('chromeos=1'
                          ' clang=1 clang_use_chrome_plugins=1'
                          ' fastbuild=1'
                          ' ffmpeg_branding=ChromeOS proprietary_codecs=1'
                          ' component=shared_library')}})
}

b_win7_aura = CreateBuilder(
    platform='win32',
    target='Release',
    builder_name='win7_aura',
    options=['aura_builder'],
    tests=[
      'ash_unittests',
      'aura',
      'browser_tests',
      'compositor',
      'content_browsertests',
      'content_unittests',
      'device_unittests',
      'interactive_ui_tests',
      'unit_unit',
      'views',
    ],
    goma=True,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'use_aura=1',
      },
    })

# this matches the bot on the main waterfall soon
b_win8_aura = CreateBuilder(
    platform='win32',
    target='Release',
    builder_name='win8_aura',
    options=['aura_builder'],
    tests=[
      'ash_unittests',
      'aura',
      'compositor',
      'views',
    ],
    goma=True,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'use_aura=1',
      },
    })

# browser_tests run for a hour. Please don't add them to the bot.
b_linux_asan = {
  'name': 'linux_asan',
  'factory': m_chromium_linux.ChromiumASANFactory(
      slave_type='Trybot',
      options=[
        '--build-tool=ninja',
        '--compiler=goma-clang',
        'base_unittests',
        'cacheinvalidation_unittests',
        'components_unittests',
        'content_browsertests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'gpu_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'ppapi_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sandbox_linux_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
        'url_unittests',
      ],
      tests=[
        'base_unittests',
        'cacheinvalidation_unittests',
        'components_unittests',
        'content_browsertests',
        'crypto_unittests',
        'device_unittests',
        #'googleurl',  # issue 49580
        'gpu',
        'jingle',
        'media',
        'net',
        'ppapi_unittests',
        'printing',
        'remoting',
        'sandbox_linux_unittests',
        'unit',
      ],
      factory_properties={
        'asan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': 'asan=1 linux_use_tcmalloc=0',
        },
        'sharded_tests': sharded_tests,
      }),
}

# browser_tests run for two hours. Please don't add them to the bot.
b_linux_clang_tsan = {
  'name': 'linux_clang_tsan',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      options=[
        '--build-tool=ninja',
        '--compiler=goma-clang',
        'base_unittests',
        'cacheinvalidation_unittests',
        'components_unittests',
        'content_browsertests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'googleurl_unittests',
        'gpu_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'ppapi_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sandbox_linux_unittests',
        'sql_unittests',
        'unit_tests',
      ],
      tests=[
        'base_unittests',
        'cacheinvalidation_unittests',
        'components_unittests',
        'content_browsertests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'googleurl',
        'gpu',
        'ipc_tests',
        'jingle',
        'media',
        'net',
        'ppapi_unittests',
        'printing',
        'remoting',
        'sandbox_linux_unittests',
        'unit_sql',
        'unit_sync',
        'unit_tests',
      ],
      factory_properties={
        'tsan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': 'tsan=1 linux_use_tcmalloc=0',
        },
        'sharded_tests': sharded_tests,
      }),
}

b_linux_chromeos_asan = {
  'name': 'linux_chromeos_asan',
  'factory': m_chromium_chromiumos.ChromiumOSASANFactory(
      slave_type='Trybot',
      options=['--build-tool=ninja', '--compiler=goma-clang'] +
        extract_options(linux_chromeos_tests),
      tests=extract_tests(linux_chromeos_tests),
      factory_properties={
        'asan': True,  # Used by runtest.py.
        'gclient_env': {
          'GYP_GENERATORS': 'ninja',
          'GYP_DEFINES': 'asan=1 linux_use_tcmalloc=0 '
                         'chromeos=1 component=static_library '
        },
        'sharded_tests': sharded_tests,
      }),
}

mac_asan_tests = list(
  set(mac_tests) - set(['nacl_integration', 'unit'])
)

b_mac_asan = CreateBuilder(
    platform='mac',
    target='Release',
    tests=mac_asan_tests,
    options=[
      '--disable-aslr',
    ] + mac_targets,
    builder_name='mac_asan',
    slavebuilddir='mac_asan',
    goma=True,
    clang=True,
    factory_properties={
      'asan': True,
      'gclient_env': {
        'GYP_DEFINES': 'asan=1 release_extra_cflags=-gline-tables-only',
      },
    })

b_linux_heapcheck = {
  'name': 'linux_heapcheck',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Debug',
      slave_type='Trybot',
      options=['content_unittests',
               'DumpRenderTree',
               'base_unittests',
               'content_shell',
               'courgette_unittests',
               'crypto_unittests',
               'device_unittests',
               'ipc_tests',
               'media_unittests',
               'net_unittests',
               'ppapi_unittests',
               'printing_unittests',
               'remoting_unittests',
               'sql_unittests',
               'sync_unit_tests',
               'ui_unittests',
               'unit_tests',
               'url_unittests',
             ],
      tests=heapcheck_tests([
             'googleurl',
             'printing',
             'media',
             'content',
             'courgette_unittests',
             'device_unittests',
             'remoting',
             'sql',
             'sync',
             'ipc_tests',
             'base_unittests',
             'crypto_unittests',
             'net',
             'ui_unittests',
             'unit',
           ]),
      factory_properties={
        'gclient_env': {'GYP_DEFINES': ('linux_use_tcmalloc=1 '
                                        'linux_use_heapchecker=1 '
                                        'linux_keep_shadow_stacks=1 '
                                        'werror= ')
        }
      }
  ),
}

b_linux_redux = {
  'name': 'linux_redux',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Trybot',
      options=[
        '--compiler=goma',
        'base_unittests',
        'cacheinvalidation_unittests',
        'content_unittests',
        'crypto_unittests',
        'device_unittests',
        'ipc_tests',
        'jingle_unittests',
        'media_unittests',
        'net_unittests',
        'ppapi_unittests',
        'printing_unittests',
        'remoting_unittests',
        'sql_unittests',
        'sync_unit_tests',
        'ui_unittests',
        'unit_tests',
        'url_unittests',
      ],
      tests=[
        'base_unittests',
        'cacheinvalidation_unittests',
        'crypto_unittests',
        'device_unittests',
        'jingle',
        'net',
        'unit',
      ],
      factory_properties={
        'gclient_env': {
          'GYP_DEFINES': ('linux_fpic=1 '
                          'enable_touch_events=1 '
                          'disable_nacl=1 '
                          'linux_use_tcmalloc=0 '
                          'linux_breakpad=0 '
                          'remoting=0 '
                          'configuration_policy=0 '
                          'safe_browsing=0 '
                          'use_openssl=1 ')}}),
}

b_cros_pfq_x86 = CreateCrosBuilder(
    'cros_x86',
    'x86-generic-tot-chrome-pfq-informational',
    short_name='x86',
)

b_cros_pfq_amd64 = CreateCrosBuilder(
    'cros_amd64',
    'amd64-generic-tot-chrome-pfq-informational',
    short_name='amd64',
)

b_cros_pfq_daisy = CreateCrosBuilder(
    'cros_daisy',
    'daisy-tot-chrome-pfq-informational',
    short_name='arm',
)

gpu_test_suite = [
  'gpu_tests',
  'gpu_content_tests',
  'gles2_conform_test',
  'gl_tests',
]

# GPU try bots
b_linux_gpu = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['chromium_gpu_debug_builder'],
    tests=gpu_test_suite,
    goma=True,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'internal_gles2_conform_tests=1',
      },
    },
    builder_name='linux_gpu')

b_win_gpu = CreateBuilder(
    target='Debug',
    platform='win32',
    options=['chromium_gpu_debug_builder'],
    tests=gpu_test_suite,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'internal_gles2_conform_tests=1',
      },
    },
    builder_name='win_gpu')

b_mac_gpu = CreateBuilder(
    platform='mac',
    target='Debug',
    options=[
      'chromium_gpu_debug_builder',
    ],
    tests=gpu_test_suite,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'internal_gles2_conform_tests=1',
      },
    },
    builder_name='mac_gpu',
    goma=True,
    clang=True)

b_mac_gpu_retina = CreateBuilder(
    platform='mac',
    target='Debug',
    options=[
      'chromium_gpu_debug_builder',
    ],
    tests=gpu_test_suite,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'internal_gles2_conform_tests=1',
      },
    },
    builder_name='mac_gpu_retina',
    goma=True,
    clang=True)

# NaCl SDK try bots
nacl_sdk_script = 'nacl_sdk_buildbot_run.py'
b_linux_nacl_sdk = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['chromium_builder_qa'],
    tests=['annotated_steps'],
    factory_properties={'annotated_script': nacl_sdk_script},
    builder_name='linux_nacl_sdk',
    goma=True)
b_win_nacl_sdk = CreateBuilder(
    target='Debug',
    platform='win32',
    options=['chromium_builder_qa'],
    tests=['annotated_steps'],
    factory_properties={'annotated_script': nacl_sdk_script},
    builder_name='win_nacl_sdk',
    slavebuilddir='win',
    goma=True)
b_mac_nacl_sdk = CreateBuilder(
    platform='mac',
    target='Debug',
    options=['chromium_builder_qa'],
    tests=['annotated_steps'],
    builder_name='mac_nacl_sdk',
    factory_properties={'annotated_script': nacl_sdk_script},
    goma=True,
    clang=True)
b_mac_nacl_sdk_alt = CreateBuilder(
    platform='mac',
    target='Debug',
    options=['chromium_builder_qa'],
    tests=['annotated_steps'],
    builder_name='mac_nacl_sdk_alt',
    factory_properties={'annotated_script':nacl_sdk_script},
    goma=True,
    clang=True)

# Bisect bots
b_linux_perf_bisect = {
  'name': 'linux_perf_bisect',
  'slavebuilddir': 'linux_perf_bisect',
  'factory': m_chromium_linux.ChromiumFactory(
      slave_type='Bisect',
      tests=[
        'bisect_revisions',
      ]),
}

b_mac_perf_bisect = {
  'name': 'mac_perf_bisect',
  'slavebuilddir': 'mac_perf_bisect',
  'factory': m_chromium_mac_ninja.ChromiumFactory(
      slave_type='Bisect',
      tests=[
        'bisect_revisions',
      ]),
}

b_win_perf_bisect = {
  'name': 'win_perf_bisect',
  'slavebuilddir': 'win_perf_bisect',
  'factory': m_chromium_win.ChromiumFactory(
      slave_type='Bisect',
      tests=[
        'bisect_revisions',
      ]),
}


# Presubmit bots
def presubmit(name, slavebuilddir=None):
  return {
    'name': '%s_presubmit' % name,
    'slavebuilddir': (slavebuilddir or ('presubmit_%s' % name)),
    'factory': m_annotator.BaseFactory('run_presubmit', {'repo_name': name}),
    'auto_reboot': False}

b_blink_bare_presubmit = presubmit('blink_bare')
b_blink_presubmit = presubmit('blink', slavebuilddir='linux')
b_chromium_presubmit = presubmit('chromium', slavebuilddir='linux')
b_tools_presubmit = presubmit('tools')


# For now we will assume a fixed toolchain location on the builders.
crosstool_prefix = (
    '/usr/local/crosstool-trusted/arm-crosstool/bin/arm-none-linux-gnueabi')
# Factory properties to use for an arm build.
arm_gclient_env = {
  'AR': crosstool_prefix + '-ar',
  'AS': crosstool_prefix + '-as',
  'CC': crosstool_prefix + '-gcc',
  'CXX': crosstool_prefix + '-g++',
  'LD': crosstool_prefix + '-ld',
  'RANLIB': crosstool_prefix + '-ranlib',
  'GYP_GENERATORS': 'make',
  'GYP_DEFINES': (
      'target_arch=arm '
      'sysroot=/usr/local/arm-rootfs '
      'disable_nacl=1 '
      'linux_use_tcmalloc=0 '
      'armv7=1 '
      'arm_thumb=1 '
      'arm_neon=0 '
      'arm_fpu=vfpv3-d16 '
      'chromeos=1 '  # Since this is the intersting variation.
  ),
}

c['builders'] = [
  b_linux_rel, b_linux_rel_alt,
  b_linux_rel_precise32,
  b_mac_rel, b_win_rel,
  b_win_x64_rel,
  b_linux_rel_naclmore, b_mac_rel_naclmore, b_win_rel_naclmore,
  b_linux_clang,
  b_linux, b_mac, b_win,
  b_android_dbg, b_android_dbg_triggered_tests,
  b_android_fyi_dbg, b_android_fyi_dbg_triggered_tests,
  b_android_clang_dbg, b_android_rel, b_android_rel_triggered_tests,
  b_ios_rel_device, b_ios_dbg_simulator,
  b_linux_chromeos,
  b_valgrind_linux, b_valgrind_mac,
  b_linux_chromeos_valgrind,
  b_tsan_linux, b_tsan_win, b_drmemory_win,
  b_linux_layout, b_mac_layout, b_win_layout,
  b_linux_layout_rel, b_mac_layout_rel, b_win_layout_rel,
  b_coverage_linux,
  b_win_chrome_frame,
  b_swarm,
  b_linux_chromeos_clang,
  b_linux_futura, b_linux_aura, b_win7_aura, b_win8_aura,
  b_linux_asan, b_linux_clang_tsan,
  b_linux_chromeos_asan,
  b_mac_asan, b_mac_xcodebuild,
  b_linux_heapcheck,
  b_linux_redux,
  b_cros_pfq_x86, b_cros_pfq_amd64, b_cros_pfq_daisy,
  b_linux_gpu, b_win_gpu, b_mac_gpu, b_mac_gpu_retina,
  b_linux_nacl_sdk, b_win_nacl_sdk, b_mac_nacl_sdk,
  b_valgrind_mac_alt, b_mac_layout_alt, b_mac_layout_rel_alt,
  b_mac_nacl_sdk_alt,
  b_linux_perf_bisect,
  b_mac_perf_bisect,
  b_win_perf_bisect,
  b_blink_bare_presubmit, b_blink_presubmit, b_chromium_presubmit, b_tools_presubmit,
]


# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'TryServer')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder.setdefault('auto_reboot', ActiveMaster.is_production_host)
  # Prioritize commit-queue jobs over try jobs.
  builder['nextBuild'] = NextJob


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

last_good_urls = {'chrome': ActiveMaster.last_good_url,
                  'blink': ActiveMaster.last_good_blink_url}
code_review_sites = {'chrome': ActiveMaster.code_review_site,
                     'blink': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

if ActiveMaster.is_production_host:
  c['schedulers'].append(TryJobRietveld(
        name='try_job_rietveld',
        last_good_urls=last_good_urls,
        code_review_sites=code_review_sites,
        pools=pools,
        project='chrome'))

if LISTEN_TO_SVN:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

# Triggerable schedulers for Android Builder.
c['schedulers'].append(Triggerable(
    name='android_dbg',
    builderNames=['android_dbg_triggered_tests']))
c['schedulers'].append(Triggerable(
    name='android_rel',
    builderNames=['android_rel_triggered_tests']))
c['schedulers'].append(Triggerable(
    name='android_fyi_dbg',
    builderNames=['android_fyi_dbg_triggered_tests']))

# Triggerable scheduler for Swarm Tests.
c['schedulers'].append(Triggerable(
    name='swarm_triggered',
    builderNames=['swarm_triggered']))


####### STATUS TARGETS

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster, False)

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      reply_to=ActiveMaster.reply_to,
      subject="try %(result)s for %(reason)s on %(builder)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails(),
      # disable success emails from triggered builders
      no_email_on_success=['android_dbg','android_fyi_dbg', 'android_rel']))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# The followings are what is kept on disk.
# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs. 3000 is not even a full day but the server is full. Keep
# more build objects than log since they are much smaller.
c['buildHorizon'] = 6000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
c['logCompressionLimit'] = False

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3


# Hack buildbot so the Stop build button doesn't work anymore. Otherwise it's
# just a pain, user misuse this button all the time.
def hack_stop(function):
  def hook(*args, **kwargs):
    result = function(*args, **kwargs)
    result = result.replace('<input type="submit" value="Stop',
        '<input type="button" onclick="alert(\''
        'For more information, visit '
        'http://dev.chromium.org/developers/try-server-usage'
        '\');"'
        ' value="Stop')
    return result
  return hook

# Only do the hack_stop if we are the production master.  This allows
# us to keep the STOP button live for local/test instances.
#if ActiveMaster.is_production_host:
#  from buildbot.status.web.builder import StatusResourceBuilder
#  StatusResourceBuilder.build_line = hack_stop(StatusResourceBuilder.build_line)
#  from buildbot.status.web import base
#  base.make_stop_form = hack_stop(base.make_stop_form)


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# Buildbot master url:
if ActiveMaster.is_production_host:
  c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.chromium/'
else:
  c['buildbotURL'] = 'http://%s:%d/' % (
      socket.getfqdn(), ActiveMaster.master_port)

# vi: set ts=4 sts=2 sw=2 et:
