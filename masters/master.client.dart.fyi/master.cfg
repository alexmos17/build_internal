# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot import locks
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Periodic
from buildbot.schedulers import triggerable
from buildbot.steps import trigger

from common import chromium_utils
from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import gclient_factory
from master.factory import dart_factory
from master.factory.dart_factory import linux_env, linux_clang_env, windows_env

import config
import master_site_config
ActiveMaster = master_site_config.DartFYI
utils = dart_factory.DartUtils(ActiveMaster)

# Hack to increase timeout for steps, dart2js debug checked mode takes more
# than 8 hours.
utils.monkey_patch_remoteshell()

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)

# Slave allocation
# build-base-name, category, platform, builder, tester
variants = [
  {
    'name': 'cross-arm-vm-linux-release',
    'category': '1vm|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'arm',
    'triggers' :
        [trigger.Trigger(schedulerNames=['scheduler-arm'], waitForFinish=True)],
    'second_annotated_steps_run' : True,
    'env': linux_env,
  },
  {
    'name': 'dart2js-chromeOnAndroid-linux',
    'category': '2dart2js|all',
    'platform': 'chromeOnAndroid',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-debug',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-debug-checked',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-debug-host-checked',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-debug-checked-host-checked',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-host-checked',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart2js-linux-release-checked-host-checked',
    'category': '2dart2js|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'vm-android-linux',
    'category': '8android|all',
    'platform': 'android',
    'env': linux_env,
  },
  {
    'name': 'dart2js-opera-win8',
    'category': '92opera|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart2js-safari-mac10.8',
    'category': '90safari|all',
    'platform': 'posix',
  },
  {
    'name': 'dart2js-chrome-linux',
    'category': '90chrome|all',
    'platform': 'posix',
  },
  {
    'name': 'dart2js-ff-linux',
    'category': '90firefox|all',
    'platform': 'posix',
  },
  {
    'name': 'new_analyzer-linux-release',
    'category': '30new_analyzer|all',
    'platform': 'posix',
    'mode': 'release',
    'arch': 'ia32',
    'env': linux_env,
  },
  {
    'name': 'dart-editor-fyi-linux',
    'category': '4dart-editor|all',
    'platform': 'posix',
    'env': linux_env,
  },
  {
    'name': 'dart-editor-fyi-win',
    'category': '4dart-editor|all',
    'platform': 'windows',
    'env': windows_env,
  },
  {
    'name': 'dart-editor-fyi-mac',
    'category': '4dart-editor|all',
    'platform': 'posix',
  },
  # Incremental V8 builders
  {
    'name': 'v8-linux-release',
    'category': '3v8|all',
    'platform': 'v8_vm',
    'arch': 'ia32',
    'env': linux_env,
  },
  {
    'name': 'v8-win-release',
    'category': '3v8|all',
    'platform': 'v8_vm',
    'arch': 'ia32',
    'env': windows_env,
  },
  {
    'name': 'v8-mac-release',
    'category': '3v8|all',
    'platform': 'v8_vm',
    'arch': 'ia32',
  },
]

variants_arm = [
  {
    'name': 'target-arm-vm-linux-release',
    'category': '1vm-arm|all',
    'platform': 'posixNoRunhooks',
    'mode': 'release',
    'arch': 'arm',
    'env': linux_env,
  },
]

slaves = slaves_list.SlavesList('slaves.cfg', 'DartFYI')


####### CHANGESOURCES

c['change_source'] = [utils.get_svn_poller()]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

# ----------------------------------------------------------------------------
# FACTORIES

utils.setup_factories(variants)
utils.setup_factories(variants_arm)

variants_dartium = [
  {
    'name' : 'dartium-win-inc-ninja',
    'category' :'6dartium|closer',
  },
]

variants_dartium_trunk = [
  {
    'name' : 'release-lucid64-trunk',
    'category' : 'trunk',
  },
]

utils.setup_dartium_factories(variants_dartium)
utils.setup_dartium_factories(variants_dartium_trunk)


####### SCHEDULERS

## configure the Schedulers

builder_names = utils.get_builder_names(variants)
builder_names_arm = utils.get_builder_names(variants_arm)

dartium_builder_names = utils.get_builder_names(variants_dartium)
trunk_dartium_builder_names = utils.get_builder_names(variants_dartium_trunk)


s = Scheduler(
  name='fyi-main',
  branch="branches/bleeding_edge",
  treeStableTimer=0,
  builderNames=builder_names + dartium_builder_names,
)

s_trunk = Scheduler(
  name='fyi-trunk',
  branch="trunk",
  treeStableTimer=0,
  builderNames=trunk_dartium_builder_names
)

s_arm = triggerable.Triggerable(
  name='scheduler-arm',
  builderNames=builder_names_arm,
)



c['schedulers'] = [s, s_trunk, s_arm]

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
for b in utils.get_builders_from_variants(variants, slaves, [slave_lock]):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(variants_dartium,
                                          slaves,
                                          [],
                                          ActiveMaster.is_production_host):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(variants_dartium_trunk,
                                          slaves,
                                          []):
  c['builders'].append(b)

for b in utils.get_builders_from_variants(variants_arm, slaves, []):
  c['builders'].append(b)


####### BUILDSLAVES

c['slaves'] = utils.get_slaves(c['builders'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  for status in utils.get_web_statuses():
    c['status'].append(status)

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  mail_notifiers = [
    {
      'extraRecipients' : ['ricow@google.com',
                           'kasperl@google.com',
                           'ahe@google.com'],
      'builders' : ['dart2js-linux-debug',
                    'dart2js-linux-debug-checked',
                    'dart2js-linux-debug-host-checked',
                    'dart2js-linux-debug-checked-host_checked',
                    'dart2js-linux-release-host-checked',
                    'dart2js-linux-release-checked-host-checked'],
    },
    {
      'extraRecipients' : ['ricow@google.com',
                           'erikcorry@google.com'],
      'builders' : ['dart2js-linux-release-host-checked-minified'],
    }
  ]

  for notifier in utils.get_mail_notifier_statuses(mail_notifiers):
    c['status'].append(notifier)


# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 1x the number of builds listed in console.
c['buildCacheSize'] = 60

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.dart.fyi/'
