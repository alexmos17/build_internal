# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Periodic
from buildbot.schedulers import triggerable

from common import chromium_utils
from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import gclient_factory
from master.factory.dart import dart_factory
from master.factory.dart.dart_factory import linux_env, windows_env
from master.factory.dart.dart_factory import linux_clang_env
from master.factory.dart.channels import CHANNELS

import config
import master_site_config
ActiveMaster = master_site_config.DartFYI
utils = dart_factory.DartUtils(ActiveMaster)

# Hack to increase timeout for steps, dart2js debug checked mode takes more
# than 8 hours.
utils.monkey_patch_remoteshell()

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

slaves = slaves_list.SlavesList('slaves.cfg', 'DartFYI')

def setup_channel(channel):
  postfix = channel.builder_postfix

  ####### Variant definitions
  # build-base-name, category, platform, builder, tester
  # env are relative to the dart root directory.

  def category(name):
    return '%d%s%s|all' % (channel.position, name, channel.category_postfix)

  variants = [
    {
      'name': 'analyzer_experimental-linux-release' + postfix,
      'category': category('30analyzer'),
      'platform': 'posix' + postfix,
      'mode': 'release',
      'arch': 'ia32',
      'env': linux_env,
    },
    {
      'name': 'dart2js-chromeOnAndroid-linux' + postfix,
      'category': category('2dart2js'),
      'platform': 'chromeOnAndroid' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-debug' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-debug-checked' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-debug-host-checked' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-debug-checked-host-checked' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-host-checked' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-host-checked' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-linux-release-checked-host-checked-x64' + postfix,
      'category': category('2dart2js'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'vm-android-linux' + postfix,
      'category': category('8android'),
      'platform': 'android' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart2js-opera-win8' + postfix,
      'category': category('92opera'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart2js-chrome-linux' + postfix,
      'category': category('90chrome'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart2js-ff-linux' + postfix,
      'category': category('90firefox'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'none-dartium-linux' + postfix,
      'category': category('90dartium'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'dart-editor-fyi-linux' + postfix,
      'category': category('4dart-editor'),
      'platform': 'posix' + postfix,
      'env': linux_env,
    },
    {
      'name': 'dart-editor-fyi-win' + postfix,
      'category': category('4dart-editor'),
      'platform': 'windows' + postfix,
      'env': windows_env,
    },
    {
      'name': 'dart-editor-fyi-mac' + postfix,
      'category': category('4dart-editor'),
      'platform': 'posix' + postfix,
    },
  ]

  variants_v8 = [
    {
      'name': 'v8-linux-release',
      'category': category('3v8'),
      'platform': 'v8_vm',
      'arch': 'ia32',
      'env': linux_env,
    },
    {
      'name': 'v8-win-release',
      'category': category('3v8'),
      'platform': 'v8_vm',
      'arch': 'ia32',
      'env': windows_env,
    },
    {
      'name': 'v8-mac-release',
      'category': category('3v8'),
      'platform': 'v8_vm',
      'arch': 'ia32',
    },
  ]

  variants_dartium = [
  ]

  variants_dartium_trunk = [
    {
      'name': 'release-lucid64-full-trunk',
      'category': category('trunk'),
    },
  ]

  ####### Factory setup

  utils.setup_factories(variants)
  utils.setup_factories(variants_v8)
  utils.setup_dartium_factories(variants_dartium)
  utils.setup_dartium_factories(variants_dartium_trunk)

  ####### Schedulers

  builder_names = utils.get_builder_names(variants)
  builder_names_v8 = utils.get_builder_names(variants_v8)

  dartium_builder_names = utils.get_builder_names(variants_dartium)
  trunk_dartium_builder_names = utils.get_builder_names(variants_dartium_trunk)

  # normal builders + editor builders + dartium builders
  c['schedulers'].append(Scheduler(
    name='fyi-main' + postfix,
    branch=channel.branch,
    treeStableTimer=0,
    builderNames=builder_names + dartium_builder_names,
  ))

  # trunk + v8
  if channel.name == 'be':
    c['schedulers'].append(Scheduler(
      name='fyi-v8',
      branch=channel.branch,
      treeStableTimer=0,
      builderNames=builder_names_v8
    ))
    c['schedulers'].append(Scheduler(
      name='fyi-trunk',
      branch="trunk",
      treeStableTimer=0,
      builderNames=trunk_dartium_builder_names
    ))

  ####### Builders

  # Add non-dartium builders
  for collection in [variants]:
    for b in utils.get_builders_from_variants(collection, slaves, []):
      c['builders'].append(b)

  # Add dartium builders
  for collection in [variants_dartium]:
    # Reboot VMs after every build
    for b in utils.get_builders_from_variants(collection, slaves, [],
                                              ActiveMaster.is_production_host):
      c['builders'].append(b)

  # trunk
  if channel.name == 'be':
    # Add non-dartium builders
    for collection in [variants_v8]:
      for b in utils.get_builders_from_variants(collection, slaves, []):
        c['builders'].append(b)

    # Add dartium builders
    for collection in [variants_dartium_trunk]:
      # Reboot VMs after every build
      for b in utils.get_builders_from_variants(
          collection, slaves, [], ActiveMaster.is_production_host):
        c['builders'].append(b)

c['builders'] = []
c['schedulers'] = []
for channel in CHANNELS:
  setup_channel(channel)

####### CHANGESOURCES

c['change_source'] = [utils.get_svn_poller()]

####### BUILDSLAVES

c['slaves'] = utils.get_slaves(c['builders'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  for status in utils.get_web_statuses():
    c['status'].append(status)

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  mail_notifiers = [
    {
      'extraRecipients' : ['ricow@google.com',
                           'kasperl@google.com',
                           'ahe@google.com'],
      'builders' : ['dart2js-linux-debug',
                    'dart2js-linux-debug-checked',
                    'dart2js-linux-debug-host-checked',
                    'dart2js-linux-debug-checked-host_checked',
                    'dart2js-linux-release-host-checked',
                    'dart2js-linux-release-checked-host-checked'],
    },
    {
      'extraRecipients' : ['ricow@google.com',
                           'erikcorry@google.com'],
      'builders' : ['dart2js-linux-release-host-checked-minified'],
    }
  ]

  for notifier in utils.get_mail_notifier_statuses(mail_notifiers):
    c['status'].append(notifier)


# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 1x the number of builds listed in console.
c['buildCacheSize'] = 60

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.dart.fyi/'
