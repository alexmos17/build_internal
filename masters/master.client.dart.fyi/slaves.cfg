# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# See master.experimental/slaves.cfg for documentation.

slaves = [
  {
    'master': 'DartFYI',
    'builder': ['dart2js-linux-debug-checked-host-checked'],
    'hostname': 'vm95-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart2js-linux-debug-checked',
                'ft-slave-linux'],
    'hostname': 'vm127-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart2js-linux-debug-host-checked'],
    'hostname': 'vm187-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart-editor-fyi-linux',
                'dart2js-chrome-linux',
                'ft-master',
                'dart2js-linux-debug',],
    'hostname': 'vm343-m3',
    'os': 'linux',
   'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['linux-distribution-support-debian_wheezy'],
    'hostname': 'vm153-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart2js-linux-release-host-checked',
                'dart2js-linux-release-checked-host-checked'],
    'hostname': 'vm159-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart2js-full-windows-1-6'],
    'hostname': 'vm77-m3',
    'os': 'win',
    'version': 'win7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart2js-chromeOnAndroid-linux'],
    'hostname': 'chromeperf02',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['vm-android-linux',
                'v8-linux-release',
                'analyzer_experimental-linux-release',
                'dart2js-linux-release',
                'dart2js-linux-release-checked-host-checked-x64'],
    'hostname': 'vm340-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart-editor-fyi-mac', 'v8-mac-release'],
    'hostname': 'vm607-m3',
    'os': 'mac',
    'version': '10.7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['ft-slave-mac'],
    'hostname': 'vm680-m3',
    'os': 'mac',
    'version': '10.7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['v8-win-release', 'dart-editor-fyi-win'],
    'hostname': 'vm210-m3',
    'os': 'win',
    'version': 'win7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dartium-linux-perf-be', 'multivm-linux-perf-be'],
    'hostname': 'build15-a3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dartium-mac-perf-be', 'multivm-mac-perf-be'],
    'hostname': 'build17-a3',
    'os': 'mac',
    'version': '10.7',
    'bits': '64'
  },
  {
    'master': 'DartFYI',
    'builder': ['dartium-windows-perf-be', 'multivm-windows-perf-be'],
    'hostname': 'build16-a3',
    'os': 'win',
    'version': 'win7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dartium-linux-build-be'],
    'hostname': 'vm10-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['dartium-mac-build-be'],
    'hostname': 'vm618-m3',
    'os': 'mac',
    'version': '10.7.5',
    'bits': '64'
  },
  {
    'master': 'DartFYI',
    'builder': ['dartium-windows-build-be'],
    'hostname': 'vm18-m3',
    'os': 'win',
    'version': 'win7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['multivm-linux-build-be'],
    'hostname': 'vm99-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['multivm-mac-build-be'],
    'hostname': 'vm676-m3',
    'os': 'mac',
    'version': '10.7.5',
    'bits': '64'
  },
  {
    'master': 'DartFYI',
    'builder': ['multivm-windows-build-be'],
    'hostname': 'vm126-m3',
    'os': 'win',
    'version': 'win7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['vm-mips-release'],
    'hostname': 'build19-a3',
    'os': 'linux',
    'version': 'debian squeeze',
    'bits': 'mips 32',
  },
  {
    'master': 'DartFYI',
    'builder': ['vm-mips-debug'],
    'hostname': 'build20-a3',
    'os': 'linux',
    'version': 'debian squeeze',
    'bits': 'mips 32',
  },
  {
    'master': 'DartFYI',
    'builder': ['dart2js-ie11-win8-html'],
    'hostname': 'vm237-m3',
    'os': 'win',
    'version': 'win8',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['pub-mac-debug'],
    'hostname': 'vm630-m3',
    'os': 'mac',
    'version': '10.8',
    'bits': '64'
  },
  {
    'master': 'DartFYI',
    'builder': ['pub-win-debug'],
    'hostname': 'vm161-m3',
    'os': 'win',
    'version': 'win7',
    'bits': '64',
  },
  {
    'master': 'DartFYI',
    'builder': ['pub-linux-debug'],
    'hostname': 'vm206-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
]


# This is hack to eliminate the need for sharing code between master and
# clients. These channels are replicated in scripts/factory/dart/channels.py.
channel_postfixes = ['-be', '-dev', '-stable', '-integration']

def valid_for_channel(builder, channel):
  """ Returns true if we have this builder on this specific channel"""
  return channel != '-integration' or 'dartium' in builder

def is_channel_builder(builder):
  """Returns true if the builder name is already specific to a channel
  (i.e. the builder ends with a channel postfix)."""
  for postfix in channel_postfixes:
    if builder.endswith(postfix):
      return True
  return False

def duplicate_builders_in_slaves(slaves):
  """Traverses a list of slaves and duplicates the builders associated with each
  slave for every channel. The channels have specified the postfix."""
  for slave in slaves:
    all_builders = []
    for builder in slave.get('builder', ()):
      if ('v8' not in builder
          and not is_channel_builder(builder)):
        for channel in channel_postfixes:
          # Some channels don't have all builders
          if valid_for_channel(builder, channel):
            all_builders.append('%s%s' % (builder, channel))
      else:
        all_builders.append(builder)
    slave['builder'] = all_builders
  return slaves

slaves = duplicate_builders_in_slaves(slaves)
