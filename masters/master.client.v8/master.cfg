# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import AnyBranchScheduler
from buildbot.scheduler import Triggerable

from master import master_utils
from master import slaves_list
from master.chromium_step import AnnotationObserver
from master.factory import annotator_factory
from master.factory import chromium_factory
from master.factory import v8_factory

import config
import master_site_config

import os

# TODO (machenbach): Set correct perf result links. See internal issue:
# https://code.google.com/p/chromium/issues/detail?id=254444
AnnotationObserver.PERF_BASE_URL = 'http://build.chromium.org/f/client/perf'

ActiveMaster = master_site_config.V8

TREE_GATE_KEEPER = ActiveMaster.is_production_host

MAIL_NOTIFIER = ActiveMaster.is_production_host

SVN_POLLER = True

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []


####### DATABASE

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

if SVN_POLLER:
  # Polls config.Master.trunk_url for changes
  v8_rev = 'http://code.google.com/p/v8/source/detail?r=%s'
  bleeding_poller = svnpoller.SVNPoller(
      svnurl='%s/branches/bleeding_edge' % config.Master.v8_url,
      pollinterval=10,
      revlinktmpl=v8_rev)

  c['change_source'] = [bleeding_poller]


####### SCHEDULERS

## configure the Schedulers
# v8 Scheduler
s_v8 = Scheduler(name='v8_src',
                 branch=None,
                 treeStableTimer=60,
                 builderNames=['V8 Linux',
                               'V8 Linux - recipe',
                               'V8 Linux - debug',
                               'V8 Linux - debug - mozilla',
                               'V8 Linux - debug - test262',
                               'V8 Linux - shared',
                               'V8 Linux64',
                               'V8 Linux64 - debug',
                               'V8 Linux64 - debug - mozilla',
                               'V8 Linux64 - debug - test262',
                               'V8 Linux - nosnap',
                               'V8 Linux - nosnap - debug',
                               'V8 Linux - nosnap - debug - mozilla',
                               'V8 Linux - nosnap - debug - test262',
                               'V8 Linux - isolates',
                               'V8 Linux - debug - isolates',
                               'V8 Linux - nosse2',
                               'V8 Linux - debug - nosse2',
                               'V8 Linux - nosse3',
                               'V8 Linux - debug - nosse3',
                               'V8 Linux - nosse4',
                               'V8 Linux - debug - nosse4',
                               'V8 Linux - deadcode',
                               'V8 Linux - interpreted regexp',
                               'V8 Linux - noi18n - debug',
                               'V8 Win32',
                               'V8 Win32 - mozilla',
                               'V8 Win32 - test262',
                               'V8 Win32 - debug - 1',
                               'V8 Win32 - debug - 2',
                               'V8 Win32 - debug - mozilla - 1',
                               'V8 Win32 - debug - mozilla - 2',
                               'V8 Win32 - debug - test262 - 1',
                               'V8 Win32 - debug - test262 - 2',
                               'V8 Win64',
                               'V8 Mac',
                               'V8 Mac - debug',
                               'V8 Mac - debug - mozilla',
                               'V8 Linux - arm - sim',
                               'V8 Linux - arm - sim - mozilla',
                               'V8 Linux - arm - sim - debug',
                               'V8 Linux - arm - sim - debug - mozilla - 1',
                               'V8 Linux - arm - sim - debug - mozilla - 2',
                               'V8 Linux - arm - sim - debug - test262',
                               'V8 Linux - arm - sim - novfp3',
                               'V8 Linux - arm - sim - debug - novfp3',
                               'V8 Linux - mips - sim',
                               'V8 Fuzzer',
                               'V8 Deopt Fuzzer',
                               'V8 GC Stress - 1',
                               'V8 GC Stress - 2',
                               'V8 GC Stress - 3',
                               'Chrome Win7 Perf',
                               'Chrome Mac10.6 Perf',
                               'Chrome Linux Perf',
                               'Chrome Browser Tests',
                               'Chrome Linux Interactive - dbg',
                               'V8 Linux64 Heapcheck',
                               'Webkit',
                               'Webkit Mac',
                               'Webkit Linux',
                               'Webkit Linux 64',
                               'Webkit Linux - dbg',
                               'NaCl V8 Linux',
                               'NaCl V8 Linux64 - stable',
                               'NaCl V8 Linux64 - canary'])

# Scheduler to trigger slaves that depend on the release build.
s_v8_arm_builder = Scheduler(name='v8_arm_builder',
                             branch=None,
                             treeStableTimer=60,
                             builderNames=['V8 Arm - builder', 'V8 Arm'])

# These builders run nightly.
s_v8_nightly = Nightly(name='v8_thrice_nightly',
                       branch=None,
                       builderNames=['V8 Linux - full debug',
                                     'V8 Linux - nosnap - full debug',
                                     'V8 Win32 - full debug',
                                     'V8 Mac - full debug',
                                     'V8 Random Deopt Fuzzer - debug',
                                     'Webkit - dbg',
                                     'Webkit Mac - dbg',
                                     'Chrome Browser Tests - dbg'],
                       hour=[13],
                       minute=30)

c['schedulers'] = [s_v8, s_v8_nightly, s_v8_arm_builder]

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = lambda: v8_factory.V8Factory('v8', target_platform='linux2')

m_linux64 = lambda: v8_factory.V8Factory('v8', target_platform='linux64')

m_win32 = lambda: v8_factory.V8Factory('v8', target_platform='win32')

m_mac = lambda: v8_factory.V8Factory('v8', target_platform='darwin')

# Note target platform is still win32 - because this is how it is done in scons.
# This is intentionally left as a seperate builder in case this changes.
m_win64 = lambda: v8_factory.V8Factory('v8', target_platform='win32')

m_annotator = annotator_factory.AnnotatorFactory()

v8_arm_builder_archive = ('http://%s/'
                         'v8-arm-builder/chrome_staging/'
                         'full-build-linux.zip' %
                         'vm54-m3')


crosstool_prefix = ('/usr/bin/arm-linux-gnueabi')


F = chromium_factory.ChromiumFactory
def win(): return F('src/build', 'win32')
def win_ninja(): return F('src/out', 'win32')
def mac(): return F('src/out', 'darwin')
def linux(): return F('src/out', 'linux2')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

linux_default_opts = ['buildbot', '--build-tool=make', '--src-dir=v8']
nacl_sdk_root_dir = os.path.join('..', 'nacl_sdk', 'pepper_current')

debug_properties = {
    'gclient_env': {
        'GYP_DEFINES': 'v8_optimized_debug=0',
    },
}

optimized_debug_properties = {
    'gclient_env': {
        'GYP_DEFINES': 'v8_optimized_debug=1',
    },
}


f_v8_linux = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',  # Release is also the default, but let's be explicit.
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_enable_verify_heap=1'},
    },
    tests=['v8testing_tc', 'v8initializers', 'test262', 'mozilla', 'presubmit',
           'webkit'],
    target_arch='ia32')


f_v8_linux_shared = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'component=shared_library'},
    },
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_interpreted_regexp = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_interpreted_regexp=1'},
    },
    tests=['v8testing_tc'],
    target_arch='ia32')

f_v8_linux_noi18n_debug = m_linux().V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'v8_enable_i18n_support=0 v8_optimized_debug=1',
      },
      'test_options': ['--noi18n'],
    },
    tests=['v8testing_tc', 'webkit', 'mozilla', 'test262'],
    target_arch='ia32')

f_v8_linux_debug = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['v8testing_tc', 'simpleleak'],
    target_arch='ia32')

f_v8_linux_debug_mozilla = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32')

f_v8_linux_debug_test262 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['test262'],
    target_arch='ia32')

f_v8_linux_full_debug = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing_tc', 'webkit', 'mozilla', 'test262'],
    target_arch='ia32')

f_v8_linux64 = m_linux64().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing_tc', 'v8initializers', 'test262', 'mozilla', 'webkit'],
    target_arch='x64')

f_v8_linux64_debug = m_linux64().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['v8testing_tc', 'webkit'],
    target_arch='x64')

f_v8_linux64_debug_mozilla = m_linux64().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['mozilla'],
    target_arch='x64')

f_v8_linux64_debug_test262 = m_linux64().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['test262'],
    target_arch='x64')

f_v8_linux_nosnap = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_use_snapshot=false'},
    },
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_nosnap_debug = m_linux().V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'v8_use_snapshot=false v8_optimized_debug=1'
      },
    },
    tests=['v8testing_tc'],
    target_arch='ia32')

f_v8_linux_nosnap_debug_mozilla = m_linux().V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'v8_use_snapshot=false v8_optimized_debug=1'
      },
    },
    tests=['mozilla'],
    target_arch='ia32')

f_v8_linux_nosnap_debug_test262 = m_linux().V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'v8_use_snapshot=false v8_optimized_debug=1'
      },
    },
    tests=['test262'],
    target_arch='ia32')

f_v8_linux_nosnap_full_debug = m_linux().V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES': 'v8_use_snapshot=false v8_optimized_debug=0'
      },
    },
    tests=['v8testing_tc', 'mozilla', 'test262', 'webkit'],
    target_arch='ia32')

f_v8_linux_arm_sim = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing_tc', 'test262'],
    target_arch='arm')

f_v8_linux_arm_sim_mozilla = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['mozilla'],
    target_arch='arm')

f_v8_linux_arm_sim_debug = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['v8testing_tc'],
    target_arch='arm')

f_v8_linux_arm_sim_debug_mozilla = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['mozilla'],
    target_arch='arm')

f_v8_linux_arm_sim_debug_mozilla_1 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['mozilla'],
    target_arch='arm',
    shard_count=2,
    shard_run=1)

f_v8_linux_arm_sim_debug_mozilla_2 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['mozilla'],
    target_arch='arm',
    shard_count=2,
    shard_run=2)

f_v8_linux_arm_sim_debug_test262 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['test262'],
    target_arch='arm')

f_v8_linux_arm_sim_novfp3 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_can_use_vfp3_instructions=false'},
    },
    shell_flags='--noenable-vfp3',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target='Release',
    target_arch='arm')

f_v8_linux_arm_sim_debug_novfp3 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties={
      'gclient_env': {
        'GYP_DEFINES':
            'v8_can_use_vfp3_instructions=false v8_optimized_debug=1'
      },
    },
    shell_flags='--noenable-vfp3',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target='Debug',
    target_arch='arm')

f_v8_linux_mips_sim = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262'],
    target_arch='mipsel')

win_default_opts=['--build-tool=vs', '--src-dir=v8']

f_v8_win32 = m_win32().V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['v8testing_tc', 'webkit'],
    target_arch='ia32')

f_v8_win32_mozilla = m_win32().V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['mozilla'],
    target_arch='ia32')

f_v8_win32_test262 = m_win32().V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['test262'],
    target_arch='ia32')

f_v8_win32_debug_1 = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=optimized_debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['v8testing_tc', 'webkit'],
    target_arch='ia32',
    shard_count=2,
    shard_run=1)

f_v8_win32_debug_2 = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=optimized_debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['v8testing_tc', 'webkit'],
    target_arch='ia32',
    shard_count=2,
    shard_run=2)

f_v8_win32_debug_mozilla_1 = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=optimized_debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32',
    shard_count=2,
    shard_run=1)

f_v8_win32_debug_mozilla_2 = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=optimized_debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32',
    shard_count=2,
    shard_run=2)

f_v8_win32_debug_test262_1 = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=optimized_debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['test262'],
    target_arch='ia32',
    shard_count=2,
    shard_run=1)

f_v8_win32_debug_test262_2 = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=optimized_debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['test262'],
    target_arch='ia32',
    shard_count=2,
    shard_run=2)

f_v8_win32_full_debug = m_win32().V8Factory(
    options=win_default_opts,
    factory_properties=debug_properties,
    project='build\\all.sln',
    target='Debug',
    tests=['v8testing_tc', 'webkit', 'mozilla', 'test262'],
    target_arch='ia32')

f_v8_win64 = m_win64().V8Factory(
    options=win_default_opts,
    project='build\\all.sln',
    target='Release',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='x64')

mac_default_opts=['--solution=build/all.xcodeproj',
                  '--build-tool=xcode',
                  '--src-dir=v8']

f_v8_mac = m_mac().V8Factory(
    options=mac_default_opts,
    target='Release',
    tests=['v8testing_tc', 'test262', 'mozilla', 'webkit'],
    target_arch='ia32')

f_v8_mac_debug = m_mac().V8Factory(
    options=mac_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['v8testing_tc', 'test262', 'webkit'],
    target_arch='ia32')

f_v8_mac_debug_mozilla = m_mac().V8Factory(
    options=mac_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['mozilla'],
    target_arch='ia32')

f_v8_mac_full_debug = m_mac().V8Factory(
    options=mac_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing_tc', 'test262', 'webkit', 'mozilla'],
    target_arch='ia32')

f_v8_linux_isolates = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    isolates=True,
    tests=['v8testing_tc'],
    target_arch='ia32')

f_v8_linux_debug_isolates = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    isolates=True,
    tests=['v8testing_tc'],
    target_arch='ia32')

f_v8_linux_nosse2 = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    shell_flags='--noenable-sse2',
    tests=['v8testing_tc', 'test262', 'mozilla', 'gcmole'],
    target_arch='ia32')

f_v8_linux_debug_nosse2 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    shell_flags='--noenable-sse2',
    tests=['v8testing_tc', 'test262', 'mozilla', 'gcmole'],
    target_arch='ia32')

f_v8_linux_nosse3 = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    shell_flags='--noenable-sse3',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_debug_nosse3 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    shell_flags='--noenable-sse3',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_nosse4 = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    shell_flags='--noenable-sse4-1',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_debug_nosse4 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    shell_flags='--noenable-sse4-1',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_linux_deadcode = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    shell_flags='--dead-code-elimination',
    tests=['v8testing_tc', 'test262', 'mozilla'],
    target_arch='ia32')

f_v8_fuzz = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    tests=['fuzz'],
    target_arch='x64')

f_v8_linux_deopt_fuzzer = m_linux().V8Factory(
    options=linux_default_opts,
    target='Release',
    factory_properties={
      'test_options': ['--coverage=0.5', '--distribution-mode=smooth'],
    },
    tests=['deopt'],
    target_arch='ia32')

f_v8_linux_random_deopt_fuzzer_debug = m_linux().V8Factory(
    options=linux_default_opts,
    target='Debug',
    factory_properties = dict(optimized_debug_properties, **{
      'test_options': ['--coverage=0.45', '--coverage-lift=50',
                       '--distribution-mode=random'],
    }),
    tests=['deopt'],
    target_arch='ia32')

f_v8_gcstress_1 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    shell_flags='--gc-interval=500 --stress-compaction ' +
                '--concurrent-recompilation-queue-length=64 ' +
                '--concurrent-recompilation-delay=500 --concurrent-recompilation',
    tests=['mjsunit', 'webkit'],
    target_arch='ia32',
    shard_count=3,
    shard_run=1)

f_v8_gcstress_2 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    shell_flags='--gc-interval=500 --stress-compaction ' +
                '--concurrent-recompilation-queue-length=64 ' +
                '--concurrent-recompilation-delay=500 --concurrent-recompilation',
    tests=['mjsunit', 'webkit'],
    target_arch='ia32',
    shard_count=3,
    shard_run=2)

f_v8_gcstress_3 = m_linux().V8Factory(
    options=linux_default_opts,
    factory_properties=optimized_debug_properties,
    target='Debug',
    shell_flags='--gc-interval=500 --stress-compaction ' +
                '--concurrent-recompilation-queue-length=64 ' +
                '--concurrent-recompilation-delay=500 --concurrent-recompilation',
    tests=['mjsunit', 'webkit'],
    target_arch='ia32',
    shard_count=3,
    shard_run=3)

perf_tests = ['page_cycler_bloat', 'page_cycler_moz', 'page_cycler_morejs',
              'page_cycler_intl_ar_fa_he', 'page_cycler_intl_es_fr_pt-BR',
              'page_cycler_intl_hi_ru', 'page_cycler_intl_ja_zh',
              'page_cycler_intl_ko_th_vi', 'page_cycler_typical_25',
              'page_cycler_dhtml', 'page_cycler_indexeddb', 'startup',
              'dom_perf', 'tab_switching_top_10', 'sunspider', 'octane',
              'dromaeo', 'memory', 'kraken']

f_chromium_rel_perf_win7_dual_v8 = win().ChromiumV8LatestFactory(
    project='all.sln;chromium_builder',
    tests=perf_tests,
    compile_timeout=7200,
    factory_properties={
        'perf_id': 'chromium-rel-win7-dual-v8',
        'gclient_env': {'GYP_DEFINES': 'fastbuild=1'},
        'show_perf_results': True,
        'show_v8_revision': True,
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_chromium_dbg_linux_interactive_v8 = linux().ChromiumV8LatestFactory(
    tests=['interactive_ui_tests'],
    options=['interactive_ui_tests'],
    factory_properties={
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_chromium_rel_mac6_perf_v8 = mac().ChromiumV8LatestFactory(
    tests=perf_tests,
    options=['--build-tool=ninja', '--compiler=goma-clang', '--',
             'chromium_builder_perf'],
    factory_properties={
        'perf_id': 'chromium-rel-mac6-v8',
        'show_perf_results': True,
        'show_v8_revision': True,
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'fastbuild=1 clang_use_chrome_plugins=0',
         },
         'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_chromium_rel_linux_perf_v8 = linux().ChromiumV8LatestFactory(
    tests=perf_tests,
    options=['--build-tool=ninja', '--', 'chromium_builder_perf'],
    factory_properties={
        'perf_id': 'chromium-rel-linux-v8',
        'show_perf_results': True,
        'show_v8_revision': True,
        'no_gclient_revision': True,
        'primary_repo': 'v8_',
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'target_arch=x64 component=static_library '
                           'linux_strip_binary=1',
         },
         'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

webkit_expectations_path = os.path.join('src', 'v8', 'tools', 'blink_tests', 
                                        'TestExpectations')
webkit_test_options = [
    '--additional-expectations %s' % webkit_expectations_path,
    '--ignore-flaky-tests=unexpected',
    '--ignore-builder-category=deps',
]

# Don't publish test results from local bots to avoid builer name clashes.
if ActiveMaster.is_production_host:
  webkit_test_results_server = 'test-results.appspot.com'
else:
  webkit_test_results_server = None

webkit_factory_properties = {
    # TODO(machenbach): Disabled until chromium issue 249341 is resolved.
    #'archive_webkit_results': ActiveMaster.is_production_host,
    'generate_gtest_json': True,
    'primary_repo': 'v8_',
    'no_gclient_revision': True,
    'test_results_server': webkit_test_results_server,
    'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    'webkit_test_options': webkit_test_options
}

f_webkit_rel_v8 = win_ninja().ChromiumV8LatestFactory(
    tests=['webkit', 'webkit_unit_tests'],
    options=['--build-tool=ninja', 'all_webkit'],
    compile_timeout=3600,
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {
            'GYP_GENERATORS':'ninja',
            'GYP_DEFINES': 'use_ash=0 use_aura=0',
        },
    }))

f_webkit_dbg_v8 = win_ninja().ChromiumV8LatestFactory(
    tests=['webkit', 'webkit_unit_tests'],
    target='Debug',
    options=['--build-tool=ninja', 'all_webkit'],
    compile_timeout=3600,
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {
            'GYP_GENERATORS':'ninja',
            'GYP_DEFINES': 'use_ash=0 use_aura=0 v8_optimized_debug=1',
        },
    }))

f_webkit_rel_mac_v8 = mac().ChromiumV8LatestFactory(
    tests=['webkit', 'webkit_unit_tests'],
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'clang_use_chrome_plugins=0',
        },
    }),
    options=['--build-tool=ninja', '--compiler=goma-clang', '--',
             'all_webkit'])

f_webkit_dbg_mac_v8 = mac().ChromiumV8LatestFactory(
    tests=['webkit', 'webkit_unit_tests'],
    target='Debug',
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'clang_use_chrome_plugins=0 v8_optimized_debug=1',
        },
    }),
    options= ['--build-tool=ninja', '--compiler=goma-clang', '--',
              'all_webkit'])

f_webkit_rel_linux_v8 = linux().ChromiumV8LatestFactory(
    tests=['webkit', 'webkit_unit_tests'],
    options=['--build-tool=ninja', 'all_webkit'],
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {'GYP_GENERATORS': 'ninja'},
    }))

f_webkit_dbg_linux_v8 = linux().ChromiumV8LatestFactory(
    target='Debug',
    tests=['webkit', 'webkit_unit_tests'],
    options=['--build-tool=ninja', 'all_webkit'],
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {
            'GYP_GENERATORS': 'ninja',
            'GYP_DEFINES': 'v8_optimized_debug=1',
        },
    }))

f_webkit_rel_linux64_v8 = linux().ChromiumV8LatestFactory(
    tests=['webkit', 'webkit_unit_tests'],
    options=['--build-tool=ninja', 'all_webkit'],
    factory_properties=dict(webkit_factory_properties, **{
        'gclient_env': {'GYP_GENERATORS': 'ninja'},
    }))

f_v8_arm_builder = m_linux().V8Factory(
    target='Release',
    tests=[],
    compile_timeout=3600,
    options=linux_default_opts + ['--crosstool', crosstool_prefix],
    factory_properties={
      'archive_build': True,
      'gclient_env': {
        'CXX': '%s-g++' % crosstool_prefix,
        'LINK': '%s-g++' % crosstool_prefix,
      }
    },
    target_arch='arm')

# TODO(machenbach): Enable i18n as soon as icu dynamically ensures the -m32
# compilation option.
f_v8_arm = m_linux().V8Factory(
    target='Release',
    tests=['v8testing_tc', 'webkit'],
    compile_timeout=3600,
    options=linux_default_opts,
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_enable_i18n_support=0'},
      'test_options': ['--noi18n'],
    },
    target_arch='arm')

f_browser_tests =  linux().ChromiumV8LatestFactory(
    tests=['check_deps',
           'googleurl',
           'media',
           'ppapi_unittests',
           'printing',
           'remoting',
           'browser_tests',
           'content_browsertests',
           'unit',
           'gpu',
           'base_unittests',
           'net',
           'crypto_unittests',
           'cacheinvalidation_unittests',
           'jingle'],
    factory_properties={
      'generate_gtest_json': True,
      'no_gclient_revision': True,
      'primary_repo': 'v8_',
      'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })


f_browser_tests_debug =  linux().ChromiumV8LatestFactory(
    target='Debug',
    tests=['check_deps',
           'googleurl',
           'media',
           'ppapi_unittests',
           'printing',
           'remoting',
           'browser_tests',
           'content_browsertests',
           'unit',
           'gpu',
           'base_unittests',
           'net',
           'crypto_unittests',
           'cacheinvalidation_unittests',
           'jingle'],
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'v8_optimized_debug=0'},
      'generate_gtest_json': True,
      'no_gclient_revision': True,
      'primary_repo': 'v8_',
      'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

heapcheck_gyp_defines = (
  'v8_optimized_debug=1 '
  'linux_use_tcmalloc=1 '
  'linux_use_heapchecker=1 '
  'linux_keep_shadow_stacks=1 '
  'werror= '
)

f_chromium_dbg_linux_heapcheck_v8 = linux().ChromiumV8LatestFactory(
  target='Debug',
  options=[
    'all_webkit',
    'base_unittests',
    'unit_tests',
    'net_unittests',
  ],
  tests=[
    'heapcheck_base_unittests',
    'heapcheck_unit',
    'heapcheck_net',
  ],
  factory_properties={
    'gclient_env': {
      'GYP_DEFINES' : heapcheck_gyp_defines,
    },
    'no_gclient_revision': True,
    'primary_repo': 'v8_',
    'safesync_url': 'http://chromium-status.appspot.com/lkgr',
  },
)

# TODO(machenbach): Add MS Windows builder for nacl/v8.
f_nacl_v8_linux = m_linux().V8Factory(
    command_prefix='tools/nacl-run.py',
    options=['--build-tool=make', '--', 'nacl_ia32.release'],
    target='release',
    tests=['v8testing'],
    target_arch='nacl_ia32',
    factory_properties={
      'update_nacl_sdk': 'stable',
      'compile_env': {'NACL_SDK_ROOT': nacl_sdk_root_dir},
      'gclient_env': {'GYP_DEFINES': 'v8_enable_i18n_support=0'},
      'test_env': {'NACL_SDK_ROOT': nacl_sdk_root_dir},
      'test_options': ['--buildbot=False', '--no-presubmit', '--noi18n']
    })

f_nacl_v8_linux64 = m_linux64().V8Factory(
    command_prefix='tools/nacl-run.py',
    options=['--build-tool=make', '--', 'nacl_x64.release'],
    target='release',
    tests=['v8testing'],
    target_arch='nacl_x64',
    factory_properties={
      'update_nacl_sdk': 'stable',
      'compile_env': {'NACL_SDK_ROOT': nacl_sdk_root_dir},
      'gclient_env': {'GYP_DEFINES': 'v8_enable_i18n_support=0'},
      'test_env': {'NACL_SDK_ROOT': nacl_sdk_root_dir},
      'test_options': ['--buildbot=False', '--no-presubmit', '--noi18n']
    })
    
f_nacl_v8_linux64_canary = m_linux64().V8Factory(
    command_prefix='tools/nacl-run.py',
    options=['--build-tool=make', '--', 'nacl_x64.release'],
    target='release',
    tests=['v8testing'],
    target_arch='nacl_x64',
    factory_properties={
      'update_nacl_sdk': 'canary',
      'compile_env': {'NACL_SDK_ROOT': nacl_sdk_root_dir},
      'gclient_env': {'GYP_DEFINES': 'v8_enable_i18n_support=0'},
      'test_env': {'NACL_SDK_ROOT': nacl_sdk_root_dir},
      'test_options': ['--buildbot=False', '--no-presubmit', '--noi18n']
    })

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_v8_linux = {
  'name': 'V8 Linux',
  'builddir': 'v8-linux',
  'factory': f_v8_linux,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_recipe = {
  'name': 'V8 Linux - recipe',
  'factory': m_annotator.BaseFactory(
      'v8',
      {
        'build_config': 'Release',
        'bits': 32,
      }),
  'slavebuilddir': 'v8-linux-recipe',
  'category': '08Misc',
  'auto_reboot' : False,
}

b_v8_linux_interpreted_regexp = {
  'name': 'V8 Linux - interpreted regexp',
  'builddir': 'v8-linux-interpreted-regexp',
  'factory': f_v8_linux_interpreted_regexp,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_noi18n_debug = {
  'name': 'V8 Linux - noi18n - debug',
  'builddir': 'v8-linux-noi18n-debug',
  'factory': f_v8_linux_noi18n_debug,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug = {
  'name': 'V8 Linux - debug',
  'builddir': 'v8-linux-debug',
  'factory': f_v8_linux_debug,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_mozilla = {
  'name': 'V8 Linux - debug - mozilla',
  'builddir': 'v8-linux-debug-mozilla',
  'factory': f_v8_linux_debug_mozilla,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_test262 = {
  'name': 'V8 Linux - debug - test262',
  'builddir': 'v8-linux-debug-test262',
  'factory': f_v8_linux_debug_test262,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_full_debug = {
  'name': 'V8 Linux - full debug',
  'builddir': 'v8-linux-full-debug',
  'factory': f_v8_linux_full_debug,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_shared = {
  'name': 'V8 Linux - shared',
  'builddir': 'v8-linux-shared',
  'factory': f_v8_linux_shared,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux64 = {
  'name': 'V8 Linux64',
  'builddir': 'v8-linux64',
  'factory': f_v8_linux64,
  'category': '02Linux64|testers',
  'auto_reboot' : False,
}

b_v8_linux64_debug = {
  'name': 'V8 Linux64 - debug',
  'builddir': 'v8-linux64-debug',
  'factory': f_v8_linux64_debug,
  'category': '02Linux64|testers',
  'auto_reboot' : False,
}

b_v8_linux64_debug_mozilla = {
  'name': 'V8 Linux64 - debug - mozilla',
  'builddir': 'v8-linux64-debug-mozilla',
  'factory': f_v8_linux64_debug_mozilla,
  'category': '02Linux64|testers',
  'auto_reboot' : False,
}

b_v8_linux64_debug_test262 = {
  'name': 'V8 Linux64 - debug - test262',
  'builddir': 'v8-linux64-debug-test262',
  'factory': f_v8_linux64_debug_test262,
  'category': '02Linux64|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap = {
  'name': 'V8 Linux - nosnap',
  'builddir': 'v8-linux-nosnap',
  'factory': f_v8_linux_nosnap,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_debug = {
  'name': 'V8 Linux - nosnap - debug',
  'builddir': 'v8-linux-nosnap-debug',
  'factory': f_v8_linux_nosnap_debug,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_debug_mozilla = {
  'name': 'V8 Linux - nosnap - debug - mozilla',
  'builddir': 'v8-linux-nosnap-debug-mozilla',
  'factory': f_v8_linux_nosnap_debug_mozilla,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_debug_test262 = {
  'name': 'V8 Linux - nosnap - debug - test262',
  'builddir': 'v8-linux-nosnap-debug-test262',
  'factory': f_v8_linux_nosnap_debug_test262,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosnap_full_debug = {
  'name': 'V8 Linux - nosnap - full debug',
  'builddir': 'v8-linux-nosnap-full-debug',
  'factory': f_v8_linux_nosnap_full_debug,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim = {
  'name': 'V8 Linux - arm - sim',
  'builddir': 'v8-linux-arm-sim',
  'factory': f_v8_linux_arm_sim,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_mozilla = {
  'name': 'V8 Linux - arm - sim - mozilla',
  'builddir': 'v8-linux-arm-sim-mozilla',
  'factory': f_v8_linux_arm_sim_mozilla,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug = {
  'name': 'V8 Linux - arm - sim - debug',
  'builddir': 'v8-linux-arm-sim-debug',
  'factory': f_v8_linux_arm_sim_debug,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug_mozilla_1 = {
  'name': 'V8 Linux - arm - sim - debug - mozilla - 1',
  'builddir': 'v8-linux-arm-sim-debug-mozilla-1',
  'factory': f_v8_linux_arm_sim_debug_mozilla_1,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug_mozilla_2 = {
  'name': 'V8 Linux - arm - sim - debug - mozilla - 2',
  'builddir': 'v8-linux-arm-sim-debug-mozilla-2',
  'factory': f_v8_linux_arm_sim_debug_mozilla_2,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug_test262 = {
  'name': 'V8 Linux - arm - sim - debug - test262',
  'builddir': 'v8-linux-arm-sim-debug-test262',
  'factory': f_v8_linux_arm_sim_debug_test262,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_novfp3 = {
  'name': 'V8 Linux - arm - sim - novfp3',
  'builddir': 'v8-linux-arm-sim-novfp3',
  'factory': f_v8_linux_arm_sim_novfp3,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_arm_sim_debug_novfp3 = {
  'name': 'V8 Linux - arm - sim - debug - novfp3',
  'builddir': 'v8-linux-arm-sim-debug-novfp3',
  'factory': f_v8_linux_arm_sim_debug_novfp3,
  'category': '06Simulators|testers',
  'auto_reboot' : False,
}

b_v8_linux_mips_sim = {
  'name': 'V8 Linux - mips - sim',
  'builddir': 'v8-linux-mips-sim',
  'factory': f_v8_linux_mips_sim,
  'category': '06Simulators',
  'auto_reboot' : False,
}

b_v8_win32 = {
  'name': 'V8 Win32',
  'builddir': 'v8-win32',
  'factory': f_v8_win32,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_mozilla = {
  'name': 'V8 Win32 - mozilla',
  'builddir': 'win32-mozilla',
  'factory': f_v8_win32_mozilla,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_test262 = {
  'name': 'V8 Win32 - test262',
  'builddir': 'win32-test262',
  'factory': f_v8_win32_test262,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

# Non standard builddir because of path length limit (Test262 tests)
# for all win32 debug slaves.
b_v8_win32_debug_1 = {
  'name': 'V8 Win32 - debug - 1',
  'builddir': 'win-dbg1',
  'factory': f_v8_win32_debug_1,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_2 = {
  'name': 'V8 Win32 - debug - 2',
  'builddir': 'win-dbg2',
  'factory': f_v8_win32_debug_2,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_mozilla_1 = {
  'name': 'V8 Win32 - debug - mozilla - 1',
  'builddir': 'w32-d-moz1',
  'factory': f_v8_win32_debug_mozilla_1,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_mozilla_2 = {
  'name': 'V8 Win32 - debug - mozilla - 2',
  'builddir': 'w32-d-moz2',
  'factory': f_v8_win32_debug_mozilla_2,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_test262_1 = {
  'name': 'V8 Win32 - debug - test262 - 1',
  'builddir': 'w32-d-t2621',
  'factory': f_v8_win32_debug_test262_1,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_debug_test262_2 = {
  'name': 'V8 Win32 - debug - test262 - 2',
  'builddir': 'w32-d-t2622',
  'factory': f_v8_win32_debug_test262_2,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_win32_full_debug = {
  'name': 'V8 Win32 - full debug',
  'builddir': 'win-full-dbg',
  'factory': f_v8_win32_full_debug,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_mac = {
  'name': 'V8 Mac',
  'builddir': 'v8-mac',
  'factory': f_v8_mac,
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_mac_debug = {
  'name': 'V8 Mac - debug',
  'builddir': 'v8-mac-debug',
  'factory': f_v8_mac_debug,
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_mac_debug_mozilla = {
  'name': 'V8 Mac - debug - mozilla',
  'builddir': 'v8-mac-debug-mozilla',
  'factory': f_v8_mac_debug_mozilla,
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_mac_full_debug = {
  'name': 'V8 Mac - full debug',
  'builddir': 'v8-mac-full-debug',
  'factory': f_v8_mac_full_debug,
  'category': '04Mac|testers',
  'auto_reboot' : False,
}

b_v8_win64 = {
  'name': 'V8 Win64',
  'builddir': 'v8-win64',
  'factory': f_v8_win64,
  'category': '03Windows|testers',
  'auto_reboot' : False,
}

b_v8_linux_isolates = {
  'name': 'V8 Linux - isolates',
  'builddir': 'v8-linux-isolates',
  'factory': f_v8_linux_isolates,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_isolates = {
  'name': 'V8 Linux - debug - isolates',
  'builddir': 'v8-linux-debug-isolates',
  'factory': f_v8_linux_debug_isolates,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosse2 = {
  'name': 'V8 Linux - nosse2',
  'builddir': 'v8-linux-nosse2',
  'factory': f_v8_linux_nosse2,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_nosse2 = {
  'name': 'V8 Linux - debug - nosse2',
  'builddir': 'v8-linux-debug-nosse2',
  'factory': f_v8_linux_debug_nosse2,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosse3 = {
  'name': 'V8 Linux - nosse3',
  'builddir': 'v8-linux-nosse3',
  'factory': f_v8_linux_nosse3,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_nosse3 = {
  'name': 'V8 Linux - debug - nosse3',
  'builddir': 'v8-linux-debug-nosse3',
  'factory': f_v8_linux_debug_nosse3,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_nosse4 = {
  'name': 'V8 Linux - nosse4',
  'builddir': 'v8-linux-nosse4',
  'factory': f_v8_linux_nosse4,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_debug_nosse4 = {
  'name': 'V8 Linux - debug - nosse4',
  'builddir': 'v8-linux-debug-nosse4',
  'factory': f_v8_linux_debug_nosse4,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_linux_deadcode = {
  'name': 'V8 Linux - deadcode',
  'builddir': 'v8-linux-deadcode',
  'factory': f_v8_linux_deadcode,
  'category': '01Linux|testers',
  'auto_reboot' : False,
}

b_v8_fuzz = {
  'name': 'V8 Fuzzer',
  'builddir': 'v8-fuzz',
  'factory': f_v8_fuzz,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_v8_linux_deopt_fuzzer = {
  'name': 'V8 Deopt Fuzzer',
  'builddir': 'v8-linux-deopt-fuzzer',
  'factory': f_v8_linux_deopt_fuzzer,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_v8_linux_random_deopt_fuzzer_debug = {
  'name': 'V8 Random Deopt Fuzzer - debug',
  'builddir': 'v8-linux-random-deopt-fuzzer-debug',
  'factory': f_v8_linux_random_deopt_fuzzer_debug,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_v8_gcstress_1 = {
  'name': 'V8 GC Stress - 1',
  'builddir': 'v8-gcstress-1',
  'factory': f_v8_gcstress_1,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_v8_gcstress_2 = {
  'name': 'V8 GC Stress - 2',
  'builddir': 'v8-gcstress-2',
  'factory': f_v8_gcstress_2,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_v8_gcstress_3 = {
  'name': 'V8 GC Stress - 3',
  'builddir': 'v8-gcstress-3',
  'factory': f_v8_gcstress_3,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_browser_rel_v8 = {
  'name': 'Chrome Browser Tests',
  'builddir': 'browser-rel-v8',
  'factory': f_browser_tests,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_browser_dbg_v8 = {
  'name': 'Chrome Browser Tests - dbg',
  'builddir': 'browser-dbg-v8',
  'factory': f_browser_tests_debug,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_chromium_dbg_linux_interactive_v8 = {
  'name': 'Chrome Linux Interactive - dbg',
  'builddir': 'chromium-dbg-linux-interactive-v8',
  'factory': f_chromium_dbg_linux_interactive_v8,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_chromium_dbg_linux_heapcheck = {
  'name': 'V8 Linux64 Heapcheck',
  'builddir': 'chromium-dbg-linux-heapcheck-v8',
  'factory': f_chromium_dbg_linux_heapcheck_v8,
  'category': '08Misc',
  'auto_reboot': False,
}

b_chromium_rel_win7_perf_dual_v8 = {
  'name': 'Chrome Win7 Perf',
  'builddir': 'chromium-rel-win7-perf-dual-v8',
  'factory': f_chromium_rel_perf_win7_dual_v8,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_chromium_rel_mac6_perf_v8 = {
  'name': 'Chrome Mac10.6 Perf',
  'builddir': 'chromium-rel-mac6-perf-v8',
  'factory': f_chromium_rel_mac6_perf_v8,
  'category': '08Misc',
  'auto_reboot' : False,
}

b_chromium_rel_linux_perf_v8 = {
  'name': 'Chrome Linux Perf',
  'builddir': 'chromium-rel-linux-perf-v8',
  'factory': f_chromium_rel_linux_perf_v8,
  'category': '08Misc',
  'auto_reboot' : False,
}


b_webkit_rel_v8 = {
  'name': 'Webkit',
  'builddir': 'webkit-rel-v8',
  'factory': f_webkit_rel_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_webkit_dbg_v8 = {
  'name': 'Webkit - dbg',
  'builddir': 'webkit-dbg-v8',
  'factory': f_webkit_dbg_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_webkit_rel_mac_v8 = {
  'name': 'Webkit Mac',
  'builddir': 'webkit-rel-mac-v8',
  'factory': f_webkit_rel_mac_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_webkit_dbg_mac_v8 = {
  'name': 'Webkit Mac - dbg',
  'builddir': 'webkit-dbg-mac-v8',
  'factory': f_webkit_dbg_mac_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_webkit_rel_linux_v8 = {
  'name': 'Webkit Linux',
  'builddir': 'webkit-rel-linux-v8',
  'factory': f_webkit_rel_linux_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_webkit_dbg_linux_v8 = {
  'name': 'Webkit Linux - dbg',
  'builddir': 'webkit-dbg-linux-v8',
  'factory': f_webkit_dbg_linux_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_webkit_rel_linux64_v8 = {
  'name': 'Webkit Linux 64',
  'builddir': 'webkit-rel-linux64-v8',
  'factory': f_webkit_rel_linux64_v8,
  'category': '07Webkit',
  'auto_reboot' : False,
}

b_v8_arm_builder = {
  'name': 'V8 Arm - builder',
  'builddir': 'v8-arm-builder',
  'factory': f_v8_arm_builder,
  'category': '05Arm',
  'auto_reboot' : False,
}

b_v8_arm = {
  'name': 'V8 Arm',
  'builddir': 'v8-arm',
  'factory': f_v8_arm,
  'category': '05Arm',
  'auto_reboot' : False,
}

b_nacl_v8_linux = {
  'name': 'NaCl V8 Linux',
  'builddir': 'nacl-v8-linux',
  'factory': f_nacl_v8_linux,
  'category': '09NaCl',
  'auto_reboot' : False,
}

b_nacl_v8_linux64_canary = {
  'name': 'NaCl V8 Linux64 - canary',
  'builddir': 'nacl-v8-linux64-canary',
  'factory': f_nacl_v8_linux64_canary,
  'category': '09NaCl',
  'auto_reboot' : False,
}

b_nacl_v8_linux64_stable = {
  'name': 'NaCl V8 Linux64 - stable',
  'builddir': 'nacl-v8-linux64',
  'factory': f_nacl_v8_linux64,
  'category': '09NaCl',
  'auto_reboot' : False,
}

c['builders'] = [b_v8_linux,
                 b_v8_linux_debug,
                 b_v8_linux_debug_mozilla,
                 b_v8_linux_debug_test262,
                 b_v8_linux_shared,
                 b_v8_linux64,
                 b_v8_linux64_debug,
                 b_v8_linux64_debug_mozilla,
                 b_v8_linux64_debug_test262,
                 b_v8_linux_nosnap,
                 b_v8_linux_nosnap_debug,
                 b_v8_linux_nosnap_debug_mozilla,
                 b_v8_linux_nosnap_debug_test262,
                 b_v8_win32,
                 b_v8_win32_mozilla,
                 b_v8_win32_test262,
                 b_v8_win32_debug_1,
                 b_v8_win32_debug_2,
                 b_v8_win32_debug_mozilla_1,
                 b_v8_win32_debug_mozilla_2,
                 b_v8_win32_debug_test262_1,
                 b_v8_win32_debug_test262_2,
                 b_v8_win64,
                 b_v8_win32_full_debug,
                 b_v8_mac,
                 b_v8_mac_debug,
                 b_v8_mac_debug_mozilla,
                 b_v8_mac_full_debug,
                 b_v8_fuzz,
                 b_v8_linux_deopt_fuzzer,
                 b_v8_linux_random_deopt_fuzzer_debug,
                 b_v8_gcstress_1,
                 b_v8_gcstress_2,
                 b_v8_gcstress_3,
                 b_v8_linux_arm_sim,
                 b_v8_linux_arm_sim_mozilla,
                 b_v8_linux_arm_sim_debug,
                 b_v8_linux_arm_sim_debug_mozilla_1,
                 b_v8_linux_arm_sim_debug_mozilla_2,
                 b_v8_linux_arm_sim_debug_test262,
                 b_v8_linux_arm_sim_novfp3,
                 b_v8_linux_arm_sim_debug_novfp3,
                 b_v8_linux_mips_sim,
                 b_webkit_rel_v8,
                 b_webkit_rel_mac_v8,
                 b_webkit_rel_linux_v8,
                 b_webkit_rel_linux64_v8,
                 b_webkit_dbg_v8,
                 b_webkit_dbg_mac_v8,
                 b_webkit_dbg_linux_v8,
                 b_v8_linux_isolates,
                 b_v8_linux_nosse2,
                 b_v8_linux_nosse3,
                 b_v8_linux_nosse4,
                 b_v8_linux_deadcode,
                 b_v8_linux_debug_isolates,
                 b_v8_linux_debug_nosse2,
                 b_v8_linux_debug_nosse3,
                 b_v8_linux_debug_nosse4,
                 b_v8_linux_interpreted_regexp,
                 b_v8_linux_noi18n_debug,
                 b_v8_linux_full_debug,
                 b_v8_linux_nosnap_full_debug,
                 b_v8_arm_builder,
                 b_v8_arm,
                 b_v8_linux_recipe,
                 b_browser_rel_v8,
                 b_browser_dbg_v8,
                 b_chromium_dbg_linux_interactive_v8,
                 b_chromium_dbg_linux_heapcheck,
                 b_chromium_rel_linux_perf_v8,
                 b_chromium_rel_mac6_perf_v8,
                 b_chromium_rel_win7_perf_dual_v8,
                 b_nacl_v8_linux,
                 b_nacl_v8_linux64_stable,
                 b_nacl_v8_linux64_canary]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'V8')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### GATE KEEPER

if TREE_GATE_KEEPER:
  import master_gatekeeper_cfg
  master_gatekeeper_cfg.Update(config, ActiveMaster, c)

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# TODO(machenbach): I think the next line is not used and has no effect:
# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['./templates', '../master.chromium/templates'])

if MAIL_NOTIFIER:
  import mail_notifier_cfg
  mail_notifier_cfg.Update(config, ActiveMaster, c)

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.v8/'
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
