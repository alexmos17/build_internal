# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import posixpath

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory
from master.factory import gclient_factory

import config
import master_site_config

ActiveMaster = master_site_config.NativeClientRagel

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def TreeFileSplitter(path):
  """Filter chromium commits to those relevant.

  Arguments:
    path: a path which svn reports has changed.
  Returns:
    A tuple containing (branchname, subpath).
  """
  return (None, path)

multi_poller = svnpoller.SVNPoller(
    svnurl='svn://svn.chromium.org/chrome/trunk/src',
    split_file=TreeFileSplitter,
    revlinktmpl=(
        'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'),
    pollinterval=10)

c['change_source'] = [
    multi_poller,
]

factories = []
schedulers = []

m_win = chromium_factory.ChromiumFactory(
    build_dir='src/build', target_platform='win32')
m_linux = chromium_factory.ChromiumFactory(
    build_dir='src/out', target_platform='linux2')
m_mac = chromium_factory.ChromiumFactory(
    build_dir='src/xcodebuild', target_platform='darwin')
# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumFactory
F_LINUX = m_linux.ChromiumFactory
F_MAC = m_mac.ChromiumFactory

factory_properties_linux = {
  'gclient_env': {
      'GYP_DEFINES': 'nacl_validator_ragel=1',
  },
  'archive_build': True,
  'gs_bucket': 'gs://nativeclient-browser-snapshots',
  'gs_acl': 'public-read',
}
factory_properties_win = {
  'gclient_env': {
      'GYP_DEFINES': 'nacl_validator_ragel=1',
      'GYP_MSVS_VERSION': '2010',
  },
  'archive_build': True,
  'gs_bucket': 'gs://nativeclient-browser-snapshots',
  'gs_acl': 'public-read',
}
factory_properties_mac = {
  'gclient_env': {
      'GYP_DEFINES': 'nacl_validator_ragel=1',
  },
  'archive_build': True,
  'gs_bucket': 'gs://nativeclient-browser-snapshots',
  'gs_acl': 'public-read',
}

tests = []

factories.append(['windows-ragel', '1ragel|closer',
                  F_WIN(clobber=True, target='Release', tests=tests,
                        slave_type='Builder',
                        project='all.sln',
                        factory_properties=factory_properties_win)])
factories.append(['mac-ragel', '1ragel|closer',
                  F_MAC(clobber=True, target='Release', tests=tests,
                        slave_type='Builder',
                        options=['--compiler=goma-clang'],
                        factory_properties=factory_properties_mac)])
factories.append(['linux-ragel', '1ragel|closer',
                   F_LINUX(clobber=True, target='Release', tests=tests,
                           slave_type='Builder',
                           options=['--compiler=goma'],
                           factory_properties=factory_properties_linux)])

s_nacl = Scheduler(
    name='nacl-ragel',
    branch=None,
    treeStableTimer=0,
    builderNames=[f[0] for f in factories],
)

schedulers.append(s_nacl)

c['schedulers'] = schedulers


# Convert factories to a list of (factory_name, factory_object) pairs.
factories_bare = [(f[0], f[2]) for f in factories]
# Create mapping of builder name to list of steps.
builder_steps = build_utils.ExtractFactoriesSteps(factories_bare)
all_steps = build_utils.AllFactoriesSteps(factories_bare)


c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientRagel')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s|full' % f[1],
      # Don't enable auto_reboot for people testing locally.
      'auto_reboot': ActiveMaster.is_production_host,
  })
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             order_console_by_time=True,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.client.nacl/templates'])

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.ragel/'
