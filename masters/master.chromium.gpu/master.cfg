# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import annotator_factory
from master.factory import chromium_factory

import config
import master_site_config

ActiveMaster = master_site_config.ChromiumGPU

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Disable compression for the stdio files.
c['logCompressionLimit'] = False

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SLAVES

# Load the slave list. We need some information from it in order to
# produce the builders.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumGPU')

####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.

s_gpu = Scheduler(name='gpu',
                  branch='src',
                  treeStableTimer=60,
                  builderNames=['Win7 Release (NVIDIA)',
                                'Win7 Debug (NVIDIA)',
                                'Win7 Release (ATI)',
                                'Win7 Release (Intel)',
                                'Mac Release (Intel)',
                                'Mac Debug (Intel)',
                                'Mac Release (ATI)',
                                'Mac Retina Release',
                                'Mac Retina Debug',
                                'Mac 10.8 Release (Intel)',
                                'Mac 10.8 Debug (Intel)',
                                'Mac 10.8 Release (ATI)',
                                'Linux Release (NVIDIA)',
                                'Linux Debug (NVIDIA)',
                                'Android Debug (Nexus 7)'])
c['schedulers'] = [s_gpu]

####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_annotator = annotator_factory.AnnotatorFactory()
m_android = chromium_factory.ChromiumFactory(
    'src/build', 'linux2', nohooks_on_update=True, target_os='android')

# Some shortcut to simplify the code below.
F_ANDROID = m_android.ChromiumAnnotationFactory

full_test_suite = [
  'content_gl_tests',
  'gles2_conform_test',
  'gl_tests',
  'gpu_content_tests',
  'gpu_frame_rate',
  'gpu_throughput',
  'tab_capture_performance',
]

debug_test_suite = [
  'content_gl_tests',
  'gles2_conform_test',
  'gl_tests',
  'gpu_content_tests',
]

# TODO(kbr): switch the Android builder to use recipes too.
desktop_builders = []
for slave in slaves.slaves:
  if not slave.get('is_android'):
    factory_properties = {
      'test_results_server': 'test-results.appspot.com',
      'generate_gtest_json': True,
      'build_config': 'Debug'
    }
    if 'perf_id' in slave:
      factory_properties['show_perf_results'] = True;
      factory_properties['perf_id'] = slave['perf_id']
      factory_properties['build_config'] = 'Release'
    desktop_builders.append({
      'name': slave['builder'],
      'factory': m_annotator.BaseFactory('gpu', factory_properties)
    })

f_android_nexus7_dbg = F_ANDROID(
    target='Debug',
    slave_type='AnnotatedBuilder',
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
      'android_bot_id': 'gpu-builder-tests-dbg',
      'gclient_timeout': 3600
    })

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_android_nexus7 = {'name': 'Android Debug (Nexus 7)',
                    'factory': f_android_nexus7_dbg}

c['builders'] = desktop_builders + [ b_android_nexus7 ]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.gpu/'
