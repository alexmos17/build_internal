# -*- python -*-
# ex: set syntax=python:

# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import AnyBranchScheduler
from buildbot.scheduler import Triggerable

from common import chromium_utils

from master import master_utils
from master import slaves_list
from master.factory import v8_factory
from master.factory import chromium_factory

import config
import master_site_config
import branches_cfg

import os

# Get the branches currently tracked on the waterfall, plus the names for the
# slaves on these branches from the branches_cfg.py file.
stable_branch = branches_cfg.stable_branch
beta_branch = branches_cfg.beta_branch
branch_names = branches_cfg.branch_names

ActiveMaster = master_site_config.V8Branches

MAIL_NOTIFIER = ActiveMaster.is_production_host

SVN_POLLER = True

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []


####### DATABASE

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

if SVN_POLLER:
  # Polls config.Master.trunk_url for changes
  v8_rev = 'http://code.google.com/p/v8/source/detail?r=%s'
  trunk_poller = svnpoller.SVNPoller(
      svnurl='%s/trunk' % config.Master.v8_url,
      svnbin=chromium_utils.SVN_BIN,
      split_file=lambda p: ('trunk', p),
      pollinterval=10,
      revlinktmpl=v8_rev)
  stable_poller = svnpoller.SVNPoller(
      svnurl='%s/branches/%s' % (config.Master.v8_url, stable_branch),
      svnbin=chromium_utils.SVN_BIN,
      split_file=lambda p: ('branches/%s' % stable_branch, p),
      pollinterval=10,
      revlinktmpl=v8_rev)
  beta_poller = svnpoller.SVNPoller(
      svnurl='%s/branches/%s' % (config.Master.v8_url, beta_branch),
      svnbin=chromium_utils.SVN_BIN,
      split_file=lambda p: ('branches/%s' % beta_branch, p),
      pollinterval=10,
      revlinktmpl=v8_rev)

  c['change_source'] = [trunk_poller, stable_poller, beta_poller]


####### SCHEDULERS

## configure the Schedulers
s_v8_trunk = Scheduler(name='v8_trunk',
                       branch='trunk',
                       treeStableTimer=60,
                       builderNames=[
                           'V8 Linux - trunk',
                           'V8 Linux - trunk - debug',
                           'V8 arm - sim - trunk',
                           'V8 arm - sim - trunk - debug',
                           'V8 Linux64 - trunk',
                           'V8 Linux64 - trunk - debug',
                           'Chromium ASAN (symbolized) - trunk',
                           'Chromium ASAN - trunk - debug',
                           'Chromium Win SyzyASAN - trunk'])

s_v8_stable = Scheduler(name='v8_stable',
                        branch='branches/' + stable_branch,
                        treeStableTimer=60,
                        builderNames=[
                            branch_names['stable']['ia32'],
                            branch_names['stable']['ia32'] + ' - debug',
                            branch_names['stable']['x64'],
                            branch_names['stable']['x64'] + ' - debug',
                            branch_names['stable']['arm'],
                            branch_names['stable']['arm'] + ' - debug'])

s_v8_beta = Scheduler(name='v8_beta',
                      branch='branches/' + beta_branch,
                      treeStableTimer=60,
                      builderNames=[
                          branch_names['beta']['ia32'],
                          branch_names['beta']['ia32'] + ' - debug',
                          branch_names['beta']['x64'],
                          branch_names['beta']['x64'] + ' - debug',
                          branch_names['beta']['arm'],
                          branch_names['beta']['arm'] + ' - debug'])

# These builders run regularly.
s_v8_regular = Nightly(name='v8_regular',
                       branch=None,
                       builderNames=['V8 Linux - experimental parser - debug'],
                       hour=[0, 4, 8, 12])


c['schedulers'] = [s_v8_trunk, s_v8_stable, s_v8_beta, s_v8_regular]

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux_stable = lambda: v8_factory.V8Factory('v8', target_platform='linux2',
                                              branch='branches/' 
                                              + stable_branch)

m_linux_beta = lambda: v8_factory.V8Factory('v8', target_platform='linux2',
                                            branch='branches/' + beta_branch)

m_linux_trunk = lambda: v8_factory.V8Factory('v8', target_platform='linux2',
                                             branch='trunk')

m_linux64_stable = lambda: v8_factory.V8Factory('v8', target_platform='linux64',
                                                branch='branches/' 
                                                + stable_branch)

m_linux64_beta = lambda: v8_factory.V8Factory('v8', target_platform='linux64',
                                              branch='branches/' + beta_branch)

m_linux64_trunk = lambda: v8_factory.V8Factory('v8', target_platform='linux64',
                                               branch='trunk')

m_linux_experimental_parser = lambda: v8_factory.V8Factory(
    'v8', target_platform='linux2', branch='branches/experimental/parser')

F = chromium_factory.ChromiumFactory
def linux(): return F('src/out', 'linux2')
def win(): return F('src/out', 'win32')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

linux_default_opts = ['--build-tool=make', '--src-dir=v8',
                      # TODO(thakis): Remove this once v8 r18257 has reached
                      # the stable branch.
                      '--', 'builddir_name=.']

debug_properties = {
    'gclient_env': {
        'GYP_DEFINES': 'v8_optimized_debug=0',
    },
}

asan_rel_sym_gyp = ('asan=1 use_allocator=none v8_enable_verify_heap=1 '
                    'release_extra_cflags="-gline-tables-only '
                    '-O2 -fno-inline-functions -fno-inline" '
                    'lsan=1 asan_coverage=1')

f_linux_asan_rel_sym = linux().ChromiumV8TrunkFactory(
    clobber=True,
    options=['--compiler=clang', 'chromium_builder_asan'],
    factory_properties={
        'primary_repo': 'v8_',
        'cf_archive_build': ActiveMaster.is_production_host,
        'cf_archive_name': 'asan-symbolized',
        'gs_bucket': 'gs://v8-asan',
        'gs_acl': 'public-read',
        'gclient_env': {
            'GYP_DEFINES': asan_rel_sym_gyp,
        },
        'no_gclient_revision': True,
        'revision_dir': 'v8',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_linux_asan_dbg = linux().ChromiumV8TrunkFactory(
    target='Debug',
    clobber=True,
    options=['--compiler=clang', 'chromium_builder_asan'],
    factory_properties={
        'primary_repo': 'v8_',
        'cf_archive_build': ActiveMaster.is_production_host,
        'cf_archive_name': 'asan',
        'gs_bucket': 'gs://v8-asan',
        'gs_acl': 'public-read',
        'gclient_env': {
            'GYP_DEFINES': ('asan=1 lsan=1 asan_coverage=1 '
                            'use_allocator=none v8_optimized_debug=1'),
        },
        'no_gclient_revision': True,
        'revision_dir': 'v8',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_win_syzyasan_rel = win().ChromiumV8TrunkFactory(
    clobber=True,
    options=['--build-tool=ninja', '--', 'chromium_builder_asan'],
    compile_timeout=7200,
    factory_properties={
        'primary_repo': 'v8_',
        'cf_archive_build': ActiveMaster.is_production_host,
        'cf_archive_name': 'syzyasan',
        'gs_bucket': 'gs://v8-asan',
        'gs_acl': 'public-read',
        'gclient_env': {
            'GYP_DEFINES': 'syzyasan=1 win_z7=1 chromium_win_pch=0 '
                           'component=static_library ',
            'GYP_GENERATORS': 'ninja',
            'GYP_USE_SEPARATE_MSPDBSRV': '1',
        },
        'syzyasan': True,
        'no_gclient_revision': True,
        'revision_dir': 'v8',
        'safesync_url': 'http://chromium-status.appspot.com/lkgr',
    })

f_v8_linux_experimental_parser_debug = m_linux_experimental_parser().V8Factory(
    options=linux_default_opts,
    factory_properties={
        'gclient_env': {
             'GYP_DEFINES': 'v8_optimized_debug=1',
        },
    },
    target='Debug',
    tests=['experimental_parser', 'presubmit'],
    target_arch='ia32')

f_v8_linux_trunk = m_linux_trunk().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla', 'presubmit', 'webkit'],
    target_arch='ia32')

f_v8_linux_trunk_debug = m_linux_trunk().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing', 'test262', 'mozilla', 'presubmit', 'webkit'],
    target_arch='ia32')

f_v8_linux_stable = m_linux_stable().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='ia32')

f_v8_linux_stable_debug = m_linux_stable().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='ia32')

f_v8_linux_beta = m_linux_beta().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='ia32')

f_v8_linux_beta_debug = m_linux_beta().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='ia32')


f_v8_linux64_trunk = m_linux64_trunk().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla', 'presubmit', 'webkit'],
    target_arch='x64')

f_v8_linux64_trunk_debug = m_linux64_trunk().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing', 'test262', 'mozilla', 'presubmit', 'webkit'],
    target_arch='x64')

f_v8_linux64_stable = m_linux64_stable().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='x64')

f_v8_linux64_stable_debug = m_linux64_stable().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='x64')

f_v8_linux64_beta = m_linux64_beta().V8Factory(
    options=linux_default_opts,
    target='Release',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='x64')

f_v8_linux64_beta_debug = m_linux64_beta().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    target='Debug',
    tests=['v8testing', 'test262', 'mozilla', 'webkit'],
    target_arch='x64')


f_v8_arm_trunk = m_linux_trunk().V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'test262', 'mozilla'],
    target='Release',
    target_arch='arm')

f_v8_arm_trunk_debug = m_linux_trunk().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    tests=['v8testing', 'test262', 'mozilla'],
    target='Debug',
    target_arch='arm')

f_v8_arm_stable = m_linux_stable().V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'test262', 'mozilla'],
    target='Release',
    target_arch='arm')

f_v8_arm_stable_debug = m_linux_stable().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    tests=['v8testing', 'test262', 'mozilla'],
    target='Debug',
    target_arch='arm')

f_v8_arm_beta = m_linux_beta().V8Factory(
    options=linux_default_opts,
    tests=['v8testing', 'test262', 'mozilla'],
    target='Release',
    target_arch='arm')

f_v8_arm_beta_debug = m_linux_beta().V8Factory(
    options=linux_default_opts,
    factory_properties=debug_properties,
    tests=['v8testing', 'test262', 'mozilla'],
    target='Debug',
    target_arch='arm')

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_v8_linux_experimental_parser_debug = {
  'name': 'V8 Linux - experimental parser - debug',
  'builddir': 'v8-linux-experimental-parser-debug',
  'factory': f_v8_linux_experimental_parser_debug,
  'category': '04Exp',
  'auto_reboot' : False,
}

b_v8_linux_trunk = {
  'name': 'V8 Linux - trunk',
  'builddir': 'v8-linux-trunk',
  'factory': f_v8_linux_trunk,
  'category': '03Trunk',
  'auto_reboot' : False,
}

b_v8_linux_trunk_debug = {
  'name': 'V8 Linux - trunk - debug',
  'builddir': 'v8-linux-trunk-debug',
  'factory': f_v8_linux_trunk_debug,
  'category': '03Trunk',
  'auto_reboot' : False,
}

b_v8_linux_stable = {
  'name': branch_names['stable']['ia32'],
  'builddir': 'v8-linux-stable',
  'factory': f_v8_linux_stable,
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux_stable_debug = {
  'name': branch_names['stable']['ia32'] + ' - debug',
  'builddir': 'v8-linux-stable-debug',
  'factory': f_v8_linux_stable_debug,
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux_beta = {
  'name': branch_names['beta']['ia32'],
  'builddir': 'v8-linux-beta',
  'factory': f_v8_linux_beta,
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_linux_beta_debug = {
  'name': branch_names['beta']['ia32'] + ' - debug',
  'builddir': 'v8-linux-beta-debug',
  'factory': f_v8_linux_beta_debug,
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_linux64_trunk = {
  'name': 'V8 Linux64 - trunk',
  'builddir': 'v8-linux64-trunk',
  'factory': f_v8_linux64_trunk,
  'category': '03Trunk',
  'auto_reboot' : False,
}

b_v8_linux64_trunk_debug = {
  'name': 'V8 Linux64 - trunk - debug',
  'builddir': 'v8-linux64-trunk-debug',
  'factory': f_v8_linux64_trunk_debug,
  'category': '03Trunk',
  'auto_reboot' : False,
}

b_v8_linux64_stable = {
  'name': branch_names['stable']['x64'],
  'builddir': 'v8-linux64-stable',
  'factory': f_v8_linux64_stable,
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux64_stable_debug = {
  'name': branch_names['stable']['x64'] + ' - debug',
  'builddir': 'v8-linux64-stable-debug',
  'factory': f_v8_linux64_stable_debug,
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_linux64_beta = {
  'name': branch_names['beta']['x64'],
  'builddir': 'v8-linux64-beta',
  'factory': f_v8_linux64_beta,
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_linux64_beta_debug = {
  'name': branch_names['beta']['x64'] + ' - debug',
  'builddir': 'v8-linux64-beta-debug',
  'factory': f_v8_linux64_beta_debug,
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_arm_trunk = {
  'name': 'V8 arm - sim - trunk',
  'builddir': 'v8-arm-trunk',
  'factory': f_v8_arm_trunk,
  'category': '03Trunk',
  'auto_reboot' : False,
}

b_v8_arm_trunk_debug = {
  'name': 'V8 arm - sim - trunk - debug',
  'builddir': 'v8-arm-trunk-debug',
  'factory': f_v8_arm_trunk_debug,
  'category': '03Trunk',
  'auto_reboot' : False,
}

b_v8_arm_stable = {
  'name': branch_names['stable']['arm'],
  'builddir': 'v8-arm-stable',
  'factory': f_v8_arm_stable,
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_arm_stable_debug = {
  'name': branch_names['stable']['arm'] + ' - debug',
  'builddir': 'v8-arm-stable-debug',
  'factory': f_v8_arm_stable_debug,
  'category': '01Stable',
  'auto_reboot' : False,
}

b_v8_arm_beta = {
  'name': branch_names['beta']['arm'],
  'builddir': 'v8-arm-beta',
  'factory': f_v8_arm_beta,
  'category': '02Beta',
  'auto_reboot' : False,
}

b_v8_arm_beta_debug = {
  'name': branch_names['beta']['arm'] + ' - debug',
  'builddir': 'v8-arm-beta-debug',
  'factory': f_v8_arm_beta_debug,
  'category': '02Beta',
  'auto_reboot' : False,
}

b_linux_asan_rel_sym = {
  'name': 'Chromium ASAN (symbolized) - trunk',
  'builddir': 'linux-asan-rel-sym',
  'factory': f_linux_asan_rel_sym,
  'category': '03Trunk',
}

b_linux_asan_dbg = {
  'name': 'Chromium ASAN - trunk - debug',
  'builddir': 'linux-asan-dbg',
  'factory': f_linux_asan_dbg,
  'category': '03Trunk',
}

b_win_syzyasan_rel = {
  'name': 'Chromium Win SyzyASAN - trunk',
  'builddir': 'win-syzyasan-rel',
  'factory': f_win_syzyasan_rel,
  'category': '03Trunk',
}

c['builders'] = [b_v8_linux_stable,
                 b_v8_linux_stable_debug,
                 b_v8_linux64_stable,
                 b_v8_linux64_stable_debug,
                 b_v8_arm_stable,
                 b_v8_arm_stable_debug,
                 b_v8_linux_beta,
                 b_v8_linux_beta_debug,
                 b_v8_linux64_beta,
                 b_v8_linux64_beta_debug,
                 b_v8_arm_beta,
                 b_v8_arm_beta_debug,
                 b_v8_linux_trunk,
                 b_v8_linux_trunk_debug,
                 b_v8_linux64_trunk,
                 b_v8_linux64_trunk_debug,
                 b_v8_arm_trunk,
                 b_v8_arm_trunk_debug,
                 b_linux_asan_rel_sym,
                 b_linux_asan_dbg,
                 b_win_syzyasan_rel,
                 b_v8_linux_experimental_parser_debug]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'V8Branches')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = 'http://build.chromium.org/p/client.v8.branches/'

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['./templates', '../master.chromium/templates'])

if MAIL_NOTIFIER:
  from buildbot.status.mail import MailNotifier
  mn = MailNotifier(fromaddr=ActiveMaster.from_address,
                    mode='problem',
                    sendToInterestedUsers=True,
                    lookup=master_utils.FilterDomain())
  c['status'].append(mn)

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3

####### PROJECT IDENTITY

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
