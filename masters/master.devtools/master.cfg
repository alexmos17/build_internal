# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.DevTools

c = BuildmasterConfig = {}
c['status'] = []


def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

def WebkitFileSplitter(path):
  """split_file for webkit.org repository."""
  projects = ['trunk']
  return build_utils.SplitPath(projects, path)

chromium_url = "http://src.chromium.org/viewvc/chrome?view=rev&revision=%s"
cr_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                split_file=ChromeTreeFileSplitter,
                                pollinterval=30,
                                revlinktmpl=chromium_url)

webkit_url = "http://src.chromium.org/viewvc/blink?view=rev&revision=%s"
webkit_poller = svnpoller.SVNPoller(svnurl = config.Master.webkit_root_url,
                                    split_file=WebkitFileSplitter,
                                    pollinterval=30,
                                    revlinktmpl=webkit_url)

c['change_source'] = [cr_poller, webkit_poller]


def linux(): return chromium_factory.ChromiumFactory('src/out', 'linux2')

factory_release = linux().ChromiumFactory(
    target='Release',
    tests=['devtools_perf'],
    options=['--build-tool=ninja',
             '--compiler=goma',
             'content_shell',
             'DumpRenderTree',
             'chrome',
             'pyautolib',
             'chromedriver'],
    factory_properties={
      'perf_id': 'chromium-devtools-perf',
      'show_perf_results': True,
      'gclient_env': {
          'GYP_DEFINES':'release_extra_cflags="-fno-omit-frame-pointer"'
      },
      'blink_config': 'blink',
    })

builder_release = {
  'name': 'x64 Release',
  'builddir': 'DevTools_Release',
  'factory': factory_release,
  'category': 'Linux',
  'auto_reboot': False
}


factory_debug = linux().ChromiumFactory(
    target='Debug',
    tests=['devtools_perf'],
    options=['--build-tool=ninja',
             '--compiler=goma',
             'content_shell',
             'DumpRenderTree',
             'chrome',
             'pyautolib',
             'chromedriver'],
    factory_properties={
      'perf_id': 'chromium-devtools-perf-debug',
      'show_perf_results': True,
      'blink_config': 'blink',
    })

builder_debug = {
  'name': 'x64 Debug',
  'builddir': 'DevTools_Debug',
  'factory': factory_debug,
  'category': 'Linux',
  'auto_reboot': False
}

factory_release_clang = linux().ChromiumFactory(
    target='Release',
    tests=['devtools_perf'],
    options=['--build-tool=ninja',
             '--compiler=goma-clang',
             'content_shell',
             'DumpRenderTree',
             'chrome',
             'pyautolib',
             'chromedriver'],
    factory_properties={
      'perf_id': 'chromium-devtools-perf-clang-release',
      'show_perf_results': True,
      'gclient_env': {
          'GYP_DEFINES':'clang=1 clang_use_chrome_plugins=1'
      },
      'blink_config': 'blink',
    })

builder_release_clang = {
  'name': 'x64 Release Clang',
  'builddir': 'DevTools_Release_Clang',
  'factory': factory_release_clang,
  'category': 'Linux',
  'auto_reboot': False
}

c['builders'] = [builder_release, builder_debug, builder_release_clang]


scheduler_devtools = Scheduler(name='devtools_perf_scheduler',
    branch='trunk',
    treeStableTimer=60,
    builderNames = [builder_release['name'],
                    builder_debug['name'],
                    builder_release_clang['name']])

c['schedulers'] = [scheduler_devtools]


c['logCompressionLimit'] = False
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.webkit/'

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumDevTools')

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    order_console_by_time=True,
    enable_http_status_push=ActiveMaster.is_production_host)
