# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Triggerable
from buildbot.scheduler import Scheduler

from common import chromium_utils

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list

from master.factory import chromium_factory

import config
import master_site_config

ActiveMaster = master_site_config.ChromiumMemoryFYI

c = BuildmasterConfig = {}
c['logCompressionLimit'] = False

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   svnbin=chromium_utils.SVN_BIN,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=[# BuildTesters:
                                     'Webkit Linux (valgrind layout)',
                                     'Windows Tests (tsan)',

                                     # Builders
                                     'Chromium Windows Builder (DrMemory)',
                                     'Chromium Linux Builder (valgrind)',
                                     'Chromium Mac Builder (valgrind)',
                                     'Chromium OS Builder (valgrind)',
                                     'Linux Builder (TSan v2)',
                                    ])

s_chromium_win_drmemory_trigger = Triggerable(
    'chromium_win_drmemory',
    ['Windows Unit (DrMemory)',
     'Windows Browser (DrMemory) (1)',
     'Windows Browser (DrMemory) (2)',
     ])

s_chromium_linux_valgrind_trigger = Triggerable(
    'chromium_linux_valgrind',
    ['Linux Tests (valgrind)(1)',
     'Linux Tests (valgrind)(2)',
     'Linux Tests (valgrind)(3)',
     'Linux Tests (valgrind)(4)',
     'Linux Tests (valgrind)(5)',
     'Linux Tests (tsan)(1)',
     'Linux Tests (tsan)(2)',
     'Linux Tests (tsan)(3)',
    ])

s_chromium_mac_valgrind_trigger = Triggerable(
    'chromium_mac_valgrind',
    ['Chromium Mac (valgrind)(1)',
     'Chromium Mac (valgrind)(2)',
    ])

s_chromium_chromeos_valgrind_trigger = Triggerable(
    'chromium_chromeos_valgrind',
    ['Chromium OS (valgrind)(1)',
     'Chromium OS (valgrind)(2)',
     'Chromium OS (valgrind)(3)',
     'Chromium OS (valgrind)(4)',
     'Chromium OS (valgrind)(5)',
     'Chromium OS (valgrind)(6)',
    ])

s_chromium_linux_tsan_clang_trigger = Triggerable(
    'chromium_linux_tsan_clang',
   ['Linux Tests (TSan v2)',
   ])

c['schedulers'] = [s_chromium,
                   s_chromium_win_drmemory_trigger,
                   s_chromium_linux_valgrind_trigger,
                   s_chromium_mac_valgrind_trigger,
                   s_chromium_chromeos_valgrind_trigger,
                   s_chromium_linux_tsan_clang_trigger]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_win = chromium_factory.ChromiumFactory('src/build', 'win32')
m_win_ninja = chromium_factory.ChromiumFactory('src/out', 'win32')
m_linux = chromium_factory.ChromiumFactory('src/out', 'linux2')
m_mac = chromium_factory.ChromiumFactory('src/xcodebuild', 'darwin')
m_chromeos = chromium_factory.ChromiumFactory('src/out', 'linux2')

# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumFactory
F_WIN_NINJA = m_win_ninja.ChromiumFactory
F_LINUX = m_linux.ChromiumFactory
F_MAC = m_mac.ChromiumFactory
F_CR_OS = m_chromeos.ChromiumOSFactory

chromium_win_drmemory_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium Windows Builder (DrMemory)',
    'drm-cr',
    'win32')

chromium_linux_valgrind_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium Linux Builder (valgrind)',
    'chromium-rel-linux-valgrind-builder',
    'linux')

chromium_mac_valgrind_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium Mac Builder (valgrind)',
    'chromium-rel-mac-valgrind-builder',
    'mac')

chromium_chromeos_valgrind_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium OS Builder (valgrind)',
    'chromium-rel-chromeos-valgrind-builder',
    'linux')

chromium_linux_tsan_clang_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Linux Builder (TSan v2)',
    'chromium-rel-linux-tsan-clang-builder',
    'linux')

valgrind_x86_gyp_defines  = 'build_for_tool=memcheck target_arch=ia32'
valgrind_cros_gyp_defines = 'build_for_tool=memcheck chromeos=1'
valgrind_mac_gyp_defines = valgrind_x86_gyp_defines

# IMPORTANT NOTE about adding new tests.
# If you want to add a new test, you first need to make sure it's:
# a) buildable,
# b) runnable by the tools and
# c) the e-mail notifier is configured to watch for its failures.
#
# Also, please do your best to estimate the time it takes to run the new test
# under the tool and order the tests in a short-job-first manner if possible.
#
# Regarding (a),
#   New Valgrind/Mac tests must first be added as dependencies to the
#     'chromium_builder_dbg_valgrind_mac' target in src/build/all.gyp;
#   New TSan/Win tests must first be added as dependencies to the
#     'chromium_builder_dbg_tsan_win' target in src/build/all.gyp;
#   New DrMemory/Win tests must first be added as dependencies to the
#     'chromium_builder_dbg_drmemory_win' target in src/build/all.gyp;
#
# Regarding (b),
#   'chrome_tests.py' must be updated to handle the test name,
#   without the 'TOOL_' prefix, where 'chrome_tests.py' is located
#     at tools/heapcheck/ for Heapchecker tests,
#     at tools/valgrind/ for other tools.
#
# Regarding (c),
#   See notifier_cfg.py for the existing tests and see the 'category' of the
#   builder you're dealing with.

f_chromium_rel_linux_valgrind_builder = F_LINUX(
    target='Release',
    slave_type='Builder',
    options=['--compiler=goma',
             'base_unittests',
             'components_unittests',
             'content_unittests',
             'crypto_unittests',
             'device_unittests',
             'gpu_unittests',
             'ipc_tests',
             'jingle_unittests',
             'media_unittests',
             'net_unittests',
             'ppapi_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sandbox_linux_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_unittests',
             'unit_tests',
             'url_unittests',
             ],
    factory_properties={
        'gclient_env': { 'GYP_DEFINES' : 'build_for_tool=memcheck' },
        'trigger': 'chromium_linux_valgrind',
    }
)

f_chromium_rel_linux_valgrind_tests_1 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_crypto',
           'valgrind_content',
           'valgrind_sync',
           'valgrind_net',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_2 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_url',
           'valgrind_printing',
           'valgrind_sql',
           'valgrind_sandbox',
           'valgrind_components',
           'valgrind_ppapi_unittests',
           'valgrind_jingle',
           'valgrind_ipc_tests',
           'valgrind_ui_unittests',
           'valgrind_remoting',
           'valgrind_base_unittests',
           'valgrind_media',
           'valgrind_gpu',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_3 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit_1_of_3'],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_4 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit_2_of_3'],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_5 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit_3_of_3'],
    factory_properties={ 'needs_valgrind' : True, })

# Mac Valgrind bots:
# We use debug builds for mac valgrind bots because we can't get stacks on
# release builds.
f_cr_rel_mac_valgrind_builder = F_MAC(
    slave_type='Builder',
    target='Debug',
    factory_properties={
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines },
        'trigger': 'chromium_mac_valgrind',
    },
    options=[
        '--compiler=goma-clang', '--', '-project', '../build/all.xcodeproj',
        '-target', 'chromium_builder_dbg_valgrind_mac'])

# unit_tests are disabled under Valgrind on Mac OS because of crbug.com/51716.
# We're still building them to be able to reproduce the crashes on bots.
f_cr_dbg_mac_valgrind_1 = F_MAC(
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    factory_properties={ 'needs_valgrind' : True, },
    # See IMPORTANT NOTE above before adding new tests.
    tests=['valgrind_base_unittests',
           'valgrind_crypto',
           'valgrind_url',
           'valgrind_ipc_tests',
           'valgrind_media',
           'valgrind_printing',
           'valgrind_remoting',
           'valgrind_sql',
           'valgrind_ui_unittests',
           # See above.
           #'valgrind_unit_1_of_4',
           #'valgrind_unit_2_of_4',
           ])

f_cr_dbg_mac_valgrind_2 = F_MAC(
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    factory_properties={ 'needs_valgrind' : True, },
    # See IMPORTANT NOTE above before adding new tests.
    tests=['valgrind_net',
           'valgrind_content',
           # See above.
           #'valgrind_unit_3_of_4',
           #'valgrind_unit_4_of_4',
           ])

# ChromeOS Valgrind bots:
f_chromium_rel_chromeos_valgrind_builder = F_CR_OS(
    target='Release',
    slave_type='Builder',
    options=['--compiler=goma',
             'app_list_unittests',
             'ash_unittests',
             'aura_unittests',
             'base_unittests',
             'chromeos_unittests',
             'components_unittests',
             'compositor_unittests',
             'content_unittests',
             'crypto_unittests',
             'device_unittests',
             'events_unittests',
             'gpu_unittests',
             'ipc_tests',
             'jingle_unittests',
             'media_unittests',
             'message_center_unittests',
             'net_unittests',
             'ppapi_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sandbox_linux_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_unittests',
             'unit_tests',
             'url_unittests',
             'views_unittests',
             ],
    factory_properties={
        'gclient_env': {'GYP_DEFINES' : valgrind_cros_gyp_defines},
        'trigger': 'chromium_chromeos_valgrind',
    })

f_chromium_rel_chromeos_valgrind_tests_1 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_net'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_2 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_app_list_unittests',
           'valgrind_message_center_unittests',
           'valgrind_url',
           'valgrind_printing',
           'valgrind_jingle',
           'valgrind_ppapi_unittests',
           'valgrind_ipc_tests',
           'valgrind_sql',
           'valgrind_components',
           'valgrind_remoting',
           'valgrind_ui_unittests',
           'valgrind_media',
           'valgrind_gpu',
           ],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_3 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_ash_unittests',
           'valgrind_aura',
           'valgrind_base_unittests',
           'valgrind_chromeos_unittests',
           'valgrind_content',
           'valgrind_compositor',
           'valgrind_crypto',
           'valgrind_events',
           'valgrind_sandbox',
           'valgrind_views',
           ],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_4 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_unit_1_of_3'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_5 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_unit_2_of_3'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_6 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_unit_3_of_3'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_webkit_rel_linux_valgrind_layout = F_LINUX(
    target='Release',
    tests=['valgrind_webkit'],
    options=['blink_tests'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : 'build_for_tool=memcheck'}})

# ThreadSanitizer bots:
f_chromium_rel_linux_tsan_1 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=['tsan_url',
           'tsan_printing',
           'tsan_media',
           'tsan_unit_1_of_3',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_tsan_2 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=['tsan_sql',
           'tsan_ui_unittests',
           'tsan_ipc_tests',
           'tsan_components',
           'tsan_net',
           'tsan_unit_2_of_3',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_tsan_3 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=['tsan_crypto',
           'tsan_remoting',
           'tsan_sync',
           'tsan_content',
           'tsan_base_unittests',
           'tsan_unit_3_of_3',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_dbg_win_tsan = F_WIN(
    target='Debug',
    # See IMPORTANT NOTE above before adding new tests.
    tests=[
      'tsan_url',
      'tsan_printing',
      'tsan_sql',
      'tsan_ipc_tests',
      'tsan_crypto',
      'tsan_components',
      'tsan_base_unittests',
      'tsan_remoting',
      'tsan_media',
      'tsan_net_1_of_2',
      'tsan_net_2_of_2',
    ],
    project='all.sln;chromium_builder_dbg_tsan_win',
    factory_properties={
      'needs_tsan_win' : True,
      'gclient_env': {
        'GYP_DEFINES' : 'build_for_tool=tsan'
      },
    },
)

# Dr.Memory bots:
f_chromium_dbg_win_drmemory_builder = F_WIN_NINJA(
    # TODO(timurrrr): reuse the builder for TSan/Win too once
    # http://crbug.com/108155 is resolved.
    slave_type='Builder',
    target='Debug',
    options=['--build-tool=ninja', '--', 'chromium_builder_dbg_drmemory_win'],
    factory_properties={
      'gclient_env': {'GYP_DEFINES': ('build_for_tool=drmemory '
                                      'component=shared_library '),
                      'GYP_GENERATORS': 'ninja'},
      'package_pdb_files': True,
      'trigger': 'chromium_win_drmemory',
    })

f_chromium_dbg_win_drmemory = F_WIN_NINJA(
    slave_type='Tester',
    target='Debug',
    build_url=chromium_win_drmemory_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=[
      'drmemory_light_url',
      'drmemory_light_printing',
      'drmemory_light_media',
      'drmemory_light_sql',
      'drmemory_light_crypto',
      'drmemory_light_remoting',
      'drmemory_light_ipc_tests',
      'drmemory_light_base_unittests',
      'drmemory_light_net',
      'drmemory_light_components',
      'drmemory_light_unit',
    ],
    factory_properties={'needs_drmemory': True}
)

# Tests that are single-machine shard-safe.
# These have never been tested with Valgrind.
sharded_tests = [
  'aura_unittests',
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver_tests',
  'chromedriver_unittests',
  'chromedriver2_unittests',
  'components_unittests',
  'content_browsertests',
  'content_unittests',
  'crypto_unittests',
  'device_unittests',
  'events_unittests',
  'gpu_unittests',
  'jingle_unittests',
  'media_unittests',
  'net_unittests',
  'ppapi_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sync_integration_tests',
  'sync_unit_tests',
  'ui_unittests',
  'unit_tests',
  'views_unittests',
  'webkit_compositor_bindings_unittests',
]

linux_tsan_v2_gyp_defines = ('tsan=1 '
                             'linux_use_tcmalloc=0 '
                             'use_aura=1 '
                             'release_extra_cflags="-gline-tables-only" '
                             'disable_nacl=1')

f_chromium_rel_linux_tsan_clang_builder = F_LINUX(
    slave_type='Builder',
    options=[
      '--compiler=goma-clang',
      '--build-tool=ninja',
      'base_unittests',
      'cacheinvalidation_unittests',
      'content_unittests',
      'crypto_unittests',
      'device_unittests',
      'gpu_unittests',
      'ipc_tests',
      'jingle_unittests',
      'media_unittests',
      'net_unittests',
      'ppapi_unittests',
      'printing_unittests',
      'remoting_unittests',
      'sandbox_linux_unittests',
      'sql_unittests',
      'sync_unit_tests',
      'ui_unittests',
      'unit_tests',
      'url_unittests',
    ],
    # The factory properties must be in sync with the TSan build instruction:
    # http://dev.chromium.org/developers/testing/threadsanitizer-tsan-v2
    factory_properties={
        'gclient_env': {
            'GYP_DEFINES': linux_tsan_v2_gyp_defines,
            'GYP_GENERATORS': 'ninja', },
        'trigger': 'chromium_linux_tsan_clang' })

f_chromium_rel_linux_tsan_clang_1 = F_LINUX(
    slave_type='Tester',
    build_url=chromium_linux_tsan_clang_archive,
    tests=[
      'base_unittests',
      'cacheinvalidation_unittests',
      'content_unittests',
      'crypto_unittests',
      'device_unittests',
      'googleurl',
      'gpu',
      'jingle',
      'net',
      'media',
      'ppapi_unittests',
      'printing',
      'remoting',
      'sandbox_linux_unittests',
      'unit_tests',
    ],
    # For now we only need GYP_DEFINES=clang=1 to have Clang binaries checked
    # out on the tester. But similar GYP defines are easier to manage.
    factory_properties={
      'gclient_env': {
          'GYP_DEFINES': linux_tsan_v2_gyp_defines,
      },
      'tsan': True,
      'sharded_tests': sharded_tests,
    })


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_linux_valgrind_builder = {
  'name': 'Chromium Linux Builder (valgrind)',
  'builddir': 'chromium-rel-linux-valgrind-builder',
  'factory': f_chromium_rel_linux_valgrind_builder,
  'category': '1Linux Valgrind|compile',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_tests_1 = {
  'name': 'Linux Tests (valgrind)(1)',
  'builddir': 'chromium-rel-linux-valgrind-tests-1',
  'factory': f_chromium_rel_linux_valgrind_tests_1,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_valgrind_tests_2 = {
  'name': 'Linux Tests (valgrind)(2)',
  'builddir': 'chromium-rel-linux-valgrind-tests-2',
  'factory': f_chromium_rel_linux_valgrind_tests_2,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_valgrind_tests_3 = {
  'name': 'Linux Tests (valgrind)(3)',
  'builddir': 'chromium-rel-linux-valgrind-tests-3',
  'factory': f_chromium_rel_linux_valgrind_tests_3,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_valgrind_tests_4 = {
  'name': 'Linux Tests (valgrind)(4)',
  'builddir': 'chromium-rel-linux-valgrind-tests-4',
  'factory': f_chromium_rel_linux_valgrind_tests_4,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_valgrind_tests_5 = {
  'name': 'Linux Tests (valgrind)(5)',
  'builddir': 'chromium-rel-linux-valgrind-tests-5',
  'factory': f_chromium_rel_linux_valgrind_tests_5,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_mac_valgrind_builder = {
  'name': 'Chromium Mac Builder (valgrind)',
  'builddir': 'chromium-rel-mac-valgrind-builder',
  'factory': f_cr_rel_mac_valgrind_builder,
  'category': '2Mac Valgrind|compile',
  'auto_reboot': False,
}

b_chromium_dbg_mac_valgrind_1 = {
  'name': 'Chromium Mac (valgrind)(1)',
  'builddir': 'chromium-dbg-mac-valgrind-1',
  'factory': f_cr_dbg_mac_valgrind_1,
  'category': '2Mac Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_dbg_mac_valgrind_2 = {
  'name': 'Chromium Mac (valgrind)(2)',
  'builddir': 'chromium-dbg-mac-valgrind-2',
  'factory': f_cr_dbg_mac_valgrind_2,
  'category': '2Mac Valgrind|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_chromeos_valgrind_builder = {
  'name': 'Chromium OS Builder (valgrind)',
  'builddir': 'chromium-rel-chromeos-valgrind-builder',
  'factory': f_chromium_rel_chromeos_valgrind_builder,
  'category': '3ChromeOS Valgrind|compile',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_1 = {
  'name': 'Chromium OS (valgrind)(1)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-1',
  'factory': f_chromium_rel_chromeos_valgrind_tests_1,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_chromeos_valgrind_2 = {
  'name': 'Chromium OS (valgrind)(2)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-2',
  'factory': f_chromium_rel_chromeos_valgrind_tests_2,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_chromeos_valgrind_3 = {
  'name': 'Chromium OS (valgrind)(3)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-3',
  'factory': f_chromium_rel_chromeos_valgrind_tests_3,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_chromeos_valgrind_4 = {
  'name': 'Chromium OS (valgrind)(4)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-4',
  'factory': f_chromium_rel_chromeos_valgrind_tests_4,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_chromeos_valgrind_5 = {
  'name': 'Chromium OS (valgrind)(5)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-5',
  'factory': f_chromium_rel_chromeos_valgrind_tests_5,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_chromeos_valgrind_6 = {
  'name': 'Chromium OS (valgrind)(6)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-6',
  'factory': f_chromium_rel_chromeos_valgrind_tests_6,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_webkit_rel_linux_valgrind_layout = {
  'name': 'Webkit Linux (valgrind layout)',
  'builddir': 'webkit-rel-linux-valgrind-layout',
  'factory': f_webkit_rel_linux_valgrind_layout,
  'category': '4WebKit Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_tsan_1 = {
  'name': 'Linux Tests (tsan)(1)',
  'builddir': 'chromium-rel-linux-tsan-1',
  'factory': f_chromium_rel_linux_tsan_1,
  'category': '5ThreadSanitizer|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_tsan_2 = {
  'name': 'Linux Tests (tsan)(2)',
  'builddir': 'chromium-rel-linux-tsan-2',
  'factory': f_chromium_rel_linux_tsan_2,
  'category': '5ThreadSanitizer|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_tsan_3 = {
  'name': 'Linux Tests (tsan)(3)',
  'builddir': 'chromium-rel-linux-tsan-3',
  'factory': f_chromium_rel_linux_tsan_3,
  'category': '5ThreadSanitizer|memory_tester',
  'auto_reboot': True,
}

b_chromium_dbg_win_tsan = {
  'name': 'Windows Tests (tsan)',
  'builddir': 'chromium-dbg-win-tsan',
  'factory': f_chromium_dbg_win_tsan,
  'category': '5ThreadSanitizer|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_dbg_win_drmemory_builder = {
  'name': 'Chromium Windows Builder (DrMemory)',
  # make the dir short for ninja build
  'builddir': 'drm-cr',
  'factory': f_chromium_dbg_win_drmemory_builder,
  'category': '6DrMemory|compile',
  'auto_reboot': True,
}

b_chromium_dbg_win_drmemory = {
  'name': 'Windows Unit (DrMemory)',
  'builddir': 'chromium-dbg-win-drmemory',
  'factory': f_chromium_dbg_win_drmemory,
  'category': '6DrMemory|drmemory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_tsan_clang_builder = {
  'name': 'Linux Builder (TSan v2)',
  'builddir': 'chromium-rel-linux-tsan-clang-builder',
  'factory': f_chromium_rel_linux_tsan_clang_builder,
  'category': '8TSan v2|compile|memory_tester',
  'auto_reboot': False,
}

# TODO(glider): set up email notifications.
b_chromium_rel_linux_tsan_clang_1 = {
  'name': 'Linux Tests (TSan v2)',
  'builddir': 'chromium-rel-linux-tsan-clang-1',
  'factory': f_chromium_rel_linux_tsan_clang_1,
  'category': '8TSan v2|memory_tester',
  'auto_reboot': True,
}

def windows_browser_drmemory_light_tester(shard, total):
  if shard < 1 or shard > total:
    raise
  ret = {'category': 'drmemory'}
  ret['name'] = 'Windows Browser (DrMemory) (%d)' % shard
  ret['builddir'] = 'windows-browser-drm-light-%d' % shard
  ret['factory'] = F_WIN_NINJA(
      target='Debug',
      slave_type='Tester',
      build_url=chromium_win_drmemory_archive,
      tests=['drmemory_light_browser_tests_%d_of_%d' % (shard, total)],
      options=['browser_tests'],
      factory_properties={ 'needs_drmemory' : True,
                           'retry_failed' : False })
  ret['category'] = '6DrMemory|drmemory_tester'
  return ret

c['builders'] = [
  b_chromium_rel_linux_valgrind_builder,
  b_chromium_rel_linux_valgrind_tests_1,
  b_chromium_rel_linux_valgrind_tests_2,
  b_chromium_rel_linux_valgrind_tests_3,
  b_chromium_rel_linux_valgrind_tests_4,
  b_chromium_rel_linux_valgrind_tests_5,

  b_chromium_rel_mac_valgrind_builder,
  b_chromium_dbg_mac_valgrind_1,
  b_chromium_dbg_mac_valgrind_2,

  b_chromium_rel_chromeos_valgrind_builder,
  b_chromium_rel_chromeos_valgrind_1,
  b_chromium_rel_chromeos_valgrind_2,
  b_chromium_rel_chromeos_valgrind_3,
  b_chromium_rel_chromeos_valgrind_4,
  b_chromium_rel_chromeos_valgrind_5,
  b_chromium_rel_chromeos_valgrind_6,

  b_webkit_rel_linux_valgrind_layout,

  b_chromium_rel_linux_tsan_1,
  b_chromium_rel_linux_tsan_2,
  b_chromium_rel_linux_tsan_3,
  b_chromium_dbg_win_tsan,

  b_chromium_dbg_win_drmemory_builder,
  b_chromium_dbg_win_drmemory,
]

WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS = 2
for i in range(WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS):
  c['builders'].append(
      windows_browser_drmemory_light_tester(
          i + 1, WINDOWS_BROWSER_DRMEMORY_LIGHT_TESTERS))

c['builders'].extend([
  b_chromium_rel_linux_tsan_clang_builder,
  b_chromium_rel_linux_tsan_clang_1,
])

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumMemoryFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.memory.fyi/'

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

if ActiveMaster.is_production_host:
  import notifier_cfg
  notifier_cfg.Update(config, ActiveMaster, c)
