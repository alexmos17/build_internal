# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Triggerable
from buildbot.scheduler import Scheduler

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list

from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumMemoryFYI

c = BuildmasterConfig = {}
c['logCompressionLimit'] = False

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=[# BuildTesters:
                                     'Linux Reliability (valgrind and tsan)',
                                     'Webkit Linux (valgrind layout)',
                                     'Windows Tests (tsan)',
                                     'Linux Heapcheck',
                                     'Chromium OS Heapcheck',

                                     # Builders
                                     'Chromium Windows Builder (DrMemory)',
                                     'Chromium Linux Builder (valgrind)',
                                     'Chromium Mac Builder (valgrind)',
                                     'Chromium OS Builder (valgrind)',
                                    ])

s_chromium_win_drmemory_trigger = Triggerable(
    'chromium_win_drmemory',
    ['Windows Tests (DrMemory)'])

s_chromium_linux_valgrind_trigger = Triggerable(
    'chromium_linux_valgrind',
    ['Linux Tests (valgrind)(1)',
     'Linux Tests (valgrind)(2)',
     'Linux Tests (valgrind)(3)',
     'Linux Tests (valgrind)(4)',
     'Linux Tests (valgrind)(5)',
     'Linux Tests (tsan)(1)',
     'Linux Tests (tsan)(2)',
     'Linux Tests (tsan)(3)',
    ])

s_chromium_mac_valgrind_trigger = Triggerable(
    'chromium_mac_valgrind',
    ['Chromium Mac (valgrind)(1)',
     'Chromium Mac (valgrind)(2)',
    ])

s_chromium_chromeos_valgrind_trigger = Triggerable(
    'chromium_chromeos_valgrind',
    ['Chromium OS (valgrind)(1)',
     'Chromium OS (valgrind)(2)',
     'Chromium OS (valgrind)(3)',
     'Chromium OS (valgrind)(4)',
     'Chromium OS (valgrind)(5)',
     'Chromium OS (valgrind)(6)',
    ])

c['schedulers'] = [s_chromium,
                   s_chromium_win_drmemory_trigger,
                   s_chromium_linux_valgrind_trigger,
                   s_chromium_mac_valgrind_trigger,
                   s_chromium_chromeos_valgrind_trigger]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_win = chromium_factory.ChromiumFactory('src/build', 'win32')
m_webkit = chromium_factory.ChromiumFactory('src/webkit', 'win32')
m_linux = chromium_factory.ChromiumFactory('src/out', 'linux2')
m_mac = chromium_factory.ChromiumFactory('src/xcodebuild', 'darwin')
m_chromeos = chromium_factory.ChromiumFactory('src/out', 'linux2')

# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumFactory
F_WEBKIT = m_webkit.ChromiumFactory
F_LINUX = m_linux.ChromiumFactory
F_MAC = m_mac.ChromiumFactory
F_CR_OS = m_chromeos.ChromiumOSFactory

chromium_win_drmemory_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium Windows Builder (DrMemory)',
    'chromium-dbg-win-drmemory-builder',
    'win32')

chromium_linux_valgrind_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium Linux Builder (valgrind)',
    'chromium-rel-linux-valgrind-builder',
    'linux')

chromium_mac_valgrind_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium Mac Builder (valgrind)',
    'chromium-rel-mac-valgrind-builder',
    'mac')

chromium_chromeos_valgrind_archive = master_config.GetArchiveUrl(
    'ChromiumMemoryFYI',
    'Chromium OS Builder (valgrind)',
    'chromium-rel-chromeos-valgrind-builder',
    'linux')

valgrind_x86_gyp_defines  = 'build_for_tool=memcheck target_arch=ia32'
valgrind_cros_gyp_defines = 'build_for_tool=memcheck chromeos=1'
valgrind_mac_gyp_defines = valgrind_x86_gyp_defines

heapcheck_gyp_defines = (
  'linux_use_tcmalloc=1 '
  'linux_use_heapchecker=1 '
  'linux_keep_shadow_stacks=1 '
  # TODO: Remove when crbug.com/112389 is fixed.
  'component=static_library '
  'werror= '
)
heapcheck_cros_gyp_defines = heapcheck_gyp_defines + ' chromeos=1'

# IMPORTANT NOTE about adding new tests.
# If you want to add a new test, you first need to make sure it's:
# a) buildable,
# b) runnable by the tools and
# c) the e-mail notifier is configured to watch for its failures.
#
# Also, please do your best to estimate the time it takes to run the new test
# under the tool and order the tests in a short-job-first manner if possible.
#
# Regarding (a),
#   New Valgrind/Mac tests must first be added as dependencies to the
#     'chromium_builder_dbg_valgrind_mac' target in src/build/all.gyp;
#   New TSan/Win tests must first be added as dependencies to the
#     'chromium_builder_dbg_tsan_win' target in src/build/all.gyp;
#   New DrMemory/Win tests must first be added as dependencies to the
#     'chromium_builder_dbg_drmemory_win' target in src/build/all.gyp;
#
# Regarding (b),
#   'chrome_tests.py' must be updated to handle the test name,
#   without the 'TOOL_' prefix, where 'chrome_tests.py' is located
#     at tools/heapcheck/ for Heapchecker tests,
#     at tools/valgrind/ for other tools.
#
# Regarding (c),
#   See notifier_cfg.py for the existing tests and see the 'category' of the
#   builder you're dealing with.

f_chromium_rel_linux_valgrind_builder = F_LINUX(
    target='Release',
    slave_type='Builder',
    options=['--compiler=goma',
             'base_unittests',
             'content_unittests',
             'components_unittests',
             'crypto_unittests',
             'device_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'ppapi_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sandbox_linux_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_unittests',
             'unit_tests',
             ],
    factory_properties={
        'gclient_env': { 'GYP_DEFINES' : 'build_for_tool=memcheck' },
        'trigger': 'chromium_linux_valgrind',
    }
)

f_chromium_rel_linux_valgrind_tests_1 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_crypto',
           'valgrind_content',
           'valgrind_sync',
           'valgrind_net',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_2 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_googleurl',
           'valgrind_printing',
           'valgrind_sql',
           'valgrind_sandbox',
           'valgrind_ipc_tests',
           'valgrind_ui_unittests',
           'valgrind_remoting',
           'valgrind_base_unittests',
           'valgrind_media',
           'valgrind_components',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_3 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit_1_of_3'],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_4 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit_2_of_3'],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_tests_5 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit_3_of_3'],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_valgrind_reliability = F_LINUX(
    target='Release',
    tests=[
        'valgrind_reliability',
        'tsan_reliability',
    ],
    options=[
        'reliability_tests',
    ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : 'build_for_tool=memcheck'}
    }
)

# Mac Valgrind bots:
# We use debug builds for mac valgrind bots because we can't get stacks on
# release builds.
f_cr_rel_mac_valgrind_builder = F_MAC(
    slave_type='Builder',
    target='Debug',
    factory_properties={
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines },
        'trigger': 'chromium_mac_valgrind',
    },
    options=[
        '--compiler=goma-clang', '--', '-project', '../build/all.xcodeproj',
        '-target', 'chromium_builder_dbg_valgrind_mac'])

# unit_tests are disabled under Valgrind on Mac OS because of crbug.com/51716.
# We're still building them to be able to reproduce the crashes on bots.
f_cr_dbg_mac_valgrind_1 = F_MAC(
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    factory_properties={ 'needs_valgrind' : True, },
    # See IMPORTANT NOTE above before adding new tests.
    tests=['valgrind_base_unittests',
           'valgrind_crypto',
           'valgrind_googleurl',
           'valgrind_ipc_tests',
           'valgrind_media',
           'valgrind_printing',
           'valgrind_remoting',
           'valgrind_sql',
           'valgrind_ui_unittests',
           # See above.
           #'valgrind_unit_1_of_4',
           #'valgrind_unit_2_of_4',
           ])

f_cr_dbg_mac_valgrind_2 = F_MAC(
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    factory_properties={ 'needs_valgrind' : True, },
    # See IMPORTANT NOTE above before adding new tests.
    tests=['valgrind_net',
           'valgrind_content',
           # See above.
           #'valgrind_unit_3_of_4',
           #'valgrind_unit_4_of_4',
           ])

# ChromeOS Valgrind bots:
f_chromium_rel_chromeos_valgrind_builder = F_CR_OS(
    target='Release',
    slave_type='Builder',
    options=['--compiler=goma',
             'ash_unittests',
             'aura_unittests',
             'base_unittests',
             'chromeos_unittests',
             'components_unittests',
             'compositor_unittests',
             'content_unittests',
             'crypto_unittests',
             'device_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'ppapi_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sandbox_linux_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_unittests',
             'unit_tests',
             'views_unittests',
             ],
    factory_properties={
        'gclient_env': {'GYP_DEFINES' : valgrind_cros_gyp_defines},
        'trigger': 'chromium_chromeos_valgrind',
    })

f_chromium_rel_chromeos_valgrind_tests_1 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_net'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_2 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_googleurl',
           'valgrind_ipc_tests',
           'valgrind_printing',
           'valgrind_remoting',
           'valgrind_sql',
           'valgrind_ui_unittests',
           'valgrind_components',
           'valgrind_media',
           ],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_3 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_ash_unittests',
           'valgrind_aura',
           'valgrind_base_unittests',
           'valgrind_chromeos_unittests',
           'valgrind_content',
           'valgrind_compositor',
           'valgrind_crypto',
           'valgrind_sandbox',
           'valgrind_views',
           ],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_4 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_unit_1_of_3'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_5 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_unit_2_of_3'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_chromium_rel_chromeos_valgrind_tests_6 = F_CR_OS(
    target='Release',
    slave_type='Tester',
    build_url=chromium_chromeos_valgrind_archive,
    tests=['valgrind_unit_3_of_3'],
    factory_properties={ 'needs_valgrind' : True, 'chromeos': True })

f_webkit_rel_linux_valgrind_layout = F_LINUX(
    target='Release',
    tests=['valgrind_webkit'],
    options=['test_shell', 'DumpRenderTree'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : 'build_for_tool=memcheck'}})

# ThreadSanitizer bots:
f_chromium_rel_linux_tsan_1 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=['tsan_googleurl',
           'tsan_printing',
           'tsan_media',
           'tsan_unit_1_of_3',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_tsan_2 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=['tsan_sql',
           'tsan_ui_unittests',
           'tsan_ipc_tests',
           'tsan_components',
           'tsan_net',
           'tsan_unit_2_of_3',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_rel_linux_tsan_3 = F_LINUX(
    target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=['tsan_crypto',
           'tsan_remoting',
           'tsan_sync',
           'tsan_content',
           'tsan_base_unittests',
           'tsan_unit_3_of_3',
           ],
    factory_properties={ 'needs_valgrind' : True, })

f_chromium_dbg_win_tsan = F_WIN(
    target='Debug',
    # See IMPORTANT NOTE above before adding new tests.
    tests=[
      'tsan_googleurl',
      'tsan_printing',
      'tsan_sql',
      'tsan_ipc_tests',
      'tsan_crypto',
      'tsan_components',
      'tsan_base_unittests',
      'tsan_remoting',
      'tsan_media',
      'tsan_net',
    ],
    project='all.sln;chromium_builder_dbg_tsan_win',
    factory_properties={
      'needs_tsan_win' : True,
      'gclient_env': {
        'GYP_DEFINES' : 'build_for_tool=tsan'
      },
    },
)

# Dr.Memory bots:
f_chromium_dbg_win_drmemory_builder = F_WIN(
    # TODO(timurrrr): reuse the builder for TSan/Win too once
    # http://crbug.com/108155 is resolved.
    slave_type='Builder',
    target='Debug',
    project='all.sln;chromium_builder_dbg_drmemory_win',
    factory_properties={
      'gclient_env': {'GYP_DEFINES': 'build_for_tool=drmemory'},
      'package_pdb_files': True,
      'trigger': 'chromium_win_drmemory',
    })

f_chromium_dbg_win_drmemory = F_WIN(
    slave_type='Tester',
    target='Debug',
    build_url=chromium_win_drmemory_archive,
    # See IMPORTANT NOTE above before adding new tests.
    tests=[
      'drmemory_light_googleurl',
      'drmemory_light_printing',
      'drmemory_light_media',
      'drmemory_light_sql',
      'drmemory_light_crypto',
      'drmemory_light_remoting',
      'drmemory_light_ipc_tests',
      'drmemory_light_base_unittests',
      'drmemory_light_net',
      'drmemory_light_components',
      'drmemory_light_unit',
    ],
    factory_properties={'needs_drmemory': True}
)

# Heapcheck bots:
f_chromium_dbg_linux_heapcheck = F_LINUX(
    target='Debug',
    options=['--compiler=goma',
             'base_unittests',
             'compositor_unittests',
             'content_unittests',
             'courgette_unittests',
             'crypto_unittests',
             'DumpRenderTree',
             'device_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'ppapi_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_unittests',
             'unit_tests',
             ],
    # See IMPORTANT NOTE above before adding new tests.
    tests=['heapcheck_googleurl',
           'heapcheck_printing',
           'heapcheck_media',
           'heapcheck_content',
           'heapcheck_courgette',
           'heapcheck_remoting',
           'heapcheck_sql',
           'heapcheck_sync',
           'heapcheck_ipc_tests',
           'heapcheck_base_unittests',
           'heapcheck_crypto',
           'heapcheck_device_unittests',
           'heapcheck_net',
           'heapcheck_ui_unittests',
           'heapcheck_unit',
           ],
    factory_properties={
        'gclient_env': {'GYP_DEFINES' : heapcheck_gyp_defines} },
)

f_chromium_dbg_chromeos_heapcheck = F_CR_OS(
    target='Debug',
    options=['--compiler=goma',
             'ash_unittests',
             'aura_unittests',
             'base_unittests',
             'chromeos_unittests',
             'compositor_unittests',
             'content_unittests',
             'courgette_unittests',
             'crypto_unittests',
             'DumpRenderTree',
             'device_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'ppapi_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_unittests',
             'unit_tests',
             'views_unittests',
             ],
    # See IMPORTANT NOTE above before adding new tests.
    tests=['heapcheck_ash_unittests',
           'heapcheck_aura',
           'heapcheck_googleurl',
           'heapcheck_printing',
           'heapcheck_media',
           'heapcheck_chromeos_unittests',
           'heapcheck_compositor',
           'heapcheck_content',
           'heapcheck_courgette',
           'heapcheck_remoting',
           'heapcheck_sql',
           'heapcheck_sync',
           'heapcheck_ipc_tests',
           'heapcheck_base_unittests',
           'heapcheck_crypto',
           'heapcheck_device_unittests',
           'heapcheck_net',
           'heapcheck_ui_unittests',
           'heapcheck_unit',
           'heapcheck_views',
           ],
    factory_properties={
        'gclient_env': {'GYP_DEFINES' : heapcheck_cros_gyp_defines} },
)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_linux_valgrind_builder = {
  'name': 'Chromium Linux Builder (valgrind)',
  'builddir': 'chromium-rel-linux-valgrind-builder',
  'factory': f_chromium_rel_linux_valgrind_builder,
  'category': '1Linux Valgrind|compile',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_tests_1 = {
  'name': 'Linux Tests (valgrind)(1)',
  'builddir': 'chromium-rel-linux-valgrind-tests-1',
  'factory': f_chromium_rel_linux_valgrind_tests_1,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_tests_2 = {
  'name': 'Linux Tests (valgrind)(2)',
  'builddir': 'chromium-rel-linux-valgrind-tests-2',
  'factory': f_chromium_rel_linux_valgrind_tests_2,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_tests_3 = {
  'name': 'Linux Tests (valgrind)(3)',
  'builddir': 'chromium-rel-linux-valgrind-tests-3',
  'factory': f_chromium_rel_linux_valgrind_tests_3,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_tests_4 = {
  'name': 'Linux Tests (valgrind)(4)',
  'builddir': 'chromium-rel-linux-valgrind-tests-4',
  'factory': f_chromium_rel_linux_valgrind_tests_4,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_tests_5 = {
  'name': 'Linux Tests (valgrind)(5)',
  'builddir': 'chromium-rel-linux-valgrind-tests-5',
  'factory': f_chromium_rel_linux_valgrind_tests_5,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_valgrind_reliability = {
  'name': 'Linux Reliability (valgrind and tsan)',
  'builddir': 'chromium-rel-linux-valgrind-reliability',
  'factory': f_chromium_rel_linux_valgrind_reliability,
  'category': '1Linux Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_mac_valgrind_builder = {
  'name': 'Chromium Mac Builder (valgrind)',
  'builddir': 'chromium-rel-mac-valgrind-builder',
  'factory': f_cr_rel_mac_valgrind_builder,
  'category': '2Mac Valgrind|compile',
  'auto_reboot': False,
}

b_chromium_dbg_mac_valgrind_1 = {
  'name': 'Chromium Mac (valgrind)(1)',
  'builddir': 'chromium-dbg-mac-valgrind-1',
  'factory': f_cr_dbg_mac_valgrind_1,
  'category': '2Mac Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_dbg_mac_valgrind_2 = {
  'name': 'Chromium Mac (valgrind)(2)',
  'builddir': 'chromium-dbg-mac-valgrind-2',
  'factory': f_cr_dbg_mac_valgrind_2,
  'category': '2Mac Valgrind|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_builder = {
  'name': 'Chromium OS Builder (valgrind)',
  'builddir': 'chromium-rel-chromeos-valgrind-builder',
  'factory': f_chromium_rel_chromeos_valgrind_builder,
  'category': '3ChromeOS Valgrind|compile',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_1 = {
  'name': 'Chromium OS (valgrind)(1)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-1',
  'factory': f_chromium_rel_chromeos_valgrind_tests_1,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_2 = {
  'name': 'Chromium OS (valgrind)(2)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-2',
  'factory': f_chromium_rel_chromeos_valgrind_tests_2,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_3 = {
  'name': 'Chromium OS (valgrind)(3)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-3',
  'factory': f_chromium_rel_chromeos_valgrind_tests_3,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_4 = {
  'name': 'Chromium OS (valgrind)(4)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-4',
  'factory': f_chromium_rel_chromeos_valgrind_tests_4,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_5 = {
  'name': 'Chromium OS (valgrind)(5)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-5',
  'factory': f_chromium_rel_chromeos_valgrind_tests_5,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_chromeos_valgrind_6 = {
  'name': 'Chromium OS (valgrind)(6)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-6',
  'factory': f_chromium_rel_chromeos_valgrind_tests_6,
  'category': '3ChromeOS Valgrind|compile|memory_tester',
  'auto_reboot': False,
}

b_webkit_rel_linux_valgrind_layout = {
  'name': 'Webkit Linux (valgrind layout)',
  'builddir': 'webkit-rel-linux-valgrind-layout',
  'factory': f_webkit_rel_linux_valgrind_layout,
  'category': '4WebKit Valgrind|compile|memory_tester',
  'auto_reboot': True,
}

b_chromium_rel_linux_tsan_1 = {
  'name': 'Linux Tests (tsan)(1)',
  'builddir': 'chromium-rel-linux-tsan-1',
  'factory': f_chromium_rel_linux_tsan_1,
  'category': '5ThreadSanitizer|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_tsan_2 = {
  'name': 'Linux Tests (tsan)(2)',
  'builddir': 'chromium-rel-linux-tsan-2',
  'factory': f_chromium_rel_linux_tsan_2,
  'category': '5ThreadSanitizer|memory_tester',
  'auto_reboot': False,
}

b_chromium_rel_linux_tsan_3 = {
  'name': 'Linux Tests (tsan)(3)',
  'builddir': 'chromium-rel-linux-tsan-3',
  'factory': f_chromium_rel_linux_tsan_3,
  'category': '5ThreadSanitizer|memory_tester',
  'auto_reboot': False,
}

b_chromium_dbg_win_tsan = {
  'name': 'Windows Tests (tsan)',
  'builddir': 'chromium-dbg-win-tsan',
  'factory': f_chromium_dbg_win_tsan,
  'category': '5ThreadSanitizer|compile|memory_tester',
  'auto_reboot': False,
}

b_chromium_dbg_win_drmemory_builder = {
  'name': 'Chromium Windows Builder (DrMemory)',
  'builddir': 'chromium-dbg-win-drmemory-builder',
  'factory': f_chromium_dbg_win_drmemory_builder,
  'category': '6DrMemory|compile',
  'auto_reboot': False,
}

b_chromium_dbg_win_drmemory = {
  'name': 'Windows Tests (DrMemory)',
  'builddir': 'chromium-dbg-win-drmemory',
  'factory': f_chromium_dbg_win_drmemory,
  'category': '6DrMemory|drmemory_tester',
  'auto_reboot': False,
}

b_chromium_dbg_linux_heapcheck = {
  'name': 'Linux Heapcheck',
  'builddir': 'chromium-dbg-linux-heapcheck',
  'factory': f_chromium_dbg_linux_heapcheck,
  'category': '7Heapcheck|heapcheck_tester',
  'auto_reboot': False,
}

b_chromium_dbg_chromeos_heapcheck = {
  'name': 'Chromium OS Heapcheck',
  'builddir': 'chromium-dbg-chromeos-heapcheck',
  'factory': f_chromium_dbg_chromeos_heapcheck,
  'category': '7Heapcheck|heapcheck_tester',
  'auto_reboot': False,
}

c['builders'] = [
  b_chromium_rel_linux_valgrind_builder,
  b_chromium_rel_linux_valgrind_tests_1,
  b_chromium_rel_linux_valgrind_tests_2,
  b_chromium_rel_linux_valgrind_tests_3,
  b_chromium_rel_linux_valgrind_tests_4,
  b_chromium_rel_linux_valgrind_tests_5,
  b_chromium_rel_linux_valgrind_reliability,

  b_chromium_rel_mac_valgrind_builder,
  b_chromium_dbg_mac_valgrind_1,
  b_chromium_dbg_mac_valgrind_2,

  b_chromium_rel_chromeos_valgrind_builder,
  b_chromium_rel_chromeos_valgrind_1,
  b_chromium_rel_chromeos_valgrind_2,
  b_chromium_rel_chromeos_valgrind_3,
  b_chromium_rel_chromeos_valgrind_4,
  b_chromium_rel_chromeos_valgrind_5,
  b_chromium_rel_chromeos_valgrind_6,

  b_webkit_rel_linux_valgrind_layout,

  b_chromium_rel_linux_tsan_1,
  b_chromium_rel_linux_tsan_2,
  b_chromium_rel_linux_tsan_3,
  b_chromium_dbg_win_tsan,

  b_chromium_dbg_win_drmemory_builder,
  b_chromium_dbg_win_drmemory,

  b_chromium_dbg_linux_heapcheck,
  b_chromium_dbg_chromeos_heapcheck,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumMemoryFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

if ActiveMaster.is_production_host:
  import notifier_cfg
  notifier_cfg.Update(config, ActiveMaster, c)

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.memory.fyi/'
