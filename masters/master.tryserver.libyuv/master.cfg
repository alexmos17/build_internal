# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import chromium_factory
from master.factory import libyuv_factory
from master.try_job_http import TryJobHTTP
from master.try_mail_notifier import TryMailNotifier

import config
import master_site_config
ActiveMaster = master_site_config.LibyuvTryServer

MAIL_NOTIFIER = True
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES
c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False

####### BUILDERS

def linux(): return libyuv_factory.LibyuvFactory('src/out', 'linux2')
def mac(): return libyuv_factory.LibyuvFactory('src/out', 'darwin')
def mac_ios(): return libyuv_factory.LibyuvFactory('src/out', 'darwin',
                                                   target_os='ios')
def win(): return libyuv_factory.LibyuvFactory('src/out', 'win32')
def android():
  return libyuv_factory.LibyuvFactory('', 'linux2', nohooks_on_update=True,
                                      target_os='android')
tests = ['libyuv_unittest']
asan_gyp_defines = 'asan=1 release_extra_cflags=-g linux_use_tcmalloc=0'
options = ['--clobber-post-fail']
ninja_options = options + ['--build-tool=ninja']
win_factory_prop = {
    'gclient_env': {'GYP_GENERATOR_FLAGS': 'msvs_error_on_missing_sources=1'},
}
mac_ios_factory_properties = {
    'gclient_env': {
        'GYP_CROSSCOMPILE': '1',
        'GYP_DEFINES': 'OS=ios target_arch=armv7',
    }
}

# Set up all the builders.

# Windows.
b_win = {
    'name': 'win',
    'factory': win().LibyuvFactory(
        target='Debug',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties=win_factory_prop)
}

b_win_rel = {
    'name': 'win_rel',
    'factory': win().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties=win_factory_prop)
}

b_win_x64_rel = {
    'name': 'win_x64_rel',
    'factory': win().LibyuvFactory(
        target='Release_x64',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties={
            'gclient_env': {'GYP_DEFINES': 'target_arch=x64'}
        })
}

# Mac.
b_mac = {
    'name': 'mac',
    'factory': mac().LibyuvFactory(
        target='Debug',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests)
}

b_mac_rel = {
    'name': 'mac_rel',
    'factory': mac().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests)
}

b_mac_x64_rel = {
    'name': 'mac_x64_rel',
    'factory': mac().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties={
            'gclient_env': {'GYP_DEFINES': 'host_arch=x64 target_arch=x64'}
        })
}

b_mac_asan = {
    'name': 'mac_asan',
    'factory': mac().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties={
            'asan': True,
            'gclient_env': {'GYP_DEFINES': asan_gyp_defines},
        })
}

b_ios = {
    'name': 'ios',
    'factory': mac_ios().LibyuvFactory(
        target='Debug-iphoneos',
        slave_type='Trybot',
        options=ninja_options,
        factory_properties=mac_ios_factory_properties)
}

b_ios_rel = {
    'name': 'ios_rel',
    'factory': mac_ios().LibyuvFactory(
        target='Release-iphoneos',
        slave_type='Trybot',
        options=ninja_options,
        factory_properties=mac_ios_factory_properties)
}

# Linux.
b_linux = {
    'name': 'linux',
    'factory': linux().LibyuvFactory(
        target='Debug',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests)
}

b_linux_rel = {
    'name': 'linux_rel',
    'factory': linux().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests)
}

b_linux_memcheck = {
    'name': 'linux_memcheck',
    'factory': linux().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties={
            'needs_valgrind': True,
            'gclient_env': {'GYP_DEFINES': 'build_for_tool=memcheck'},
        })
}

b_linux_tsan = {
    'name': 'linux_tsan',
    'factory': linux().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties={
            'needs_valgrind': True,
            'gclient_env': {'GYP_DEFINES': 'build_for_tool=tsan'},
        })
}

b_linux_asan = {
    'name': 'linux_asan',
    'factory': linux().LibyuvFactory(
        target='Release',
        slave_type='Trybot',
        options=ninja_options,
        tests=tests,
        factory_properties={
            'asan': True,
            'gclient_env': {'GYP_DEFINES': asan_gyp_defines},
        })
}

b_android = {
    'name': 'android',
    'factory': android().ChromiumAnnotationFactory(
        target='Debug',
        slave_type='AnnotatedTrybot',
        annotation_script='src/build/android/buildbot/bb_run_bot.py',
        factory_properties={
            'android_bot_id': 'libyuv-main-clobber-dbg',
        })
}

b_android_rel = {
    'name': 'android_rel',
    'factory': android().ChromiumAnnotationFactory(
        target='Release',
        slave_type='AnnotatedTrybot',
        annotation_script='src/build/android/buildbot/bb_run_bot.py',
        factory_properties={
            'android_bot_id': 'libyuv-main-clobber',
        })
}

c['builders'] = [
  b_win,
  b_win_rel,
  b_win_x64_rel,
  b_mac,
  b_mac_rel,
  b_mac_x64_rel,
  b_ios,
  b_ios_rel,
  b_mac_asan,
  b_linux,
  b_linux_rel,
  b_linux_memcheck,
  b_linux_tsan,
  b_linux_asan,
  b_android,
  b_android_rel,
]

# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'LibyuvTryServer')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Disable auto_reboot when testing locally, but don't change for production.
  if not ActiveMaster.is_production_host:
    builder['auto_reboot'] = False


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### SCHEDULERS

pools = BuildersPools('libyuv')
pools['libyuv'].append('win')
pools['libyuv'].append('win_rel')
pools['libyuv'].append('win_x64_rel')
pools['libyuv'].append('mac')
pools['libyuv'].append('mac_rel')
pools['libyuv'].append('mac_x64_rel')
pools['libyuv'].append('mac_asan')
pools['libyuv'].append('ios')
pools['libyuv'].append('ios_rel')
pools['libyuv'].append('linux')
pools['libyuv'].append('linux_rel')
pools['libyuv'].append('linux_memcheck')
pools['libyuv'].append('linux_tsan')
pools['libyuv'].append('linux_asan')
pools['webrtc'].append('android')
pools['webrtc'].append('android_rel')

# Configure the Schedulers;
c['schedulers'] = []

code_review_sites = {'libyuv': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
    name='libyuv_try_job_http',
    port=ActiveMaster.try_job_port,
    last_good_urls=None,
    code_review_sites=code_review_sites,
    pools=pools))

if LISTEN_TO_SVN:
  from master.try_job_svn import TryJobSubversion
  c['schedulers'].append(TryJobSubversion(
      name='libyuv_try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=None,
      code_review_sites=code_review_sites,
      pools=pools))

####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.libyuv/'

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster, mail_notifier=False,
                             order_console_by_time=True,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.chromium/templates'])

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      reply_to=ActiveMaster.reply_to,
      subject='try %(result)s for %(reason)s',
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs.
c['buildHorizon'] = 2000
c['logHorizon'] = 2000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 100
# Must be at least 2x the number of on-going builds.
c['buildCacheSize'] = 100

####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'
