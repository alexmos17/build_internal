# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'toolkit' bot.


import config
import master_site_config

from buildbot.changes.gitpoller import GitPoller
from buildbot.scheduler import Scheduler
from master import master_utils
from master import slaves_list
from master.factory import annotator_factory


ActiveMaster = master_site_config.Toolkit

WEB_STATUS = True
MAIL_NOTIFIER = True
TREE_GATE_KEEPER = False

MASTER_PORT = ActiveMaster.master_port

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### CHANGESOURCES

poller = GitPoller(repourl='http://github.com/toolkitchen/toolkit',
                   branch='master',
                   workdir='gitpoller-workdir',
                   pollinterval=30)

c['change_source'] = [poller]


####### SCHEDULERS

s_toolkit = Scheduler(name='toolkit',
                      branch='master',
                      treeStableTimer=60,
                      builderNames=['Win Tester',
                                    'Mac Tester',
                                    'Linux Tester'])

c['schedulers'] = [s_toolkit]


####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

f_annotated = annotator_factory.AnnotatorFactory().BaseFactory(recipe='cdm')


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_win = {
  'name': 'Win Tester',
  'builddir': 'win-tester',
  'factory': f_annotated,
  'auto_reboot': False,
}

b_mac = {
  'name': 'Mac Tester',
  'builddir': 'mac-tester',
  'factory': f_annotated,
  'auto_reboot': False,
}

b_linux = {
  'name': 'Linux Tester',
  'builddir': 'linux-tester',
  'factory': f_annotated,
  'auto_reboot': False,
}

c['builders'] = [b_win, b_mac, b_linux]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'Toolkit')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools (web status, mail notifier) to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, mail_notifier=MAIL_NOTIFIER)


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = ActiveMaster.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/toolkit/'
