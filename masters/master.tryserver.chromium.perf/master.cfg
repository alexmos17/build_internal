# -*- python -*-
# ex: set syntax=python:
# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

import os
import socket

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_config
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import chromium_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_job_svn import TryJobSubversion

import config
import master_site_config

ActiveMaster = master_site_config.ChromiumPerfTryServer


MAIL_NOTIFIER = ActiveMaster.is_production_host
UPDATE_CODEREVIEW = ActiveMaster.is_production_host
LISTEN_TO_RIETVELD = ActiveMaster.is_production_host
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False

m_chromium_win = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='win32',
    full_checkout=True)

m_chromium_linux = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='linux2',
    full_checkout=True)

m_chromium_mac = chromium_factory.ChromiumFactory(
    'src/xcodebuild',
    target_platform='darwin',
    full_checkout=True)

m_chromium_mac_ninja = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='darwin',
    full_checkout=True)

m_chromium_android = chromium_factory.ChromiumFactory(
    '',
    target_platform='linux2',
    nohooks_on_update=True,
    target_os='android',
    full_checkout=True)

m_chromium_win_builder = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='win32')

m_chromium_linux_builder = chromium_factory.ChromiumFactory(
    'src/out',
    target_platform='linux2')

m_chromium_mac_builder = chromium_factory.ChromiumFactory(
    'src/xcodebuild',
    target_platform='darwin')

m_chromium_android_builder = chromium_factory.ChromiumFactory(
    '',
    target_platform='linux2',
    nohooks_on_update=True,
    target_os='android')

def CreateBuilder(builder_name, target,
                  options, tests,
                  slavebuilddir=None,
                  factory_properties=None,
                  annotation_script=None,
                  maxTime=8*60*60,
                  slave_type='Trybot'):
  """Generates and register a builder along with its slave(s)."""
  assert tests is not None or annotation_script, (
      'Must either specify tests or use an annotation script')

  factory_properties = (factory_properties or {}).copy()
  factory_properties.setdefault('gclient_env', {})
  factory_properties['gclient_env'].setdefault('GYP_DEFINES', '')
  if not 'fastbuild=0' in factory_properties['gclient_env']['GYP_DEFINES']:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' fastbuild=1'

  build_tool = []
  factory = m_chromium_android

  factory_properties['gclient_env']['GYP_GENERATORS'] = 'ninja'
  build_tool.append('--build-tool=ninja')

  options = build_tool + ['--clobber-post-fail'] + (options or [])

  compile_timeout = 3600
  assert annotation_script
  # Note new slave type AnnotatedTrybot; we don't want a compile step added
  # in gclient_factory.py.
  builder_factory = factory.ChromiumAnnotationFactory(
      slave_type='AnnotatedTrybot', target=target, tests=tests,
      options=options,
      compile_timeout=compile_timeout,
      factory_properties=factory_properties,
      annotation_script=annotation_script, maxTime=maxTime)
  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info


def AndroidBisectBuilderTester(device):
  return CreateBuilder(
      target='Release',
      builder_name='android_%s_perf_bisect' % device,
      slavebuilddir='android',
      maxTime=12*60*60,
      options=[],
      tests=[],
      annotation_script='src/build/android/buildbot/bb_run_bot.py',
      factory_properties={
          'android_bot_id': 'perf-bisect-builder-tests-dbg-%s' % device,
          'gclient_timeout': 3600
      })

# Android bisect builders cum testers.
b_android_gn_perf_bisect = AndroidBisectBuilderTester('gn')
b_android_nexus4_perf_bisect = AndroidBisectBuilderTester('nexus4')
b_android_nexus5_perf_bisect = AndroidBisectBuilderTester('nexus5')
b_android_nexus7_perf_bisect = AndroidBisectBuilderTester('nexus7')
b_android_nexus10_perf_bisect = AndroidBisectBuilderTester('nexus10')

# Bisect bots
def gen_android_bisect_builder(name, factory, archive):
  return {'name': name,
          'slavebuilddir': name,
          'factory': factory.ChromiumAnnotationFactory(
              slave_type='AnnotatedTrybot',
              compile_timeout=2400,
              options=[
                  '--compiler=goma', '--',
                  'chromium_builder_perf'],
              factory_properties={
                  'android_bot_id': 'perf-builder-rel',
                  'gclient_env': {
                      'GYP_DEFINES': 'branding=Chrome buildtype=Official'},
                  'build_url': archive,
                  'append_deps_patch_sha': True,
              },
              annotation_script='src/build/android/buildbot/bb_run_bot.py'),
         }

def gen_win_bisect_builder(name, factory, archive):
  return {'name': name,
          'slavebuilddir': name,
          'factory': factory.ChromiumFactory(
              slave_type='TrybotBuilder',
              mode='google_chrome',
              compile_timeout=4800,
              project='all.sln;chromium_builder_perf',
              factory_properties={
                'create_profiles': True,
                'gclient_env': {
                  # TODO(tonyg|scottmg): Re-enable symbols.
                  # http://crbug.com/327165
                  'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                                 'component=static_library fastbuild=1',
                },
                'build_url': archive,
                'append_deps_patch_sha': True,
              }),
         }


def gen_linux_bisect_builder(name, factory, archive):
  return {'name': name,
          'slavebuilddir': name,
          'factory': factory.ChromiumFactory(
              slave_type='TrybotBuilder',
              mode='official',
              compile_timeout=2400,
              options=[
                  '--compiler=goma', '--',
                  'chromium_builder_perf'],
              factory_properties={
                  'create_profiles': True,
                  'gclient_env': {
                      'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                          'target_arch=x64 component=static_library '
                          'linux_strip_binary=1 '},
                  'build_url': archive,
                  'append_deps_patch_sha': True,
              }),
         }

def gen_mac_bisect_builder(name, factory, archive):
  return {'name': name,
          'slavebuilddir': name,
          'factory': factory.ChromiumFactory(
              slave_type='TrybotBuilder',
              mode='official',
              compile_timeout=2400,
              options=[
                  '--compiler=goma-clang', '--',
                  '-target', 'chromium_builder_perf'],
              factory_properties={
                  'create_profiles': True,
                  'gclient_env': {
                      # clang=1 in GYP_DEFINES is added to branded builds
                      # automatically, but ChromiumFactory needs it to know that
                      # an "update clang" step has to be added.
                      'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                                     'clang=1 component=static_library'
                   },
                   'build_url': archive,
                   'append_deps_patch_sha': True,
              }),
         }


def gen_bisect_bot(name, factory):
  return {'name': name,
          'slavebuilddir': name,
          'factory': factory.ChromiumFactory(
              slave_type='Bisect',
              tests=[
                'bisect_revisions',
              ]),
         }

b_android_perf_builder = gen_android_bisect_builder(
    'android_perf_bisect_builder',
    m_chromium_android_builder,
    master_config.GetGSUtilUrl('chrome-perf', 'android_perf_rel'))

b_linux_perf_builder = gen_linux_bisect_builder(
    'linux_perf_bisect_builder',
    m_chromium_linux_builder,
    master_config.GetGSUtilUrl('chrome-perf', 'Linux Builder'))

b_mac_perf_builder = gen_mac_bisect_builder(
    'mac_perf_bisect_builder',
    m_chromium_mac_builder,
    master_config.GetGSUtilUrl('chrome-perf', 'Mac Builder'))

b_win_perf_builder = gen_win_bisect_builder(
    'win_perf_bisect_builder',
    m_chromium_win_builder,
    master_config.GetGSUtilUrl('chrome-perf', 'Win Builder'))

b_linux_perf_bisect = gen_bisect_bot('linux_perf_bisect',
                                     m_chromium_linux)

b_mac_perf_bisect = gen_bisect_bot('mac_perf_bisect',
                                   m_chromium_mac_ninja)

b_mac_10_9_perf_bisect = gen_bisect_bot('mac_10_9_perf_bisect',
                                        m_chromium_mac_ninja)

b_win_perf_bisect = gen_bisect_bot('win_perf_bisect',
                                   m_chromium_win)

b_win_xp_perf_bisect = gen_bisect_bot('win_xp_perf_bisect',
                                      m_chromium_win)

b_win_8_perf_bisect = gen_bisect_bot('win_8_perf_bisect',
                                      m_chromium_win)

c['builders'] = [
  b_android_perf_builder,
  b_linux_perf_builder,
  b_mac_perf_builder,
  b_win_perf_builder,
  b_linux_perf_bisect,
  b_mac_perf_bisect,
  b_mac_10_9_perf_bisect,
  b_win_perf_bisect,
  b_win_xp_perf_bisect,
  b_win_8_perf_bisect,
  b_android_gn_perf_bisect,
  b_android_nexus4_perf_bisect,
  b_android_nexus5_perf_bisect,
  b_android_nexus7_perf_bisect,
  b_android_nexus10_perf_bisect,
]

slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumPerfTryServer')

for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  builder.setdefault('auto_reboot', ActiveMaster.is_production_host)

c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

master_utils.VerifySetup(c, slaves)

c['schedulers'] = []

pools = BuildersPools('chrome')
pools['chrome'].extend([builder['name'] for builder in c['builders']])

code_review_sites = {'chrome': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      code_review_sites=code_review_sites,
      pools=pools))

if LISTEN_TO_RIETVELD:
  c['schedulers'].append(TryJobRietveld(
        name='try_job_rietveld',
        code_review_sites=code_review_sites,
        pools=pools,
        project='chrome',
        filter_master=True))

if LISTEN_TO_SVN:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      code_review_sites=code_review_sites,
      pools=pools))

# Buildbot master url:
# Must come before AutoSetupMaster().
if ActiveMaster.is_production_host:
  c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.chromium.perf/'
else:
  c['buildbotURL'] = 'http://%s:%d/' % (
      socket.getfqdn(), ActiveMaster.master_port)

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster, False)

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  from master import chromium_notifier
  c['status'].append(chromium_notifier.ChromiumNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps={'': ['update_scripts']},
      relayhost=config.Master.smtp,
      status_header=
          '%(steps)s failed on slave "%(slavename)s" for builder "%(builder)s"',
      subject='%(steps)s failed on trybot on %(date)s',
      sendToInterestedUsers=False,
      extraRecipients=['chrome-troopers+tryalert@google.com'],
      use_getname=True,
      enable_mail=ActiveMaster.is_production_host))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      reply_to=ActiveMaster.reply_to,
      subject="try %(result)s for %(reason)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))


# The followings are what is kept on disk.
# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs. 3000 is not even a full day but the server is full. Keep
# more build objects than log since they are much smaller.
c['buildHorizon'] = 6000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
c['logCompressionLimit'] = False

# Adjust the buildCaches to be 3x the number of slaves per builder.
c['autoBuildCacheRatio'] = 3

c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# vi: set ts=4 sts=2 sw=2 et:
