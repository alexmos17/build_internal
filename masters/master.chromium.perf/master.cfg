# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromium' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_cr_rel_[type]
# Builders:  b_chromium_rel_[os]_[type]
# BuildDir:  chromium-rel-[os]-[type]
#
# os = xp/vista/linux/mac
# type = perf

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from common import chromium_utils

from master import build_utils
from master import chromium_notifier
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config
import master_site_config

ActiveMaster = master_site_config.ChromiumPerf


# Enable MAIL_NOTIFIER in production to send perf sheriff alerts.
MAIL_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

# Disable compression for the stdio files.
c['logCompressionLimit'] = False

# Load the list of slaves.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumPerf')

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)


# ------------------------------------------------------------------------------
# Benchmarks.
#
# FORMAT:
#   (EXPECTED_RUNTIME_MINUTES, TEST_NAME)
#
# To see runtimes, refer to:
# http://build.chromium.org/p/chromium.perf/stats
#
# Expected runtimes should be as accurate as possible to balance test sharding
# across slaves. The estimates here are calculated on Linux and then we assume
# other platforms are proportional.
#
# TODO: It would be really nice if buildbot could calculate these runtimes.

# These are benchmarks that run everywhere.
_CROSS_PLATFORM_BENCHMARKS = [
    (23, 'blink_perf'),
    ( 3, 'dom_perf'),
    (28, 'dromaeo'),
    ( 1, 'indexeddb_perf'),
    ( 3, 'kraken'),
    ( 1, 'media_mse_cases'),
    ( 3, 'octane'),
    ( 8, 'page_cycler_bloat'),
    ( 2, 'page_cycler_dhtml'),
    ( 5, 'page_cycler_intl_ar_fa_he'),
    (14, 'page_cycler_intl_es_fr_pt-BR'),
    (13, 'page_cycler_intl_hi_ru'),
    (18, 'page_cycler_intl_ja_zh'),
    (12, 'page_cycler_intl_ko_th_vi'),
    ( 8, 'page_cycler_morejs'),
    (15, 'page_cycler_moz'),
    (14, 'page_cycler_netsim_top_10'),
    (15, 'page_cycler_tough_layout_cases'),
    (18, 'page_cycler_typical_25'),
    ( 4, 'sunspider'),
    ( 1, 'webrtc'),
]

# These are GPU sensitive benchmarks that run on bots that vary only the GPU
# hardware in addition to bots across all the platforms.
_GPU_BENCHMARKS = [
    ( 3, 'cc_perftests'),
    ( 3, 'thread_times_key_mobile_sites'),
    ( 2, 'image_decoding_tough_decoding_cases'),
    (14, 'jsgamebench'),
    ( 5, 'maps'),
    ( 4, 'media_perftests'),
    (20, 'rasterize_and_record_key_silk_cases'),
    (18, 'rasterize_and_record_micro_key_silk_cases'),
    (18, 'rasterize_and_record_micro_top_25'),
    (18, 'rasterize_and_record_top_25'),
    ( 1, 'robohornet_pro'),
    ( 4, 'scheduler_tough_scheduling_cases'),
    ( 7, 'smoothness_top_25'),
    ( 5, 'smoothness_tough_animation_cases'),
    ( 7, 'smoothness_tough_canvas_cases'),
    (13, 'spaceport'),
]

# These run only on Desktop because of various technical limitations.
# We'd like to run them on Android when possible.
_DESKTOP_ONLY_BENCHMARKS = [
    ( 1, 'load_library_perf_tests'),
    (15, 'media_media_cns_cases'),
    (15, 'media_tough_media_cases'),
    ( 2, 'startup_cold'),
    ( 7, 'startup_cold_dirty'),
    ( 7, 'startup_cold_session_restore'),
    ( 2, 'startup_warm'),
    ( 2, 'startup_warm_dirty'),
    ( 4, 'startup_warm_session_restore'),
    ( 2, 'tab_switching_top_10'),
]

# These run only on Android because they are only relevant to mobile.
# TODO: Estimate runtimes when we shard Android.
_ANDROID_ONLY_BENCHMARKS = [
    ( 0, 'media_android'),
    ( 0, 'memory_mobile_memory'),
    ( 0, 'page_cycler_pica'),
    ( 0, 'page_cycler_top_10_mobile'),
    ( 0, 'rasterize_and_record_fast_path_key_silk_cases'),
    ( 0, 'rasterize_and_record_key_mobile_sites'),
    ( 0, 'rasterize_and_record_micro_fast_path_key_silk_cases'),
    ( 0, 'rasterize_and_record_micro_key_mobile_sites'),
    ( 0, 'smoothness_fast_path_gpu_rasterization_key_silk_cases'),
    ( 0, 'smoothness_fast_path_key_silk_cases'),
    ( 0, 'smoothness_gpu_rasterization_key_mobile_sites'),
    ( 0, 'smoothness_gpu_rasterization_key_silk_cases'),
    ( 0, 'smoothness_gpu_rasterization_top_25'),
    ( 0, 'smoothness_key_mobile_sites'),
    ( 0, 'smoothness_key_silk_cases'),
    ( 0, 'smoothness_tough_pinch_zoom_cases'),
    ( 0, 'thread_times_fast_path_key_silk_cases'),
    ( 0, 'thread_times_key_silk_cases'),
]

ALL_BENCHMARKS = master_utils.Partition(
    _CROSS_PLATFORM_BENCHMARKS +
    _GPU_BENCHMARKS +
    _DESKTOP_ONLY_BENCHMARKS +
    _ANDROID_ONLY_BENCHMARKS, 1)

ANDROID_TESTER_BENCHMARKS = master_utils.Partition(
    _CROSS_PLATFORM_BENCHMARKS +
    _GPU_BENCHMARKS +
    _ANDROID_ONLY_BENCHMARKS, 1)

GPU_TESTER_BENCHMARKS = master_utils.Partition(
    _GPU_BENCHMARKS, 1)

TWO_TESTER_DESKTOP_BENCHMARKS = master_utils.Partition(
    _CROSS_PLATFORM_BENCHMARKS +
    _GPU_BENCHMARKS +
    _DESKTOP_ONLY_BENCHMARKS, 2)

FOUR_TESTER_DESKTOP_BENCHMARKS = master_utils.Partition(
    _CROSS_PLATFORM_BENCHMARKS +
    _GPU_BENCHMARKS +
    _DESKTOP_ONLY_BENCHMARKS, 4)

FIVE_TESTER_DESKTOP_BENCHMARKS = master_utils.Partition(
    _CROSS_PLATFORM_BENCHMARKS +
    _GPU_BENCHMARKS +
    _DESKTOP_ONLY_BENCHMARKS, 5)

# End Benchmarks.
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Change Sources.

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   svnbin=chromium_utils.SVN_BIN,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]

# End Change Sources.
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Schedulers.

## configure the Schedulers

s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Android Builder',
                                     'Win Builder',
                                     'Win x64 Builder',
                                     'Mac Builder',
                                     'Linux Builder',
                                     'Linux Oilpan Builder',
                                    ])

s_chromium_android_rel_trigger = Triggerable('android_rel',
                                             ['Android Nexus4 Perf',
                                              'Android Nexus5 Perf',
                                              'Android Nexus7v2 Perf',
                                              'Android Nexus10 Perf',
                                              'Android GN Perf',
                                             ])

s_chromium_winrel_trigger = Triggerable('winrel',
                                        ['Win 8 Perf (1)',
                                         'Win 8 Perf (2)',
                                         'Win 7 Perf (1)',
                                         'Win 7 Perf (2)',
                                         'Win 7 Perf (3)',
                                         'Win 7 Perf (4)',
                                         'Win 7 Perf (5)',
                                         'Win 7 ATI GPU Perf',
                                         'Win 7 Intel GPU Perf',
                                         'Win 7 Nvidia GPU Perf',
                                         'Win 7 Low-End Perf (1)',
                                         'Win 7 Low-End Perf (2)',
                                         'Win XP Perf (1)',
                                         'Win XP Perf (2)',
                                         'Win XP Perf (3)',
                                         'Win XP Perf (4)',
                                         'Win XP Perf (5)',
                                        ])

s_chromium_winrel_x64_trigger = Triggerable('winrel_x64',
                                            ['Win 7 x64 Perf (1)',
                                             'Win 7 x64 Perf (2)',
                                            ])

# Scheduler to trigger slaves that depend on the mac release build.
s_chromium_macrel_trigger = Triggerable('macrel',
                                        ['Mac 10.9 Perf (1)',
                                         'Mac 10.9 Perf (2)',
                                         'Mac 10.9 Perf (3)',
                                         'Mac 10.9 Perf (4)',
                                         'Mac 10.9 Perf (5)',
                                         'Mac 10.8 Perf (1)',
                                         'Mac 10.8 Perf (2)',
                                         'Mac 10.8 Perf (3)',
                                         'Mac 10.8 Perf (4)',
                                         'Mac 10.8 Perf (5)',
                                         'Mac 10.7 Intel GPU Perf',
                                         'Mac 10.6 Perf (1)',
                                         'Mac 10.6 Perf (2)',
                                         'Mac 10.6 Perf (3)',
                                         'Mac 10.6 Perf (4)',
                                         'Mac 10.6 Perf (5)',
                                        ])

s_chromium_linux_rel_trigger = Triggerable('linuxrel',
                                           ['Linux Perf (1)',
                                            'Linux Perf (2)',
                                            'Linux Perf (3)',
                                            'Linux Perf (4)',
                                            'Linux Perf (5)',
                                           ])

s_chromium_linux_oilpan_rel_trigger = Triggerable('linuxrel_oilpan',
                                                  ['Linux Oilpan Perf (1)',
                                                   'Linux Oilpan Perf (2)',
                                                   'Linux Oilpan Perf (3)',
                                                   'Linux Oilpan Perf (4)',
                                                  ])

c['schedulers'] = [s_chromium,
                   s_chromium_android_rel_trigger,
                   s_chromium_winrel_trigger,
                   s_chromium_winrel_x64_trigger,
                   s_chromium_macrel_trigger,
                   s_chromium_linux_rel_trigger,
                   s_chromium_linux_oilpan_rel_trigger,
                  ]

# End Schedulers.
# ------------------------------------------------------------------------------


c['builders'] = []


# ----------------------------------------------------------------------------
# Factories.

m_win = chromium_factory.ChromiumFactory('src/out', 'win32')
m_linux = chromium_factory.ChromiumFactory('src/out', 'linux2')
m_mac = chromium_factory.ChromiumFactory('src/xcodebuild', 'darwin')
m_android = chromium_factory.ChromiumFactory(
    'src/out', 'linux2', nohooks_on_update=True, target_os='android')

# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumFactory
F_LINUX = m_linux.ChromiumFactory
F_MAC = m_mac.ChromiumFactory
F_ANDROID = m_android.ChromiumAnnotationFactory
F_OFFICIAL_WIN = chromium_factory.ChromiumFactory('src/build').ChromiumFactory

# End Factories.
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# Archives.
#
# ***IMPORTANT***
# chromium.perf produces official builds which should not be publicly available.
# Never archive to a publicly readable bucket.

chromium_rel_archive = 'gs://chrome-perf/Win Builder/full-build-win32.zip'
# In chromium_utils.PlatformName(), x64 is still win32.
chromium_rel_x64_archive = ('gs://chrome-perf/Win x64 Builder/'
                            'full-build-win32.zip')
chromium_rel_linux_archive = ('gs://chrome-perf/Linux Builder/'
                              'full-build-linux.zip')
chromium_rel_linux_oilpan_archive = ('gs://chrome-perf/Linux Oilpan Builder/'
                              'full-build-linux.zip')
chromium_rel_mac_archive = ('gs://chrome-perf/Mac Builder/full-build-mac.zip')

android_rel_archive = master_config.GetGSUtilUrl(
    'chromium-android', 'android_perf_rel')

chromium_perf_archive = master_config.GetGSUtilUrl('chrome-perf', 'Win Builder')

chromium_perf_x64_archive = master_config.GetGSUtilUrl('chrome-perf',
                                                       'Win x64 Builder')

chromium_perf_linux_archive = master_config.GetGSUtilUrl('chrome-perf',
                                                         'Linux Builder')

chromium_perf_linux_oilpan_archive = master_config.GetGSUtilUrl(
    'chrome-perf', 'Linux Oilpan Builder')

chromium_perf_mac_archive = master_config.GetGSUtilUrl('chrome-perf',
                                                       'Mac Builder')
# End Archives.
# ----------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Builder Compilers.

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

f_cr_rel_android_builder = F_ANDROID(
    target='Release',
    slave_type='AnnotatedBuilder',
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    factory_properties={
      'android_bot_id': 'perf-builder-rel',
      'gclient_env': {
        'GYP_DEFINES': 'branding=Chrome buildtype=Official '
        },
      'build_url': android_rel_archive,
      'trigger': 'android_rel',
    })

f_cr_rel_builder = F_OFFICIAL_WIN(
    slave_type='Builder',
    mode='google_chrome',
    compile_timeout=4800,
    project='all.sln;chromium_builder_perf',
    factory_properties={
      'create_profiles': True,
      'trigger': 'winrel',
      'gclient_env': {
        # TODO(tonyg|scottmg): Re-enable symbols. http://crbug.com/327165
        'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                       'component=static_library fastbuild=1',
        },
      'build_url': chromium_perf_archive,},
    )

f_cr_rel_x64_builder = F_OFFICIAL_WIN(
    slave_type='Builder',
    mode='google_chrome',
    compile_timeout=4800,
    options=['--build-tool=ninja', '--', 'chromium_builder_perf'],
    target='Release_x64',
    factory_properties={
      'create_profiles': True,
      'trigger': 'winrel_x64',
      'gclient_env': {
        # TODO(tonyg|scottmg): Re-enable symbols. http://crbug.com/327165
        'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                       'component=static_library target_arch=x64 fastbuild=1',
        'GYP_GENERATORS': 'ninja',
      },
      'build_url': chromium_perf_x64_archive,},
    )

f_cr_rel_mac_builder = F_MAC(
    mode='official',
    compile_timeout=2400,
    slave_type='Builder',
    options=['--compiler=goma-clang', '--', '-target', 'chromium_builder_perf'],
    factory_properties={
        'create_profiles': True,
        'trigger': 'macrel',
        'gclient_env': {
            # clang=1 in GYP_DEFINES is added to branded builds automatically,
            # but ChromiumFactory needs it to know that an "update clang" step
            # has to be added.
            'GYP_DEFINES': 'branding=Chrome buildtype=Official clang=1 '
                           'component=static_library'},
            'build_url': chromium_perf_mac_archive,},
    )

f_cr_rel_linux_builder = F_LINUX(
    slave_type='Builder',
    mode='official',
    compile_timeout=2400,
    options=[
        '--compiler=goma', '--',
        'chromium_builder_perf'],
    factory_properties={
        'create_profiles': True,
        'trigger': 'linuxrel',
        'gclient_env': {
            'GYP_DEFINES': 'branding=Chrome buildtype=Official '
            'target_arch=x64 component=static_library linux_strip_binary=1 '},
            'build_url': chromium_perf_linux_archive,},
    )

f_cr_rel_linux_oilpan_builder = F_LINUX(
    slave_type='Builder',
    mode='official',
    compile_timeout=2400,
    options=[
        '--compiler=goma', '--',
        'chromium_builder_perf'],
    factory_properties={
        'create_profiles': True,
        'trigger': 'linuxrel_oilpan',
        'gclient_env': {
            'GYP_DEFINES': 'branding=Chrome buildtype=Official enable_oilpan=1 '
            'target_arch=x64 component=static_library linux_strip_binary=1 '},
            'build_url': chromium_perf_linux_oilpan_archive,},
    )

# End Builder Compilers.
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Builder Testers.

def AndroidPerf(device_id, tests=None):
  return F_ANDROID(
    target='Release',
    annotation_script='src/build/android/buildbot/bb_run_bot.py',
    tests=tests or ANDROID_TESTER_BENCHMARKS[0],
    factory_properties={
      'android_bot_id': 'perf-tests-rel-%s' % device_id,
      'build_url': android_rel_archive,
      'perf_id': 'android-%s' % device_id,
      'show_perf_results': True,
      'test_platform': 'android',
    })

f_cr_rel_android_gn = AndroidPerf('gn')
f_cr_rel_android_nexus4 = AndroidPerf('nexus4')
f_cr_rel_android_nexus5 = AndroidPerf('nexus5')
f_cr_rel_android_nexus7v2 = AndroidPerf('nexus7v2')
f_cr_rel_android_nexus10 = AndroidPerf('nexus10')

f_cr_rel_perf_xp_1 = F_WIN(slave_type='Tester',
                           build_url=chromium_rel_archive,
                           tests=FIVE_TESTER_DESKTOP_BENCHMARKS[0],
                           factory_properties={
                               'show_perf_results': True,
                               'expectations': True,
                               'halt_on_missing_build': True,
                               'perf_id': 'chromium-rel-xp-dual',
                               'process_dumps': True,
                               'start_crash_handler': True,})

f_cr_rel_perf_xp_2 = F_WIN(slave_type='Tester',
                           build_url=chromium_rel_archive,
                           tests=FIVE_TESTER_DESKTOP_BENCHMARKS[1],
                           factory_properties={
                               'show_perf_results': True,
                               'expectations': True,
                               'halt_on_missing_build': True,
                               'perf_id': 'chromium-rel-xp-dual',
                               'process_dumps': True,
                               'start_crash_handler': True,})

f_cr_rel_perf_xp_3 = F_WIN(slave_type='Tester',
                           build_url=chromium_rel_archive,
                           tests=FIVE_TESTER_DESKTOP_BENCHMARKS[2],
                           factory_properties={
                               'show_perf_results': True,
                               'expectations': True,
                               'halt_on_missing_build': True,
                               'perf_id': 'chromium-rel-xp-dual',
                               'process_dumps': True,
                               'start_crash_handler': True,})

f_cr_rel_perf_xp_4 = F_WIN(slave_type='Tester',
                           build_url=chromium_rel_archive,
                           tests=FIVE_TESTER_DESKTOP_BENCHMARKS[3],
                           factory_properties={
                               'show_perf_results': True,
                               'expectations': True,
                               'halt_on_missing_build': True,
                               'perf_id': 'chromium-rel-xp-dual',
                               'process_dumps': True,
                               'start_crash_handler': True,})

f_cr_rel_perf_xp_5 = F_WIN(slave_type='Tester',
                           build_url=chromium_rel_archive,
                           tests=FIVE_TESTER_DESKTOP_BENCHMARKS[4],
                           factory_properties={
                               'show_perf_results': True,
                               'expectations': True,
                               'halt_on_missing_build': True,
                               'perf_id': 'chromium-rel-xp-dual',
                               'process_dumps': True,
                               'start_crash_handler': True,})

f_cr_rel_perf_win7_1 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=FIVE_TESTER_DESKTOP_BENCHMARKS[0],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win7-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})

f_cr_rel_perf_win7_2 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=FIVE_TESTER_DESKTOP_BENCHMARKS[1],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win7-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})

f_cr_rel_perf_win7_3 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=FIVE_TESTER_DESKTOP_BENCHMARKS[2],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win7-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})

f_cr_rel_perf_win7_4 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=FIVE_TESTER_DESKTOP_BENCHMARKS[3],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win7-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})

f_cr_rel_perf_win7_5 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=FIVE_TESTER_DESKTOP_BENCHMARKS[4],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win7-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})
f_cr_rel_perf_win7_x64_1 = F_WIN(slave_type='Tester',
                                 build_url=chromium_rel_x64_archive,
                                 tests=TWO_TESTER_DESKTOP_BENCHMARKS[0],
                                 factory_properties={
                                     'show_perf_results': True,
                                     'expectations': True,
                                     'halt_on_missing_build': True,
                                     'perf_id': 'chromium-rel-win7-x64-dual',
                                     'process_dumps': True,
                                     'start_crash_handler': True,})

f_cr_rel_perf_win7_x64_2 = F_WIN(slave_type='Tester',
                                 build_url=chromium_rel_x64_archive,
                                 tests=TWO_TESTER_DESKTOP_BENCHMARKS[1],
                                 factory_properties={
                                     'show_perf_results': True,
                                     'expectations': True,
                                     'halt_on_missing_build': True,
                                     'perf_id': 'chromium-rel-win7-x64-dual',
                                     'process_dumps': True,
                                     'start_crash_handler': True,})

f_cr_rel_perf_win7_jank_1 = F_WIN(slave_type='Tester',
                                  build_url=chromium_rel_archive,
                                  tests=TWO_TESTER_DESKTOP_BENCHMARKS[0],
                                  factory_properties={
                                    'show_perf_results': True,
                                    'expectations': True,
                                    'halt_on_missing_build': True,
                                    'perf_id': 'chromium-rel-win7-single',
                                    'process_dumps': True,
                                    'start_crash_handler': True,})

f_cr_rel_perf_win7_jank_2 = F_WIN(slave_type='Tester',
                                  build_url=chromium_rel_archive,
                                  tests=TWO_TESTER_DESKTOP_BENCHMARKS[1],
                                  factory_properties={
                                    'show_perf_results': True,
                                    'expectations': True,
                                    'halt_on_missing_build': True,
                                    'perf_id': 'chromium-rel-win7-single',
                                    'process_dumps': True,
                                    'start_crash_handler': True,})

f_cr_rel_perf_win7_gpu_ati = F_WIN(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=GPU_TESTER_BENCHMARKS[0],
    factory_properties={
        'show_perf_results': True,
        'expectations': True,
        'halt_on_missing_build': True,
        'perf_id': 'chromium-rel-win7-gpu-ati',
        'process_dumps': True,
        'start_crash_handler': True,})

f_cr_rel_perf_win7_gpu_intel = F_WIN(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=GPU_TESTER_BENCHMARKS[0],
    factory_properties={
        'show_perf_results': True,
        'expectations': True,
        'halt_on_missing_build': True,
        'perf_id': 'chromium-rel-win7-gpu-intel',
        'process_dumps': True,
        'start_crash_handler': True,})

f_cr_rel_perf_win7_gpu_nvidia = F_WIN(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=GPU_TESTER_BENCHMARKS[0],
    factory_properties={
        'show_perf_results': True,
        'expectations': True,
        'halt_on_missing_build': True,
        'perf_id': 'chromium-rel-win7-gpu-nvidia',
        'process_dumps': True,
        'start_crash_handler': True,})

f_cr_rel_perf_win8_1 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=TWO_TESTER_DESKTOP_BENCHMARKS[0],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win8-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})

f_cr_rel_perf_win8_2 = F_WIN(slave_type='Tester',
                             build_url=chromium_rel_archive,
                             tests=TWO_TESTER_DESKTOP_BENCHMARKS[1],
                             factory_properties={
                                 'show_perf_results': True,
                                 'expectations': True,
                                 'halt_on_missing_build': True,
                                 'perf_id': 'chromium-rel-win8-dual',
                                 'process_dumps': True,
                                 'start_crash_handler': True,})

# Helper since the 10.6, 10.7 differences are just for ids.
def RelMacPerfTester(perf_id, tests, build_url=chromium_rel_mac_archive):
  return F_MAC(slave_type='Tester',
               build_url=build_url,
               tests=tests,
               factory_properties={'show_perf_results': True,
                                   'expectations': True,
                                   'halt_on_missing_build': True,
                                   'perf_id': perf_id})

f_cr_rel_mac6_perf_1 = RelMacPerfTester('chromium-rel-mac6',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[0] +
                                        # A mac-specific benchmark that we do
                                        # include in partitioning so the rest
                                        # of the partitions are stable.
                                        ['mach_ports'])

f_cr_rel_mac6_perf_2 = RelMacPerfTester('chromium-rel-mac6',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[1])

f_cr_rel_mac6_perf_3 = RelMacPerfTester('chromium-rel-mac6',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[2])

f_cr_rel_mac6_perf_4 = RelMacPerfTester('chromium-rel-mac6',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[3])

f_cr_rel_mac6_perf_5 = RelMacPerfTester('chromium-rel-mac6',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[4])

f_cr_rel_mac7_perf_gpu_intel = RelMacPerfTester('chromium-rel-mac7-gpu-intel',
                                                GPU_TESTER_BENCHMARKS[0])

f_cr_rel_mac9_perf_1 = RelMacPerfTester('chromium-rel-mac9',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[0] +
                                        # A mac-specific benchmark that we do
                                        # include in partitioning so the rest
                                        # of the partitions are stable.
                                        ['mach_ports'])

f_cr_rel_mac9_perf_2 = RelMacPerfTester('chromium-rel-mac9',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[1])

f_cr_rel_mac9_perf_3 = RelMacPerfTester('chromium-rel-mac9',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[2])

f_cr_rel_mac9_perf_4 = RelMacPerfTester('chromium-rel-mac9',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[3])

f_cr_rel_mac9_perf_5 = RelMacPerfTester('chromium-rel-mac9',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[4])

f_cr_rel_mac8_perf_1 = RelMacPerfTester('chromium-rel-mac8',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[0] +
                                        # A mac-specific benchmark that we do
                                        # include in partitioning so the rest
                                        # of the partitions are stable.
                                        ['mach_ports'])

f_cr_rel_mac8_perf_2 = RelMacPerfTester('chromium-rel-mac8',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[1])

f_cr_rel_mac8_perf_3 = RelMacPerfTester('chromium-rel-mac8',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[2])

f_cr_rel_mac8_perf_4 = RelMacPerfTester('chromium-rel-mac8',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[3])

f_cr_rel_mac8_perf_5 = RelMacPerfTester('chromium-rel-mac8',
                                        FIVE_TESTER_DESKTOP_BENCHMARKS[4])

# End Builder Testers.
# ------------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

# 1. Builders

b_chromium_rel_android_builder = {'name': 'Android Builder',
  'factory': f_cr_rel_android_builder,
  'category': '1builders|android',
}

b_chromium_rel_win_builder = {'name': 'Win Builder',
  'builddir': 'chromium-rel-builder',
  'factory': f_cr_rel_builder,
  'category': '1builders|windows',
  'auto_reboot': False,
}

b_chromium_rel_win_x64_builder = {'name': 'Win x64 Builder',
  'builddir': 'chromium-rel-x64-builder',
  'factory': f_cr_rel_x64_builder,
  'category': '1builders|windows',
  'auto_reboot': False,
}

b_chromium_rel_mac_builder = {'name': 'Mac Builder',
  'builddir': 'chromium-rel-mac-builder',
  'factory': f_cr_rel_mac_builder,
  'category': '1builders|mac',
  'auto_reboot': False,
}

b_chromium_rel_linux_builder = {'name': 'Linux Builder',
  'builddir': 'chromium-rel-linux',
  'factory': f_cr_rel_linux_builder,
  'category': '1builders|linux',
  'auto_reboot': False,
}

b_chromium_rel_linux_oilpan_builder = {'name': 'Linux Oilpan Builder',
  'builddir': 'chromium-rel-linux-oilpan',
  'factory': f_cr_rel_linux_oilpan_builder,
  'category': '1builders|linux',
  'auto_reboot': False,
}

# 2. Android

b_chromium_rel_android_nexus4 = {'name': 'Android Nexus4 Perf',
  'factory': f_cr_rel_android_nexus4,
  'category': '2android|builder_testers',
}

b_chromium_rel_android_nexus5 = {'name': 'Android Nexus5 Perf',
  'factory': f_cr_rel_android_nexus5,
  'category': '2android|builder_testers',
}

b_chromium_rel_android_nexus7v2 = {'name': 'Android Nexus7v2 Perf',
  'factory': f_cr_rel_android_nexus7v2,
  'category': '2android|builder_testers',
}

b_chromium_rel_android_nexus10 = {'name': 'Android Nexus10 Perf',
  'factory': f_cr_rel_android_nexus10,
  'category': '2android|builder_testers',
}

b_chromium_rel_android_gn = {'name': 'Android GN Perf',
  'factory': f_cr_rel_android_gn,
  'category': '2android|builder_testers',
}

# 3. Windows

b_chromium_rel_win8_perf_1 = {'name': 'Win 8 Perf (1)',
  'builddir': 'chromium-rel-win8-perf-1',
  'factory': f_cr_rel_perf_win8_1,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win8_perf_2 = {'name': 'Win 8 Perf (2)',
  'builddir': 'chromium-rel-win8-perf-2',
  'factory': f_cr_rel_perf_win8_2,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_1 = {'name': 'Win 7 Perf (1)',
  'builddir': 'chromium-rel-win7-perf-1',
  'factory': f_cr_rel_perf_win7_1,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_2 = {'name': 'Win 7 Perf (2)',
  'builddir': 'chromium-rel-win7-perf-2',
  'factory': f_cr_rel_perf_win7_2,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_3 = {'name': 'Win 7 Perf (3)',
  'builddir': 'chromium-rel-win7-perf-3',
  'factory': f_cr_rel_perf_win7_3,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_4 = {'name': 'Win 7 Perf (4)',
  'builddir': 'chromium-rel-win7-perf-4',
  'factory': f_cr_rel_perf_win7_4,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_5 = {'name': 'Win 7 Perf (5)',
  'builddir': 'chromium-rel-win7-perf-5',
  'factory': f_cr_rel_perf_win7_5,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_x64_1 = {'name': 'Win 7 x64 Perf (1)',
  'builddir': 'chromium-rel-win7-perf-x64-1',
  'factory': f_cr_rel_perf_win7_x64_1,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_x64_2 = {'name': 'Win 7 x64 Perf (2)',
  'builddir': 'chromium-rel-win7-perf-x64-2',
  'factory': f_cr_rel_perf_win7_x64_2,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_gpu_ati = {'name': 'Win 7 ATI GPU Perf',
  'builddir': 'chromium-rel-win7-perf-gpu-ati',
  'factory': f_cr_rel_perf_win7_gpu_ati,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_gpu_intel = {'name': 'Win 7 Intel GPU Perf',
  'builddir': 'chromium-rel-win7-perf-gpu-intel',
  'factory': f_cr_rel_perf_win7_gpu_intel,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_gpu_nvidia = {'name': 'Win 7 Nvidia GPU Perf',
  'builddir': 'chromium-rel-win7-perf-gpu-nvidia',
  'factory': f_cr_rel_perf_win7_gpu_nvidia,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_jank_1 = {'name': 'Win 7 Low-End Perf (1)',
  'builddir': 'chromium-rel-win7-perf-single-1',
  'factory': f_cr_rel_perf_win7_jank_1,
  'category': '3windows|builder_testers',
}

b_chromium_rel_win7_perf_jank_2 = {'name': 'Win 7 Low-End Perf (2)',
  'builddir': 'chromium-rel-win7-perf-single-2',
  'factory': f_cr_rel_perf_win7_jank_2,
  'category': '3windows|builder_testers',
}

b_chromium_rel_xp_perf_1 = {'name': 'Win XP Perf (1)',
  'builddir': 'chromium-rel-xp-perf-1',
  'factory': f_cr_rel_perf_xp_1,
  'category': '3windows|builder_testers',
}

b_chromium_rel_xp_perf_2 = {'name': 'Win XP Perf (2)',
  'builddir': 'chromium-rel-xp-perf-2',
  'factory': f_cr_rel_perf_xp_2,
  'category': '3windows|builder_testers',
}

b_chromium_rel_xp_perf_3 = {'name': 'Win XP Perf (3)',
  'builddir': 'chromium-rel-xp-perf-3',
  'factory': f_cr_rel_perf_xp_3,
  'category': '3windows|builder_testers',
}

b_chromium_rel_xp_perf_4 = {'name': 'Win XP Perf (4)',
  'builddir': 'chromium-rel-xp-perf-4',
  'factory': f_cr_rel_perf_xp_4,
  'category': '3windows|builder_testers',
}

b_chromium_rel_xp_perf_5 = {'name': 'Win XP Perf (5)',
  'builddir': 'chromium-rel-xp-perf-5',
  'factory': f_cr_rel_perf_xp_5,
  'category': '3windows|builder_testers',
}

# 4. Mac

b_chromium_rel_mac9_perf_1 = {'name': 'Mac 10.9 Perf (1)',
  'builddir': 'chromium-rel-mac9-perf',
  'factory': f_cr_rel_mac9_perf_1,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac9_perf_2 = {'name': 'Mac 10.9 Perf (2)',
  'builddir': 'chromium-rel-mac9-perf-2',
  'factory': f_cr_rel_mac9_perf_2,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac9_perf_3 = {'name': 'Mac 10.9 Perf (3)',
  'builddir': 'chromium-rel-mac9-perf-3',
  'factory': f_cr_rel_mac9_perf_3,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac9_perf_4 = {'name': 'Mac 10.9 Perf (4)',
  'builddir': 'chromium-rel-mac9-perf-4',
  'factory': f_cr_rel_mac9_perf_4,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac9_perf_5 = {'name': 'Mac 10.9 Perf (5)',
  'builddir': 'chromium-rel-mac9-perf-5',
  'factory': f_cr_rel_mac9_perf_5,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac8_perf_1 = {'name': 'Mac 10.8 Perf (1)',
  'builddir': 'chromium-rel-mac8-perf',
  'factory': f_cr_rel_mac8_perf_1,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac8_perf_2 = {'name': 'Mac 10.8 Perf (2)',
  'builddir': 'chromium-rel-mac8-perf-2',
  'factory': f_cr_rel_mac8_perf_2,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac8_perf_3 = {'name': 'Mac 10.8 Perf (3)',
  'builddir': 'chromium-rel-mac8-perf-3',
  'factory': f_cr_rel_mac8_perf_3,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac8_perf_4 = {'name': 'Mac 10.8 Perf (4)',
  'builddir': 'chromium-rel-mac8-perf-4',
  'factory': f_cr_rel_mac8_perf_4,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac8_perf_5 = {'name': 'Mac 10.8 Perf (5)',
  'builddir': 'chromium-rel-mac8-perf-5',
  'factory': f_cr_rel_mac8_perf_5,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac7_perf_gpu_intel = {'name': 'Mac 10.7 Intel GPU Perf',
  'builddir': 'chromium-rel-mac7-perf-gpu-intel',
  'factory': f_cr_rel_mac7_perf_gpu_intel,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac6_perf_1 = {'name': 'Mac 10.6 Perf (1)',
  'builddir': 'chromium-rel-mac6-perf',
  'factory': f_cr_rel_mac6_perf_1,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac6_perf_2 = {'name': 'Mac 10.6 Perf (2)',
  'builddir': 'chromium-rel-mac6-perf-2',
  'factory': f_cr_rel_mac6_perf_2,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac6_perf_3 = {'name': 'Mac 10.6 Perf (3)',
  'builddir': 'chromium-rel-mac6-perf-3',
  'factory': f_cr_rel_mac6_perf_3,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac6_perf_4 = {'name': 'Mac 10.6 Perf (4)',
  'builddir': 'chromium-rel-mac6-perf-4',
  'factory': f_cr_rel_mac6_perf_4,
  'category': '4mac|builder_testers',
}

b_chromium_rel_mac6_perf_5 = {'name': 'Mac 10.6 Perf (5)',
  'builddir': 'chromium-rel-mac6-perf-5',
  'factory': f_cr_rel_mac6_perf_5,
  'category': '4mac|builder_testers',
}

c['builders'] = [
  b_chromium_rel_android_builder,
  b_chromium_rel_win_builder,
  b_chromium_rel_win_x64_builder,
  b_chromium_rel_mac_builder,
  b_chromium_rel_linux_builder,
  b_chromium_rel_linux_oilpan_builder,
  b_chromium_rel_android_nexus4,
  b_chromium_rel_android_nexus5,
  b_chromium_rel_android_nexus7v2,
  b_chromium_rel_android_nexus10,
  b_chromium_rel_android_gn,
  b_chromium_rel_win8_perf_1,
  b_chromium_rel_win8_perf_2,
  b_chromium_rel_win7_perf_1,
  b_chromium_rel_win7_perf_2,
  b_chromium_rel_win7_perf_3,
  b_chromium_rel_win7_perf_4,
  b_chromium_rel_win7_perf_5,
  b_chromium_rel_win7_perf_x64_1,
  b_chromium_rel_win7_perf_x64_2,
  b_chromium_rel_win7_perf_gpu_ati,
  b_chromium_rel_win7_perf_gpu_intel,
  b_chromium_rel_win7_perf_gpu_nvidia,
  b_chromium_rel_win7_perf_jank_1,
  b_chromium_rel_win7_perf_jank_2,
  b_chromium_rel_xp_perf_1,
  b_chromium_rel_xp_perf_2,
  b_chromium_rel_xp_perf_3,
  b_chromium_rel_xp_perf_4,
  b_chromium_rel_xp_perf_5,
  b_chromium_rel_mac9_perf_1,
  b_chromium_rel_mac9_perf_2,
  b_chromium_rel_mac9_perf_3,
  b_chromium_rel_mac9_perf_4,
  b_chromium_rel_mac9_perf_5,
  b_chromium_rel_mac8_perf_1,
  b_chromium_rel_mac8_perf_2,
  b_chromium_rel_mac8_perf_3,
  b_chromium_rel_mac8_perf_4,
  b_chromium_rel_mac8_perf_5,
  b_chromium_rel_mac7_perf_gpu_intel,
  b_chromium_rel_mac6_perf_1,
  b_chromium_rel_mac6_perf_2,
  b_chromium_rel_mac6_perf_3,
  b_chromium_rel_mac6_perf_4,
  b_chromium_rel_mac6_perf_5,
]

# 5. Linux

for i, tests in enumerate(FIVE_TESTER_DESKTOP_BENCHMARKS):
  f = F_LINUX(slave_type='Tester',
              build_url=chromium_rel_linux_archive,
              tests=tests,
              factory_properties={
                  'show_perf_results': True,
                  'expectations': True,
                  'halt_on_missing_build': True,
                  'perf_id': 'linux-release'})
  b = {'name': 'Linux Perf (%d)' % (i + 1),
       'factory': f,
       'category': '5linux|builder_testers',
  }
  c['builders'].append(b)

for i, tests in enumerate(FOUR_TESTER_DESKTOP_BENCHMARKS):
  f = F_LINUX(slave_type='Tester',
              build_url=chromium_rel_linux_oilpan_archive,
              tests=tests,
              factory_properties={
                  'show_perf_results': True,
                  'expectations': True,
                  'halt_on_missing_build': True,
                  'perf_id': 'linux-oilpan-release'})
  b = {'name': 'Linux Oilpan Perf (%d)' % (i + 1),
       'factory': f,
       'category': '5linux|builder_testers',
  }
  c['builders'].append(b)

####### BUILDSLAVES

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

# Add more.

if MAIL_NOTIFIER:
  categories_steps = {
    '': ['update'],
    'builders': [],
    'builder_testers': ALL_BENCHMARKS[0],
  }
  exclusions = { }
  forgiving_steps = [ ]
  c['status'].append(chromium_notifier.ChromiumNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      status_header='Perf alert on "%(builder)s":\n%(steps)s',
      subject='%(projectName)s %(builder)s %(result)s',
      extraRecipients=[],
      lookup=master_utils.FilterDomain(),
      sheriffs=['sheriff_perf'],
      public_html='../master.chromium/public_html',
      forgiving_steps=forgiving_steps,
      use_getname=True))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
