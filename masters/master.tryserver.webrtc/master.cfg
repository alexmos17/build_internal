#!/usr/bin/env python
#  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.
#
#  Use of this source code is governed by a BSD-style license
#  that can be found in the LICENSE file in the root of the source
#  tree. An additional intellectual property rights grant can be found
#  in the file PATENTS.  All contributing project authors may
#  be found in the AUTHORS file in the root of the source tree.

import os

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
from master.builders_pools import BuildersPools
from master.factory import annotator_factory
from master.factory import webrtc_factory
from master.try_job_http import TryJobHTTP
from master.try_job_rietveld import TryJobRietveld
from master.try_mail_notifier import TryMailNotifier

import config
import master_site_config

ActiveMaster = master_site_config.WebRTCTryServer

MAIL_NOTIFIER = True
LISTEN_TO_SVN = ActiveMaster.svn_url and ActiveMaster.is_production_host
LISTEN_TO_RIETVELD = ActiveMaster.is_production_host
UPDATE_CODEREVIEW = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES
c['change_source'] = []

# Avoid merging requests.
c['mergeRequests'] = lambda *_: False

####### BUILDERS

# TODO(kjellander): Switch over the Windows bots as soon as crbug.com/379898 is
# resolved.
def win():
  return webrtc_factory.WebRTCFactory('src/out', 'win32')

tests = [
    'audio_decoder_unittests',
    'common_audio_unittests',
    'common_video_unittests',
    'libjingle_media_unittest',
    'libjingle_p2p_unittest',
    'libjingle_peerconnection_unittest',
    'libjingle_sound_unittest',
    'libjingle_unittest',
    'modules_tests',
    'modules_unittests',
    'system_wrappers_unittests',
    'test_support_unittests',
    'tools_unittests',
    'video_engine_core_unittests',
    'video_engine_tests',
    'voice_engine_unittests',
]
mac_x64_tests = tests + ['libjingle_peerconnection_objc_test']

baremetal_common_tests = [
    'video_capture_tests',
    'vie_auto_test',
    'voe_auto_test',
    'webrtc_perf_tests',
]
baremetal_win_and_mac_tests = baremetal_common_tests + [
    'audio_device_tests',
]

default_options = ['--compiler=goma', '--clobber-post-fail']

dr_memory_factory_properties = {
   'gclient_env': {'GYP_DEFINES': 'build_for_tool=drmemory'},
   'needs_drmemory': True,
}

b_win = {
    'name': 'win',
    'factory': win().WebRTCFactory(
        target='Debug',
        slave_type='Trybot',
        options=default_options,
        tests=tests),
    'slavebuilddir': 'win',
}

b_win_rel = {
    'name': 'win_rel',
    'factory': win().WebRTCFactory(
        target='Release',
        slave_type='Trybot',
        options=default_options,
        tests=tests),
    'slavebuilddir': 'win',
}

b_win_x64_rel = {
    'name': 'win_x64_rel',
    'factory': win().WebRTCFactory(
        target='Release_x64',
        slave_type='Trybot',
        options=default_options,
        tests=tests,
        factory_properties={
            'gclient_env': {'GYP_DEFINES': 'target_arch=x64'}
        }),
    'slavebuilddir': 'win',
}

b_win_baremetal = {
    'name': 'win_baremetal',
    'factory': win().WebRTCFactory(
        target='Release',
        slave_type='Trybot',
        options=default_options,
        tests=baremetal_win_and_mac_tests,
        factory_properties={
            'custom_cmd_line_tests': ['vie_auto_test',
                                      'voe_auto_test'],
        }),
    'slavebuilddir': 'win',
}

b_win_asan = {
    'name': 'win_asan',
    'factory': win().WebRTCFactory(
        target='Release',
        slave_type='Trybot',
        tests=tests,
        factory_properties={
            'syzyasan': True,
            'gclient_env': {
                'GYP_DEFINES': ('syzyasan=1 win_z7=1 chromium_win_pch=0 '
                                'component=static_library'),
                'GYP_USE_SEPARATE_MSPDBSRV': '1',
            },
        }),
}

b_win_drmemory_light = {
    'name': 'win_drmemory_light',
    'factory': win().WebRTCFactory(
        target='Debug',
        slave_type='Trybot',
        tests=['drmemory_light_' + test for test in tests],
        factory_properties=dr_memory_factory_properties),
    'slavebuilddir': 'win-drmemory',
}

b_win_drmemory_full = {
    'name': 'win_drmemory_full',
    'factory': win().WebRTCFactory(
        target='Debug',
        slave_type='Trybot',
        tests=['drmemory_full_' + test for test in tests],
        factory_properties=dr_memory_factory_properties),
    'slavebuilddir': 'win-drmemory',
}

c['builders'] = [
  b_win,
  b_win_rel,
  b_win_x64_rel,
  b_win_baremetal,
  b_win_asan,
  b_win_drmemory_light,
  b_win_drmemory_full,
]

# Recipe based builders.
specs = [
  {'name': 'mac', 'slavebuilddir': 'mac32'},
  {'name': 'mac_rel', 'slavebuilddir': 'mac32'},
  {'name': 'mac_x64_rel', 'slavebuilddir': 'mac64'},
  {'name': 'mac_baremetal', 'slavebuilddir': 'mac32'},
  {'name': 'ios', 'slavebuilddir': 'mac64'},
  {'name': 'ios_rel', 'slavebuilddir': 'mac64'},
  {'name': 'mac_asan', 'slavebuilddir': 'mac_asan'},
  {'name': 'linux', 'slavebuilddir': 'linux64'},
  {'name': 'linux_rel', 'slavebuilddir': 'linux64'},
  {'name': 'linux_baremetal', 'slavebuilddir': 'linux64'},
  {'name': 'linux_memcheck', 'slavebuilddir': 'linux_memcheck_or_tsan'},
  {'name': 'linux_tsan', 'slavebuilddir': 'linux_memcheck_or_tsan'},
  {'name': 'linux_tsan2', 'slavebuilddir': 'linux_tsan2'},
  {'name': 'linux_asan', 'slavebuilddir': 'linux_asan'},
  {'name': 'android', 'slavebuilddir': 'android'},
  {'name': 'android_rel', 'slavebuilddir': 'android'},
  {'name': 'android_clang', 'slavebuilddir': 'android'},
  {
    'name': 'android_apk',
    'recipe': 'webrtc/android_apk',
    'slavebuilddir': 'android_apk',
  },
  {
    'name': 'android_apk_rel',
    'recipe': 'webrtc/android_apk',
    'slavebuilddir': 'android_apk',
  },
]

m_annotator = annotator_factory.AnnotatorFactory()
c['builders'] += [
    {
      'name': spec['name'],
      'factory': m_annotator.BaseFactory(spec.get('recipe',
                                                  'webrtc/standalone')),
      'slavebuilddir': spec['slavebuilddir'],
    } for spec in specs
]

# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'WebRTCTryServer')

for builder in c['builders']:
  # Associate the slaves to the builders. The configuration is in slaves.cfg.
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Disable auto_reboot when testing locally, but don't change for production.
  if not ActiveMaster.is_production_host:
    builder['auto_reboot'] = False


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### SCHEDULERS

pools = BuildersPools('webrtc')
pools['webrtc'].append('win')
pools['webrtc'].append('win_rel')
pools['webrtc'].append('win_x64_rel')
pools['webrtc'].append('win_baremetal')
pools['webrtc'].append('win_asan')
pools['webrtc'].append('win_drmemory_light')
pools['webrtc'].append('win_drmemory_full')
for spec in specs:
  pools['webrtc'].append(spec['name'])

# Configure the Schedulers;
c['schedulers'] = []

last_good_urls = {'webrtc': ActiveMaster.last_good_url}
code_review_sites = {'webrtc': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
    name='webrtc_try_job_http',
    port=ActiveMaster.try_job_port,
    last_good_urls=last_good_urls,
    code_review_sites=code_review_sites,
    pools=pools))

if LISTEN_TO_RIETVELD:
  # TODO(kjellander): Set cache_processed_jobs=True when the caching Rietveld
  # poller has proven to be stable.
  c['schedulers'].append(TryJobRietveld(
        name='try_job_rietveld',
        last_good_urls=last_good_urls,
        code_review_sites=code_review_sites,
        pools=pools,
        project='webrtc',
        cachepath=os.path.join(os.getcwd(), 'try_job_rietveld.json')))

if LISTEN_TO_SVN:
  from master.try_job_svn import TryJobSubversion
  c['schedulers'].append(TryJobSubversion(
      name='webrtc_try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.webrtc/'

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             order_console_by_time=True,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.chromium/templates'])

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      reply_to=ActiveMaster.reply_to,
      subject='try %(result)s for %(reason)s @ r%(revision)s',
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.UsersAreEmails()))

if UPDATE_CODEREVIEW:
  from master.status_push import TryServerHttpStatusPush
  c['status'].append(
      TryServerHttpStatusPush(serverUrl=ActiveMaster.code_review_site))

# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs.
c['buildHorizon'] = 2000
c['logHorizon'] = 2000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 100
# Must be at least 2x the number of on-going builds.
c['buildCacheSize'] = 100

####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'
