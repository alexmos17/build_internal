# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes.filter import ChangeFilter
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory
from master.url_poller import URLPoller

import config
import master_site_config

_CUSTOM_DEPS_LLVM_ALLOCATED_TYPE = (
    'src/third_party/llvm-allocated-type',
    'svn://svn.chromium.org/chrome/trunk/deps/third_party/llvm-allocated-type')

# The following are environment variables to set when running debug versions of
# the tests. The purpose of the debug version is to potentially gather more
# information. This was all added back when Endure was a Pyauto-based test;
# some of these environment variables may be unnecessary now.
# Note: According to a comment from a previous version of this file, adding
# 'python_ver=2.7' in GYP_DEFINES and 'DO_NOT_RESTART_PYTHON_FOR_PYAUTO': '1'
# in test_env was necessary to run the (Pyauto-based) endure tests with
# Python 2.7.
_DBG_TEST_ENV = {
    'DEEP_MEMORY_PROFILE': '1',
    'DEEP_MEMORY_PROFILE_UPLOAD': 'gs://chromium-endure/',
    'HEAP_PROFILE_ALLOCATION_INTERVAL': '0',
    'HEAP_PROFILE_INUSE_INTERVAL': '0',
}

_DBG_GCLIENT_ENV = {
    'GYP_DEFINES': ('component=static_library '
                    'disable_debugallocation=1 '
                    'python_ver=2.7'),
    'GYP_GENERATORS': 'ninja',
}

ActiveMaster = master_site_config.ChromiumEndure

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Disable compression for the stdio files.
c['logCompressionLimit'] = False

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

LKGR_URL = 'https://chromium-status.appspot.com/lkgr'
c['change_source'] = [URLPoller(changeurl=LKGR_URL, pollInterval=300,
                                category='lkgr', include_revision=True)]

####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.

s_chromium = Scheduler(name='LKGR',
                       change_filter=ChangeFilter(category='lkgr'),
                       builderNames=['Linux QA Perf (0)',
                                     'Linux QA Perf (1)',
                                     'Linux QA Perf (2)',
                                     'Linux QA Perf (3)',
                                     'Linux QA Perf (4)',
                                     'Linux QA Perf (dbg)(0)',
                                     'Linux QA Perf (dbg)(1)',
                                     'Linux QA Perf (dbg)(2)',
                                     'Linux QA Perf (dbg)(3)',
                                     'Linux QA Perf (dbg)(4)',
                                    ])

c['schedulers'] = [s_chromium]

####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = chromium_factory.ChromiumFactory('src/out', 'linux2')
m_linux_dbg = chromium_factory.ChromiumFactory(
    'src/out',
    'linux2',
    custom_deps_list=[_CUSTOM_DEPS_LLVM_ALLOCATED_TYPE])

# Factory properties for the release (non-debug) versions.
_FACTORY_PROPERTIES_REL = {
    'use_xvfb_on_linux': True,
    'show_perf_results': True,
    'perf_id': 'endure-linux-rel',
    'perf_report_url_suffix': 'report.html',
    'run_reference_build': False,
    # Note (2014-06-30): The test_name_suffix property was used in order to
    # separate WPR and live tests; there is some related code in
    # tools/build/scripts/master/factory/chromium_factory.py which was used
    # to append this to the test name. This is expected to be removed when
    # Endure tests are defined using recipes.
    'test_name_suffix': '_wpr',
}

# Factory properties for debug versions.
_FACTORY_PROPERTIES_DBG = dict(_FACTORY_PROPERTIES_REL, **{
    'test_env': _DBG_TEST_ENV,
    'gclient_env': _DBG_GCLIENT_ENV,
    'perf_id': 'endure-linux-dbg',
})

# We've got a number of Endure tests and we want to distribute them across
# several bots. Half of the bots are dedicated "debug" bots and half are
# "non-debug" bots. We want the two sets of bots to run the same tests.
#
# The following list defines the names of the tests that shall be run
# on each of the bots. The test names are defined in:
#   tools/build/scripts/master/factory/chromium_factory.py.
_TEST_LISTS = [
    ['endure_browser_control_tests', 'endure_browser_control_click_tests'],
    ['endure_calendar_tests'],
    ['endure_gmail_alt_label_tests', 'endure_gmail_alt_threadlist_tests'],
    ['endure_gmail_refresh_tests', 'endure_gmail_expand_collapse_tests'],
    ['endure_indexeddb_offline_tests']
]

# Build up lists of factories to use in the builder definitions below.
_FACTORIES_REL = []
_FACTORIES_DBG = []

for test_list in _TEST_LISTS:

  _FACTORIES_REL.append(m_linux.ChromiumFactory(
      target='Release',
      options=['chromium_builder_perf'],
      tests=test_list,
      factory_properties=_FACTORY_PROPERTIES_REL))

  _FACTORIES_DBG.append(m_linux_dbg.ChromiumFactory(
      target='Debug',
      options=['--build-tool=ninja', 'chromium_builder_perf'],
      tests=test_list,
      factory_properties=_FACTORY_PROPERTIES_DBG))

assert len(_FACTORIES_REL) == 5
assert len(_FACTORIES_DBG) == 5

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

c['builders'] = []

for (index, factory) in enumerate(_FACTORIES_REL):
  c['builders'].append({
      'name': 'Linux QA Perf (%d)' % index,
      'factory': factory,
      'auto_reboot': False,
  })

for (index, factory) in enumerate(_FACTORIES_DBG):
  c['builders'].append({
      'name': 'Linux QA Perf (dbg)(%d)' % index,
      'factory': factory,
      'auto_reboot': False,
  })

####### BUILDSLAVES

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumEndure')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# The 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

####### PROJECT IDENTITY

# The 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
