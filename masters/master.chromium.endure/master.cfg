# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config
import master_site_config

_CUSTOM_DEPS_LLVM_ALLOCATED_TYPE = (
    'src/third_party/llvm-allocated-type',
    'svn://svn.chromium.org/chrome/trunk/deps/third_party/llvm-allocated-type')

_DBG_TEST_ENV = {
    'DEEP_MEMORY_PROFILE': '1',
    'DEEP_MEMORY_PROFILE_UPLOAD': 'gs://chromium-endure/',
    'HEAP_PROFILE_ALLOCATION_INTERVAL': '0',
    'HEAP_PROFILE_INUSE_INTERVAL': '0',
    'PERF_STATS_INTERVAL': '600',  # 10 minutes
    'TEST_LENGTH': '7200',  # 2 hours
}

_DBG_GCLIENT_ENV = {
    'GYP_DEFINES': ('clang_type_profiler=1 '
                    'component=static_library '
                    'disable_debugallocation=1'),
    'GYP_GENERATORS': 'ninja',
}

ActiveMaster = master_site_config.ChromiumEndure

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Disable compression for the stdio files.
c['logCompressionLimit'] = False

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]

####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Linux QA Perf (0)',
                                     'Linux QA Perf (1)',
                                     'Linux QA Perf (2)',
                                     'Linux QA Perf (3)',
                                     'Linux QA Perf (4)',
                                     'Linux QA Perf (dbg)(0)',
                                     'Linux QA Perf (dbg)(1)',
                                     'Linux QA Perf (dbg)(2)',
                                     'Linux QA Perf (dbg)(3)',
                                     'Linux QA Perf (dbg)(4)',
                                    ])

c['schedulers'] = [s_chromium]

####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = chromium_factory.ChromiumFactory('src/out', 'linux2')
m_linux_dbg = chromium_factory.ChromiumFactory(
    'src/out',
    'linux2',
    custom_deps_list=[_CUSTOM_DEPS_LLVM_ALLOCATED_TYPE])

# Some shortcut to simplify the code below.
F_LINUX = m_linux.ChromiumFactory
F_LINUX_DBG = m_linux_dbg.ChromiumFactory

factory_properties_rel = {
  'use_xvfb_on_linux': True,
  'show_perf_results': True,
  'perf_id': 'endure-linux-rel',
  'perf_report_url_suffix': 'report.html',
}

f_linux_perf0 = F_LINUX(target='Release',
                        options=['chromium_builder_qa'],
                        tests=['endure_control_tests'],
                        factory_properties=factory_properties_rel.copy())

f_linux_perf1 = F_LINUX(target='Release',
                        options=['chromium_builder_qa'],
                        tests=['endure_gmail_tests'],
                        factory_properties=factory_properties_rel.copy())

f_linux_perf2 = F_LINUX(target='Release',
                        options=['chromium_builder_qa'],
                        tests=['endure_docs_tests',
                               'endure_plus_tests',
                               'endure_indexeddb_tests'],
                        factory_properties=factory_properties_rel.copy())

f_linux_perf3 = F_LINUX(target='Release',
                        options=['chromium_builder_qa'],
                        tests=['endure_gmail_wpr_tests'],
                        factory_properties=factory_properties_rel.copy())

f_linux_perf4 = F_LINUX(target='Release',
                        options=['chromium_builder_qa'],
                        tests=['endure_docs_wpr_tests',
                               'endure_plus_wpr_tests'],
                        factory_properties=factory_properties_rel.copy())

# To run with Python 2.7, add 'python_ver=2.7' in GYP_DEFINES and
# add 'DO_NOT_RESTART_PYTHON_FOR_PYAUTO': '1' in test_env.
# http://www.chromium.org/developers/testing/pyauto#TOC-FAQ

factory_properties_dbg = {
  'use_xvfb_on_linux': True,
  'test_env': _DBG_TEST_ENV,
  'gclient_env': _DBG_GCLIENT_ENV,
  'show_perf_results': True,
  'perf_id': 'endure-linux-dbg',
  'perf_report_url_suffix': 'report.html',
}

f_linux_perf0_dbg = F_LINUX_DBG(
  target='Debug',
  options=['--build-tool=ninja', 'chromium_builder_qa'],
  tests=['endure_control_tests'],
  factory_properties=factory_properties_dbg.copy(),
)

f_linux_perf1_dbg = F_LINUX_DBG(
  target='Debug',
  options=['--build-tool=ninja', 'chromium_builder_qa'],
  tests=['endure_gmail_tests'],
  factory_properties=factory_properties_dbg.copy(),
)

f_linux_perf2_dbg = F_LINUX_DBG(
  target='Debug',
  options=['--build-tool=ninja', 'chromium_builder_qa'],
  tests=['endure_docs_tests',
         'endure_plus_tests',
         'endure_indexeddb_tests'],
  factory_properties=factory_properties_dbg.copy(),
)

f_linux_perf3_dbg = F_LINUX_DBG(
  target='Debug',
  options=['--build-tool=ninja', 'chromium_builder_qa'],
  tests=['endure_gmail_wpr_tests'],
  factory_properties=factory_properties_dbg.copy(),
)

f_linux_perf4_dbg = F_LINUX_DBG(
  target='Debug',
  options=['--build-tool=ninja', 'chromium_builder_qa'],
  tests=['endure_docs_wpr_tests',
         'endure_plus_wpr_tests'],
  factory_properties=factory_properties_dbg.copy(),
)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_linux_perf0 = {
  'name': 'Linux QA Perf (0)',
  'factory': f_linux_perf0,
  'auto_reboot': False,
}
b_linux_perf1 = {
  'name': 'Linux QA Perf (1)',
  'factory': f_linux_perf1,
  'auto_reboot': False,
}
b_linux_perf2 = {
  'name': 'Linux QA Perf (2)',
  'factory': f_linux_perf2,
  'auto_reboot': False,
}
b_linux_perf3 = {
  'name': 'Linux QA Perf (3)',
  'factory': f_linux_perf3,
  'auto_reboot': False,
}
b_linux_perf4 = {
  'name': 'Linux QA Perf (4)',
  'factory': f_linux_perf4,
  'auto_reboot': False,
}
b_linux_perf0_dbg = {
  'name': 'Linux QA Perf (dbg)(0)',
  'factory': f_linux_perf0_dbg,
  'auto_reboot': False,
}
b_linux_perf1_dbg = {
  'name': 'Linux QA Perf (dbg)(1)',
  'factory': f_linux_perf1_dbg,
  'auto_reboot': False,
}
b_linux_perf2_dbg = {
  'name': 'Linux QA Perf (dbg)(2)',
  'factory': f_linux_perf2_dbg,
  'auto_reboot': False,
}
b_linux_perf3_dbg = {
  'name': 'Linux QA Perf (dbg)(3)',
  'factory': f_linux_perf3_dbg,
  'auto_reboot': False,
}
b_linux_perf4_dbg = {
  'name': 'Linux QA Perf (dbg)(4)',
  'factory': f_linux_perf4_dbg,
  'auto_reboot': False,
}

c['builders'] = [
  b_linux_perf0,
  b_linux_perf1,
  b_linux_perf2,
  b_linux_perf3,
  b_linux_perf4,
  b_linux_perf0_dbg,
  b_linux_perf1_dbg,
  b_linux_perf2_dbg,
  b_linux_perf3_dbg,
  b_linux_perf4_dbg,
]

####### BUILDSLAVES

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumEndure')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

####### PROJECT IDENTITY

# The 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# The 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/chromium.endure/'
